{"title":"SpringBoot2[atguigu-sb2-bxl]","uid":"4f5f8b1adeea7120197c416f19615115","slug":"SpringBoot2","date":"2021-06-16T14:11:41.000Z","updated":"2022-08-22T07:59:52.697Z","comments":true,"path":"api/articles/SpringBoot2.json","keywords":null,"cover":"http://p4.qhimg.com/bdm/480_296_0/t01c2e33bb9aaef0a72.jpg","content":"<p>[TOC]</p>\n<p>idea：ctrl+alt+v  快速引进变量，自动补全函数返回值</p>\n<p>&#x3D;&#x3D;win+shift+s&#x3D;&#x3D;：windows截屏工具快捷键！！！</p>\n<h1 id=\"第一季：SpringBoot2核心技术-基础入门\"><a href=\"#第一季：SpringBoot2核心技术-基础入门\" class=\"headerlink\" title=\"第一季：SpringBoot2核心技术-基础入门\"></a><strong>第一季：SpringBoot2核心技术-基础入门</strong></h1><h1 id=\"01、背景\"><a href=\"#01、背景\" class=\"headerlink\" title=\"01、背景\"></a>01、背景</h1><p>Faas：函数式服务 Serverless</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1354552/1602642309979-eac6fe50-dc84-49cc-8ab9-e45b13b90121.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_27,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"image.png\"></p>\n<p>基于Java8的一些新特性，如：接口默认实现。重新设计源码架构。</p>\n<p>1.之前： 实现时要写A所有空方法，适配器模式</p>\n<p>Adapter将A的5方法全默认实现为空方法，BC继承Adapter并重写各自方法。</p>\n<ul>\n<li><p>微服务是一种架构风格</p>\n</li>\n<li><p>一个应用拆分为一组小型服务</p>\n</li>\n<li><p>每个服务运行在自己的进程内，也就是可独立部署和升级</p>\n</li>\n<li><p>服务之间使用<strong>轻量级HTTP交互</strong></p>\n</li>\n<li><p>服务围绕业务功能拆分</p>\n</li>\n<li><p>可以由全自动部署机制独立部署</p>\n</li>\n<li><p>去中心化，服务自治。服务可以使用不同的语言、不同的存储技术</p>\n</li>\n</ul>\n<h3 id=\"分布式的困难\"><a href=\"#分布式的困难\" class=\"headerlink\" title=\"分布式的困难\"></a>分布式的困难</h3><ul>\n<li><p>远程调用</p>\n</li>\n<li><p>服务发现</p>\n</li>\n<li><p>负载均衡</p>\n</li>\n<li><p>服务容错</p>\n</li>\n<li><p>配置管理</p>\n</li>\n<li><p>服务监控</p>\n</li>\n<li><p>链路追踪</p>\n</li>\n<li><p>日志管理：微服务架构默认将应用日志分散保存在每一个微服务节点上，当系统进行用户行为分析、数据统计时必须收集所有节点日志数据，非常不方便。这时候我们需要一个独立的日志平台，<strong>收集</strong>所有节点的日志数据并可方便对其进行汇总<strong>分析</strong>，然后进行可视化<strong>展示</strong>，常见的解决方案有ELK（Elasticsearch+Logstash+Kibana），EFK（Elasticsearch+Fluentd+Kibana）。</p>\n</li>\n<li><p>任务调度</p>\n</li>\n<li><p>……</p>\n</li>\n</ul>\n<p>云原生 运维</p>\n<h3 id=\"上云的困难\"><a href=\"#上云的困难\" class=\"headerlink\" title=\"上云的困难\"></a>上云的困难</h3><ul>\n<li><p>服务自愈</p>\n</li>\n<li><p>弹性伸缩</p>\n</li>\n<li><p>服务隔离</p>\n</li>\n<li><p>自动化部署</p>\n</li>\n<li><p>灰度发布：新旧版本共存，gradually替换【同样的服务有多台服务器运行，先把服务部署在其中一两台上看运行效果，没有问题了再慢慢全部升级】</p>\n</li>\n<li><p>流量治理</p>\n</li>\n<li><p>……</p>\n</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1613913/1599563498261-8b0b4d86-bd9b-49a3-aefc-89696a375dcb.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_14,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10/watermark,type_d3F5LW1pY3JvaGVp,size_29,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10/resize,w_750,limit_0\" alt=\"img\"></p>\n<h1 id=\"02、入门【官网文档】\"><a href=\"#02、入门【官网文档】\" class=\"headerlink\" title=\"02、入门【官网文档】\"></a>02、入门【官网文档】</h1><p><a href=\"https://docs.spring.io/spring-boot/docs/2.3.12.RELEASE/reference/html/index.html\">https://docs.spring.io/spring-boot/docs/2.3.12.RELEASE/reference/html/index.html</a></p>\n<p>依赖管理</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;parent&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;2.3.12.RELEASE&lt;&#x2F;version&gt;\n&lt;&#x2F;parent&gt;\n\n&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;\n    &lt;&#x2F;dependency&gt;\n&lt;&#x2F;dependencies&gt;</code></pre>\n\n<p>统一配置</p>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/2.3.12.RELEASE/reference/html/appendix-application-properties.html#common-application-properties\">https://docs.spring.io/spring-boot/docs/2.3.12.RELEASE/reference/html/appendix-application-properties.html#common-application-properties</a></p>\n<p>application.properties:</p>\n<p>server.port&#x3D;8888</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">http:&#x2F;&#x2F;localhost:8888&#x2F;hello</code></pre>\n\n\n\n<p><a href=\"https://docs.spring.io/spring-boot/docs/2.3.12.RELEASE/reference/html/getting-started.html#getting-started-first-application-executable-jar\">https://docs.spring.io/spring-boot/docs/2.3.12.RELEASE/reference/html/getting-started.html#getting-started-first-application-executable-jar</a></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;build&gt;\n    &lt;plugins&gt;\n        &lt;plugin&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;\n        &lt;&#x2F;plugin&gt;\n    &lt;&#x2F;plugins&gt;\n&lt;&#x2F;build&gt;</code></pre>\n\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211013112651881.png\" alt=\"image-20211013112651881\"></p>\n<p>打Jar包启动：java -jar boot-01-helloworld-1.0-SNAPSHOT.jar</p>\n<h1 id=\"03、了解自动配置原理！！！\"><a href=\"#03、了解自动配置原理！！！\" class=\"headerlink\" title=\"03、了解自动配置原理！！！\"></a>03、了解自动配置原理！！！</h1><p><a href=\"https://www.yuque.com/atguigu/springboot/qb7hy2\">https://www.yuque.com/atguigu/springboot/qb7hy2</a></p>\n<h1 id=\"1、SpringBoot特点\"><a href=\"#1、SpringBoot特点\" class=\"headerlink\" title=\"1、SpringBoot特点\"></a>1、SpringBoot特点</h1><h2 id=\"1-1、依赖管理\"><a href=\"#1-1、依赖管理\" class=\"headerlink\" title=\"1.1、依赖管理\"></a>1.1、依赖管理</h2><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">父项目依赖管理    \n&lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;\n        &lt;version&gt;2.3.4.RELEASE&lt;&#x2F;version&gt;\n&lt;&#x2F;parent&gt;\n\n他的父项目\n &lt;parent&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-boot-dependencies&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;2.3.4.RELEASE&lt;&#x2F;version&gt;\n  &lt;&#x2F;parent&gt;\n\n几乎声明了所有开发中常用的依赖的版本号,【自动版本仲裁机制】</code></pre>\n\n\n\n<ul>\n<li>开发导入【starter场景启动器】</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">3、SpringBoot所有支持的场景 https:&#x2F;&#x2F;docs.spring.io&#x2F;spring-boot&#x2F;docs&#x2F;current&#x2F;reference&#x2F;html&#x2F;using-spring-boot.html#using-boot-starter \n4、见到的  *-spring-boot-starter： 第三方为我们提供的简化开发的场景启动器。\n5、所有场景启动器最底层的依赖\n&lt;dependency&gt;\n  &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n  &lt;artifactId&gt;spring-boot-starter&lt;&#x2F;artifactId&gt;\n  &lt;version&gt;2.3.4.RELEASE&lt;&#x2F;version&gt;\n  &lt;scope&gt;compile&lt;&#x2F;scope&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n\n\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211013114543379.png\" alt=\"image-20211013114543379\"></p>\n<p>引入非版本仲裁的jar，要写版本号。</p>\n<h2 id=\"1-2、自动配置\"><a href=\"#1-2、自动配置\" class=\"headerlink\" title=\"1.2、自动配置\"></a>1.2、自动配置</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@SpringBootApplication\npublic class MainApplication &#123;\n    &#x2F;&#x2F; idea：ctrl+alt+v  快速引进变量，自动补全函数返回值\n    public static void main(String[] args) &#123;\n        &#x2F;&#x2F; 1.返回IOC容器\n        ConfigurableApplicationContext run &#x3D; SpringApplication.run(MainApplication.class, args);\n\n        &#x2F;&#x2F; 2.查看容器里的组件\n        String[] names &#x3D; run.getBeanDefinitionNames();\n        for (String name: names) &#123;\n            System.out.println(name);\n        &#125;\n\n    &#125;\n&#125;</code></pre>\n\n<ul>\n<li><p>自动配好Web常见功能，如：字符编码问题 characterEncodingFilter；dispatcherServlet；viewResolver；文件上传功能 multipartResolver</p>\n</li>\n<li><ul>\n<li>SpringBoot帮我们配置好了所有web开发的常见场景</li>\n</ul>\n</li>\n<li><p>默认的包结构</p>\n</li>\n<li><ul>\n<li>主程序所在包【MainApplication 所在的层级】及其下面的所有子包里面的组件都会被默认扫描进来</li>\n<li>无需以前的包扫描配置</li>\n</ul>\n</li>\n<li><ul>\n<li>想要改变扫描路径，@SpringBootApplication(&#x3D;&#x3D;scanBasePackages&#x3D;&#x3D;&#x3D;<strong>“com.atguigu”</strong>)</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>或者@ComponentScan 指定扫描路径</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@SpringBootApplication\n等同于\n@SpringBootConfiguration\n@EnableAutoConfiguration\n@ComponentScan(&quot;com.atguigu.boot&quot;)</code></pre>\n\n<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">&#x2F;&#x2F;com.bxl.WorldController\n@RestController\npublic class WorldController &#123;\n\n    @RequestMapping(&quot;&#x2F;w&quot;)\n    public String world66() &#123;\n        return &quot;世界&quot;;\n    &#125;\n&#125;\n\n&#x2F;&#x2F;主程序\n@SpringBootApplication(scanBasePackages &#x3D; &quot;com.bxl&quot;)\n\n&#x2F;&#x2F;@SpringBootConfiguration\n&#x2F;&#x2F;@EnableAutoConfiguration\n&#x2F;&#x2F;@ComponentScan(&quot;com.bxl&quot;)\npublic class MainApplication &#123;</code></pre>\n\n\n\n<ul>\n<li><p>各种配置拥有默认值</p>\n</li>\n<li><ul>\n<li>默认配置最终都是映射到某个类上，如：MultipartProperties【&lt;-spring.servlet.multipart.max-file-size&#x3D;10MB】</li>\n<li>配置文件的值最终会绑定每个类上，这个类会在容器中创建对象</li>\n</ul>\n</li>\n<li><p>按需加载所有自动配置项</p>\n</li>\n<li><ul>\n<li>非常多的starter</li>\n<li>引入了哪些场景这个场景的自动配置才会开启</li>\n</ul>\n</li>\n<li><ul>\n<li>SpringBoot所有的自动配置功能都在 spring-boot-autoconfigure 包里面</li>\n<li><img src=\"http://cache.itzy8.top/springboot2/image-20211013145023326.png\" alt=\"image-20211013145023326\"></li>\n<li>+spring-boot-starter-batch 场景后 就不发红了，生效了。</li>\n</ul>\n</li>\n<li><p>……</p>\n</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/21618781/1628039604613-5a21793a-2a8b-405f-8771-3c9e3ab23c73.png\" alt=\"图片.png\"></p>\n<h1 id=\"2、容器功能\"><a href=\"#2、容器功能\" class=\"headerlink\" title=\"2、容器功能\"></a>2、容器功能</h1><h2 id=\"2-1、组件添加\"><a href=\"#2-1、组件添加\" class=\"headerlink\" title=\"2.1、组件添加\"></a>2.1、组件添加</h2><p>Spring xml配置方式：</p>\n<p>+boot-bean- User Pet类</p>\n<p>res-new xml:SpringConfig—— beans.xml</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;bean id&#x3D;&quot;user01&quot; class&#x3D;&quot;com.bxl.boot.bean.User&quot;&gt;\n    &lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;zhangsan&quot;&gt;&lt;&#x2F;property&gt;\n    &lt;property name&#x3D;&quot;age&quot; value&#x3D;&quot;18&quot;&gt;&lt;&#x2F;property&gt;\n&lt;&#x2F;bean&gt;\n\n&lt;bean id&#x3D;&quot;cat&quot; class&#x3D;&quot;com.bxl.boot.bean.Pet&quot;&gt;\n    &lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;tomcat&quot;&gt;&lt;&#x2F;property&gt;\n&lt;&#x2F;bean&gt;</code></pre>\n\n\n\n<h3 id=\"1、-Configuration\"><a href=\"#1、-Configuration\" class=\"headerlink\" title=\"1、@Configuration\"></a>1、@Configuration</h3><ul>\n<li><p>基本使用</p>\n</li>\n<li><p><strong>Full模式与Lite模式</strong></p>\n</li>\n<li><ul>\n<li>示例</li>\n<li>最佳实战</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>配置 类组件之间无依赖关系用Lite模式加速容器启动过程，减少判断</li>\n<li>配置类组件之间有依赖关系，方法会被调用得到之前单实例组件，用Full模式</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">#############################Configuration使用示例######################################################\n&#x2F;**\n * 1、配置类里面使用@Bean标注在方法上给容器注册组件，默认也是单实例的\n * 2、配置类本身也是组件\n * 3、proxyBeanMethods：代理bean的方法\n *      Full(proxyBeanMethods &#x3D; true)、【保证每个@Bean方法被调用多少次返回的组件都是单实例的】\n *      Lite(proxyBeanMethods &#x3D; false)【每个@Bean方法被调用多少次返回的组件都是新创建的】\n *      组件依赖必须使用Full模式默认。其他默认是Lite模式【容器中添加的组件只注册不使用、不依赖】\n *\n *\n *&#x2F;\n@Configuration(proxyBeanMethods &#x3D; true) &#x2F;&#x2F;告诉SpringBoot这是一个配置类 &#x3D;&#x3D; 配置文件\npublic class MyConfig &#123;\n\n    &#x2F;**\n     * Full:外部无论对配置类中的这个组件注册方法调用多少次获取的都是之前注册容器中的单实例对象\n     * @return\n     *&#x2F;\n    @Bean &#x2F;&#x2F;给容器中添加bean组件。以方法名作为组件的id。返回类型就是组件类型。返回的值，就是组件在容器中的实例\n    public User user01()&#123;\n        User zhangsan &#x3D; new User(&quot;zhangsan&quot;, 18);\n        &#x2F;&#x2F;true: user组件依赖了Pet组件\n        zhangsan.setPet(tomcatPet());\n        return zhangsan;\n    &#125;\n\n    @Bean(&quot;tom&quot;) &#x2F;&#x2F;自定义组件名\n    public Pet tomcatPet()&#123;\n        return new Pet(&quot;tomcat&quot;);\n    &#125;\n&#125;\n\n\n################################@Configuration测试代码如下########################################\n&#x2F;**\n * 主程序类：主配置类\n *&#x2F;\n@SpringBootApplication(scanBasePackages &#x3D; &quot;com.bxl&quot;)\n\n&#x2F;&#x2F;@SpringBootConfiguration\n&#x2F;&#x2F;@EnableAutoConfiguration\n&#x2F;&#x2F;@ComponentScan(&quot;com.bxl&quot;)\npublic class MainApplication &#123;\n    &#x2F;&#x2F; idea：ctrl+alt+v  快速引进变量，自动补全函数返回值\n    public static void main(String[] args) &#123;\n        &#x2F;&#x2F; 1.返回IOC容器\n        ConfigurableApplicationContext run &#x3D; SpringApplication.run(MainApplication.class, args);\n\n        &#x2F;&#x2F; 2.查看容器里的组件\n        String[] names &#x3D; run.getBeanDefinitionNames();\n        for (String name: names) &#123;\n            System.out.println(name);\n        &#125;\n\n        &#x2F;&#x2F;3、从容器中获取组件【1默认单实例】\n        Pet tom01 &#x3D; run.getBean(&quot;tom&quot;, Pet.class);\n        Pet tom02 &#x3D; run.getBean(&quot;tom&quot;, Pet.class);\n\n        System.out.println(&quot;2个Pet组件&#x3D;&#x3D;否:&quot;+(tom01 &#x3D;&#x3D; tom02));\n\n        &#x2F;&#x2F;4、代理对象：com.bxl.boot.config.MyConfig$$EnhancerBySpringCGLIB$$51f1e1ca@1654a892\n        &#x2F;&#x2F;@Configuration(proxyBeanMethods &#x3D; true):  com.bxl.boot.config.MyConfig@71154f21\n        MyConfig bean &#x3D; run.getBean(MyConfig.class);\n        System.out.println(bean);\n\n        &#x2F;&#x2F;如果@Configuration(proxyBeanMethods &#x3D; true)代理对象调用方法。SpringBoot总会检查这个组件是否在容器中有。\n        &#x2F;&#x2F;保持组件单实例,false就!&#x3D;\n        User user &#x3D; bean.user01();\n        User user1 &#x3D; bean.user01();\n        System.out.println(user &#x3D;&#x3D; user1);\n\n\n        User user01 &#x3D; run.getBean(&quot;user01&quot;, User.class);\n        Pet tom &#x3D; run.getBean(&quot;tom&quot;, Pet.class);\n\n        System.out.println(&quot;用户的宠物：&quot;+(user01.getPet() &#x3D;&#x3D; tom));\n\n\n    &#125;\n&#125;\n</code></pre>\n\n<h3 id=\"2、-Bean、-Component、-Controller、-Service、-Repository\"><a href=\"#2、-Bean、-Component、-Controller、-Service、-Repository\" class=\"headerlink\" title=\"2、@Bean、@Component、@Controller、@Service、@Repository\"></a>2、@Bean、@Component、@Controller、@Service、@Repository</h3><p>在Stereotype（旧规矩）模式下，Spring为Controller-Service-Dao的分层模型分别提供了@Controller、@Service、@Repository注解，除此之外的组件使用@Component注解。</p>\n<p>根据它们的源码可以看到，Controller、Service、Repository其本质就是Component。</p>\n<p>它存在的本质只是给开发者看的，对Spring而言它们就都是Component。</p>\n<p>@Controller 控制层类，@Service 业务层类，@Repository 持久层类，@Component 无法归类到前3种时就称为组件。</p>\n<p>使用@Component注解在一个类上，表示将此类标记为Spring容器中的一个Bean。</p>\n<h3 id=\"3、-ComponentScan、-Import\"><a href=\"#3、-ComponentScan、-Import\" class=\"headerlink\" title=\"3、@ComponentScan、@Import\"></a>3、@ComponentScan、@Import</h3><p>@ComponentScan：扫描包</p>\n<p>@Import的好处是可以引入第三方外部类，可以标注在主配置类MainApplication或者组件上</p>\n<p>@Import：自动从类中的<strong>无参构造函数</strong>创建一个实例注册到 IOC 容器中</p>\n<p>【注意】@Import所创建的bean实例在 IOC 容器中<strong>默认的id名为类的全限定名</strong>，如 User 类就是：com.atguigu.bean.User</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Import(&#123;User.class, DBHelper.class&#125;)</code></pre>\n\n<p>@Import 高级用法： <a href=\"https://www.bilibili.com/video/BV1gW411W7wy?p=8\">https://www.bilibili.com/video/BV1gW411W7wy?p=8</a></p>\n<h3 id=\"4、-Conditional\"><a href=\"#4、-Conditional\" class=\"headerlink\" title=\"4、@Conditional\"></a>4、@Conditional</h3><p>条件装配：满足Conditional指定的条件，则进行组件注入</p>\n<p>搜 下载源码 ctrl+h：继承树</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1354552/1602835786727-28b6f936-62f5-4fd6-a6c5-ae690bd1e31d.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_17,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<p>容器中有无bean Class ,项目类路径中有无resource 配置property，指定Java版本，是否web应用 … 才注入bean</p>\n<p>ConditionalOnSingleCandidate：指定组件只有一个【@Priority主】实例</p>\n<h2 id=\"2-2、原生配置文件引入\"><a href=\"#2-2、原生配置文件引入\" class=\"headerlink\" title=\"2.2、原生配置文件引入\"></a>2.2、原生配置文件引入</h2><h3 id=\"1、-ImportResource\"><a href=\"#1、-ImportResource\" class=\"headerlink\" title=\"1、@ImportResource\"></a>1、@ImportResource</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * 1、配置类里面使用@Bean标注在方法上给容器注册组件，默认也是单实例的\n * 2、配置类本身也是组件\n * 3、proxyBeanMethods：代理bean的方法\n *      Full(proxyBeanMethods &#x3D; true)、【保证每个@Bean方法被调用多少次返回的组件都是单实例的】\n *      Lite(proxyBeanMethods &#x3D; false)【每个@Bean方法被调用多少次返回的组件都是新创建的】\n *      组件依赖必须使用Full模式默认。其他默认是Lite模式【容器中添加的组件只注册不使用、不依赖】\n * 4、@Import(&#123;User.class, DBHelper.class&#125;)\n *      给容器中自动创建出这两个类型的组件、默认组件的名字就是全类名\n *&#x2F;\n\n@Import(&#123;User.class, DBHelper.class&#125;)\n@Configuration(proxyBeanMethods &#x3D; true) &#x2F;&#x2F;告诉SpringBoot这是一个配置类 &#x3D;&#x3D; 配置文件\n&#x2F;&#x2F;@ConditionalOnBean(name &#x3D; &quot;tom&quot;) &#x2F;&#x2F;依赖tom而存在，容器有tom，才有user01，tom22\n@ConditionalOnMissingBean(name &#x3D; &quot;tom&quot;)\n@ImportResource(&quot;classpath:beans.xml&quot;) &#x2F;&#x2F;spring xml配置生效\npublic class MyConfig &#123;\n\n&#x2F;&#x2F;    @Bean(&quot;tom22&quot;) &#x2F;&#x2F;自定义组件名\n&#x2F;&#x2F;    public Pet tomcatPet()&#123;\n&#x2F;&#x2F;        return new Pet(&quot;tomcat&quot;);\n&#x2F;&#x2F;    &#125;\n\n    &#x2F;**\n     * Full:外部无论对配置类中的这个组件注册方法调用多少次获取的都是之前注册容器中的单实例对象\n     * @return\n     *&#x2F;\n    &#x2F;&#x2F;依赖tom22而存在\n    &#x2F;&#x2F; !!!组件按顺序加入容器：如果tom22在user01后面加载，就是user01&#x3D;false[此时还没载入tom22,条件不满足] tom22&#x3D;true\n    @ConditionalOnBean(name &#x3D; &quot;tom22&quot;)\n    @Bean &#x2F;&#x2F;给容器中添加bean组件。以方法名作为组件的id。返回类型就是组件类型。返回的值，就是组件在容器中的实例\n    public User user01()&#123;\n        User zhangsan &#x3D; new User(&quot;zhangsan&quot;, 18);\n        &#x2F;&#x2F;true: user组件依赖了Pet组件\n        zhangsan.setPet(tomcatPet());\n        return zhangsan;\n    &#125;\n\n    @Bean(&quot;tom22&quot;) &#x2F;&#x2F;自定义组件名\n    public Pet tomcatPet()&#123;\n        return new Pet(&quot;tomcat&quot;);\n    &#125;\n&#125;\n\n\n\nMain测试：\n        boolean tom &#x3D; run.containsBean(&quot;tom&quot;);\n        System.out.println(&quot;容器中tom组件：&quot;+ tom);\n\n        boolean user01 &#x3D; run.containsBean(&quot;user01&quot;);\n        System.out.println(&quot;容器中user01组件：&quot;+ user01);\n\n        boolean tom22 &#x3D; run.containsBean(&quot;tom22&quot;);\n        System.out.println(&quot;容器中tom22组件：&quot;+ tom22);\n\n        &#x2F;&#x2F;@ImportResource(&quot;classpath:beans.xml&quot;) &#x2F;&#x2F;spring xml配置\n        boolean haha &#x3D; run.containsBean(&quot;haha&quot;);\n        boolean hehe &#x3D; run.containsBean(&quot;hehe&quot;);\n        System.out.println(&quot;haha：&quot;+haha);\n        System.out.println(&quot;hehe：&quot;+hehe);\n</code></pre>\n\n\n\n<h2 id=\"2-3、配置绑定\"><a href=\"#2-3、配置绑定\" class=\"headerlink\" title=\"2.3、配置绑定\"></a>2.3、配置绑定</h2><p>如何使用Java读取到properties文件中的内容，并且把它封装到JavaBean中，以供随时使用；</p>\n<p>以前：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class getProperties &#123;\n     public static void main(String[] args) throws FileNotFoundException, IOException &#123;\n         Properties pps &#x3D; new Properties();\n         pps.load(new FileInputStream(&quot;a.properties&quot;));\n         Enumeration enum1 &#x3D; pps.propertyNames();&#x2F;&#x2F;得到配置文件的名字\n         while(enum1.hasMoreElements()) &#123;\n             String strKey &#x3D; (String) enum1.nextElement();\n             String strValue &#x3D; pps.getProperty(strKey);\n             System.out.println(strKey + &quot;&#x3D;&quot; + strValue);\n             &#x2F;&#x2F;封装到JavaBean。\n         &#125;\n     &#125;\n &#125;</code></pre>\n\n<p>Springboot2 注解2种方式：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">法一：\n@Component\n@ConfigurationProperties(prefix &#x3D; &quot;mycar&quot;)\npublic class Car &#123;\n\n法二：\n@ConfigurationProperties(prefix &#x3D; &quot;mycar&quot;)\npublic class Car &#123;\n+\n@EnableConfigurationProperties(Car.class)\n&#x2F;&#x2F;1、开启Car配置绑定功能\n&#x2F;&#x2F;2、把这个Car这个组件自动注册到容器中\npublic class MyConfig &#123;\n    \n    \n将JavaBean与spring核心配置文件application.properties中mycar前缀配置绑定：    \nmycar.brand&#x3D;BYD\nmycar.price&#x3D;100000</code></pre>\n\n\n\n<h1 id=\"3、自动配置原理入门\"><a href=\"#3、自动配置原理入门\" class=\"headerlink\" title=\"3、自动配置原理入门\"></a>3、自动配置原理入门</h1><h2 id=\"3-1、引导加载自动配置类\"><a href=\"#3-1、引导加载自动配置类\" class=\"headerlink\" title=\"3.1、引导加载自动配置类\"></a>3.1、引导加载自动配置类</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@SpringBootConfiguration\n@EnableAutoConfiguration\n@ComponentScan(excludeFilters &#x3D; &#123; @Filter(type &#x3D; FilterType.CUSTOM, classes &#x3D; TypeExcludeFilter.class),\n\t\t@Filter(type &#x3D; FilterType.CUSTOM, classes &#x3D; AutoConfigurationExcludeFilter.class) &#125;)\npublic @interface SpringBootApplication&#123;&#125;\n\n\n&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n    </code></pre>\n\n<h3 id=\"1、-SpringBootConfiguration\"><a href=\"#1、-SpringBootConfiguration\" class=\"headerlink\" title=\"1、@SpringBootConfiguration\"></a>1、@SpringBootConfiguration</h3><p>@Configuration。代表当前是一个配置类   类似“MyConfig”</p>\n<h3 id=\"2、-ComponentScan\"><a href=\"#2、-ComponentScan\" class=\"headerlink\" title=\"2、@ComponentScan\"></a>2、@ComponentScan</h3><p>指定扫描哪些，Spring注解；</p>\n<h3 id=\"3、-EnableAutoConfiguration\"><a href=\"#3、-EnableAutoConfiguration\" class=\"headerlink\" title=\"3、@EnableAutoConfiguration\"></a>3、@EnableAutoConfiguration</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@AutoConfigurationPackage\n@Import(AutoConfigurationImportSelector.class)\npublic @interface EnableAutoConfiguration &#123;&#125;</code></pre>\n\n<h4 id=\"1、-AutoConfigurationPackage\"><a href=\"#1、-AutoConfigurationPackage\" class=\"headerlink\" title=\"1、@AutoConfigurationPackage\"></a>1、@AutoConfigurationPackage</h4><p>自动配置包？指定了默认的包规则</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Import(AutoConfigurationPackages.Registrar.class)  &#x2F;&#x2F;给容器中导入一个组件\npublic @interface AutoConfigurationPackage &#123;&#125;\n\n&#x2F;&#x2F;利用Registrar给容器中导入一系列组件\n&#x2F;&#x2F;将【指定的一个包】下的所有组件导入进来？-&gt;MainApplication 所在包下。</code></pre>\n\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211014104924433.png\" alt=\"image-20211014104924433\"></p>\n<p>&#x3D;&#x3D;win+shift+s&#x3D;&#x3D;：windows截屏工具快捷键！！！</p>\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211014105234146.png\" alt=\"image-20211014105234146\"></p>\n<h4 id=\"2、-Import-AutoConfigurationImportSelector-class\"><a href=\"#2、-Import-AutoConfigurationImportSelector-class\" class=\"headerlink\" title=\"2、@Import(AutoConfigurationImportSelector.class)\"></a>2、@Import(AutoConfigurationImportSelector.class)</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">1、利用getAutoConfigurationEntry(annotationMetadata);给容器中批量导入一些组件\n2、调用List&lt;String&gt; configurations &#x3D; getCandidateConfigurations(annotationMetadata, attributes)获取到所有需要导入到容器中的配置类\n3、利用工厂加载 Map&lt;String, List&lt;String&gt;&gt; loadSpringFactories(@Nullable ClassLoader classLoader)；得到所有的组件\n4、从META-INF&#x2F;spring.factories位置来加载一个文件。\n\t默认扫描我们当前系统里面所有META-INF&#x2F;spring.factories位置的文件\n    spring-boot-autoconfigure-2.3.4.RELEASE.jar包里面也有META-INF&#x2F;spring.factories\n    </code></pre>\n\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1354552/1602845382065-5c41abf5-ee10-4c93-89e4-2a9b831c3ceb.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_29,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">文件里面写死了spring-boot一启动就要给容器中加载的所有配置类\nspring-boot-autoconfigure-2.3.4.RELEASE.jar&#x2F;META-INF&#x2F;spring.factories\n# Auto Configure\norg.springframework.boot.autoconfigure.EnableAutoConfiguration&#x3D;\\\norg.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\\\norg.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\\\norg.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\\\norg.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\\\norg.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\\\norg.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\\\norg.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.context.LifecycleAutoConfiguration,\\\norg.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\\\norg.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\\\norg.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.elasticsearch.ReactiveElasticsearchRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.elasticsearch.ReactiveElasticsearchRestClientAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.jdbc.JdbcRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.mongo.MongoReactiveDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.mongo.MongoReactiveRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.r2dbc.R2dbcDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.r2dbc.R2dbcRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.r2dbc.R2dbcTransactionManagerAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\\\norg.springframework.boot.autoconfigure.elasticsearch.ElasticsearchRestClientAutoConfiguration,\\\norg.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\\\norg.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\\\norg.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\\\norg.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\\\norg.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\\\norg.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\\\norg.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\\\norg.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\\\norg.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration,\\\norg.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration,\\\norg.springframework.boot.autoconfigure.influx.InfluxDbAutoConfiguration,\\\norg.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\\\norg.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration,\\\norg.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\\\norg.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration,\\\norg.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\\\norg.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\\\norg.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mongo.MongoReactiveAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\\\norg.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\\\norg.springframework.boot.autoconfigure.quartz.QuartzAutoConfiguration,\\\norg.springframework.boot.autoconfigure.r2dbc.R2dbcAutoConfiguration,\\\norg.springframework.boot.autoconfigure.rsocket.RSocketMessagingAutoConfiguration,\\\norg.springframework.boot.autoconfigure.rsocket.RSocketRequesterAutoConfiguration,\\\norg.springframework.boot.autoconfigure.rsocket.RSocketServerAutoConfiguration,\\\norg.springframework.boot.autoconfigure.rsocket.RSocketStrategiesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.reactive.ReactiveSecurityAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.rsocket.RSocketSecurityAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.saml2.Saml2RelyingPartyAutoConfiguration,\\\norg.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\\\norg.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.oauth2.client.servlet.OAuth2ClientAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.oauth2.client.reactive.ReactiveOAuth2ClientAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerAutoConfiguration,\\\norg.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\\\norg.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration,\\\norg.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration,\\\norg.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\\\norg.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\\\norg.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\\\norg.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.reactive.error.ErrorWebFluxAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration,\\\norg.springframework.boot.autoconfigure.websocket.reactive.WebSocketReactiveAutoConfiguration,\\\norg.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration,\\\norg.springframework.boot.autoconfigure.websocket.servlet.WebSocketMessagingAutoConfiguration,\\\norg.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.webservices.client.WebServiceTemplateAutoConfiguration</code></pre>\n\n<h2 id=\"3-2、按需开启自动配置项\"><a href=\"#3-2、按需开启自动配置项\" class=\"headerlink\" title=\"3.2、按需开启自动配置项\"></a>3.2、按需开启自动配置项</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">虽然我们127个场景的所有自动配置启动的时候默认全部加载。xxxxAutoConfiguration\n按照条件装配规则（@Conditional），最终会按需配置。</code></pre>\n\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211014131000769.png\" alt=\"image-20211014131000769\"></p>\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211014173755557.png\" alt=\"image-20211014173755557\"></p>\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211014174000005.png\" alt=\"image-20211014174000005\"></p>\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211014173636633.png\" alt=\"image-20211014173636633\"></p>\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211014174040028.png\" alt=\"image-20211014174040028\"></p>\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211014174315290.png\" alt=\"image-20211014174315290\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">private static class DefaultDispatcherServletCondition extends SpringBootCondition &#123;\n    看注解。。。ing</code></pre>\n\n<h2 id=\"3-3、修改默认配置\"><a href=\"#3-3、修改默认配置\" class=\"headerlink\" title=\"3.3、修改默认配置\"></a>3.3、修改默认配置</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">        @Bean\n\t\t@ConditionalOnBean(MultipartResolver.class)  &#x2F;&#x2F;容器中有这个类型组件\n\t\t@ConditionalOnMissingBean(name &#x3D; DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME) &#x2F;&#x2F;容器中没有这个名字为 multipartResolver 的组件\n\t\tpublic MultipartResolver multipartResolver(MultipartResolver resolver) &#123;\n            &#x2F;&#x2F;给【@Bean标注的方法传入了对象参数】，这个【参数的值就会从容器中找】。\n            &#x2F;&#x2F;SpringMVC multipartResolver。防止有些用户配置的文件上传解析器不符合规范【命名规范化！】\n\t\t\t&#x2F;&#x2F; Detect if the user has created a MultipartResolver but named it incorrectly\n\t\t\treturn resolver;\n\t\t&#125;\n给容器中加入了文件上传解析器；</code></pre>\n\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2><p><img src=\"http://cache.itzy8.top/springboot2/image-20211014183111309.png\" alt=\"image-20211014183111309\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">    @RequestMapping(&quot;&#x2F;hello&quot;)\n    public String handle01(@RequestParam(&quot;name&quot;) String name) &#123;\n        return &quot;Hello, Spring boot 2!&quot; + &quot;你好：&quot; + name;\n    &#125;\n\nhttp:&#x2F;&#x2F;localhost:8888&#x2F;hello?name&#x3D;张三\n\n\nProperties绑定配置\napplication.properties:\n#server.servlet.encoding.charset&#x3D;GBK</code></pre>\n\n\n\n<p>SpringBoot默认会在底层配好所有的组件。但是如果用户自己配置了【以用户的优先】</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Bean\n\t@ConditionalOnMissingBean\n\tpublic CharacterEncodingFilter characterEncodingFilter() &#123;\n    &#125;</code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">MyConfig:\n&#x2F;&#x2F;    @Bean\n&#x2F;&#x2F;    public CharacterEncodingFilter filter()&#123;\n&#x2F;&#x2F;        return null;\n&#x2F;&#x2F;    &#125;</code></pre>\n\n<h2 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a></h2><p>&#x3D;&#x3D;总结&#x3D;&#x3D;：</p>\n<ul>\n<li><p>SpringBoot先加载所有的自动配置类  xxxxxAutoConfiguration</p>\n</li>\n<li><p>每个自动配置类按照条件进行生效，默认都会绑定配置文件指定的值。xxxxProperties里面拿。xxxProperties和配置文件进行了绑定</p>\n</li>\n<li><p>生效的配置类就会给容器中装配很多组件</p>\n</li>\n<li><p>只要容器中有这些组件，相当于这些功能就有了</p>\n</li>\n<li><p>定制化配置</p>\n</li>\n<li><ul>\n<li>用户直接【自己@Bean替换底层的组件】</li>\n<li>用户去看这个【组件是获取的配置文件什么值就去修改】。</li>\n</ul>\n</li>\n</ul>\n<p><strong>xxxxxAutoConfiguration —&gt; 组件  —&gt;</strong> <strong>xxxxProperties里面拿值  —-&gt; application.properties</strong></p>\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211014183652574.png\" alt=\"image-20211014183652574\"></p>\n<p>改配置方法：</p>\n<p>查配置文档</p>\n<p>查AutoConfiguration源码</p>\n<h2 id=\"3-4、最佳实践\"><a href=\"#3-4、最佳实践\" class=\"headerlink\" title=\"3.4、最佳实践\"></a>3.4、最佳实践</h2><ul>\n<li><p>引入场景依赖</p>\n</li>\n<li><ul>\n<li><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter\">https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter</a></li>\n</ul>\n</li>\n<li><p>查看自动配置了哪些（选做）</p>\n</li>\n<li><ul>\n<li>自己分析，引入场景对应的自动配置一般都生效了</li>\n<li>&#x3D;&#x3D;配置文件中debug&#x3D;true&#x3D;&#x3D;开启自动配置报告。Negative（不生效）\\Positive matches（生效）</li>\n</ul>\n</li>\n<li><p>是否需要修改</p>\n</li>\n<li><ul>\n<li>参照文档修改配置项</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html#common-application-properties\">https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html#common-application-properties</a></li>\n<li>自己分析。xxxxProperties绑定了配置文件的哪些前缀prefix。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li>自定义加入或者替换组件</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>@Bean、@Component。。。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li>自定义器  <strong>XXXXXCustomizer</strong>；</li>\n<li>……</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211014190300680.png\" alt=\"image-20211014190300680\"></p>\n<h1 id=\"4、开发小技巧\"><a href=\"#4、开发小技巧\" class=\"headerlink\" title=\"4、开发小技巧\"></a>4、开发小技巧</h1><h2 id=\"4-1、Lombok\"><a href=\"#4-1、Lombok\" class=\"headerlink\" title=\"4.1、Lombok\"></a>4.1、Lombok</h2><p>简化JavaBean开发</p>\n<p>@NoArgsConstructor  &#x2F;&#x2F;无参构造器<br>&#x2F;&#x2F;@AllArgsConstructor  &#x2F;&#x2F;全参构造器<br>@Data<br>@ToString<br>@EqualsAndHashCode</p>\n<p>@Slf4j</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">parent-dependency-搜lombok.version:\n\t\t&lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;\n        &lt;&#x2F;dependency&gt;\n\n\nsettings-plugin- idea中搜索安装lombok插件\n&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;简化JavaBean开发&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n@NoArgsConstructor  &#x2F;&#x2F;无参构造器\n&#x2F;&#x2F;@AllArgsConstructor  &#x2F;&#x2F;全参构造器\n@Data\n@ToString\n@EqualsAndHashCode\npublic class User &#123;\n\n    private String name;\n    private Integer age;\n\n    private Pet pet;\n\n    public User(String name,Integer age)&#123;\n        this.name &#x3D; name;\n        this.age &#x3D; age;\n    &#125;\n\n\n&#125;\n\n\n\n&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;简化日志开发&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n@Slf4j\n@RestController\npublic class HelloController &#123;\n    @RequestMapping(&quot;&#x2F;hello&quot;)\n    public String handle01(@RequestParam(&quot;name&quot;) String name)&#123;\n        \n        log.info(&quot;请求进来了....&quot;);\n        \n        return &quot;Hello, Spring Boot 2!&quot;+&quot;你好：&quot;+name;\n    &#125;\n&#125;</code></pre>\n\n\n\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211014191834353.png\" alt=\"image-20211014191834353\"></p>\n<h2 id=\"4-2、dev-tools-【ctrl-shift-F9-autorestart】\"><a href=\"#4-2、dev-tools-【ctrl-shift-F9-autorestart】\" class=\"headerlink\" title=\"4.2、dev-tools 【ctrl(+shift)+F9 autorestart】\"></a>4.2、dev-tools 【ctrl(+shift)+F9 autorestart】</h2><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n        &lt;artifactId&gt;spring-boot-devtools&lt;&#x2F;artifactId&gt;\n        &lt;optional&gt;true&lt;&#x2F;optional&gt; \n    &lt;&#x2F;dependency&gt; &lt;!--必须--&gt;\n\n&lt;build&gt;\n    &lt;plugins&gt;\n        &lt;plugin&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;\n            &lt;configuration&gt;\n                &lt;fork&gt;true&lt;&#x2F;fork&gt;&lt;!-- 如果没有该配置，热部署的devtools不生效 --&gt;\n            &lt;&#x2F;configuration&gt;\n        &lt;&#x2F;plugin&gt;\n    &lt;&#x2F;plugins&gt;\n&lt;&#x2F;build&gt;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F;ctrl+F9：devtools autorestart(shift+F10)  付费JRebel：reload\n@RequestMapping(&quot;&#x2F;hello257&quot;)</code></pre>\n\n<p>项目或者页面修改以后：Ctrl+F9；</p>\n<p>似乎不太管用。。。</p>\n<p>ctrl+shift+F9</p>\n<p><optional>true</optional> </p>\n <configuration>\n                    <fork>true</fork><!-- 如果没有该配置，热部署的devtools不生效 -->\n                </configuration>\n\n\n\n\n\n<h2 id=\"4-3、Spring-Initailizr（项目初始化向导）\"><a href=\"#4-3、Spring-Initailizr（项目初始化向导）\" class=\"headerlink\" title=\"4.3、Spring Initailizr（项目初始化向导）\"></a>4.3、Spring Initailizr（项目初始化向导）</h2><h3 id=\"0、选择我们需要的开发场景\"><a href=\"#0、选择我们需要的开发场景\" class=\"headerlink\" title=\"0、选择我们需要的开发场景\"></a>0、选择我们需要的开发场景</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1354552/1602922147241-73fb2496-e795-4b5a-b909-a18c6011a028.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_37,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<h3 id=\"1、自动依赖引入\"><a href=\"#1、自动依赖引入\" class=\"headerlink\" title=\"1、自动依赖引入\"></a>1、自动依赖引入</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1354552/1602921777330-8fc5c198-75da-4ff9-b82c-71ee3fe18af8.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_28,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<h3 id=\"2、自动创建项目结构\"><a href=\"#2、自动创建项目结构\" class=\"headerlink\" title=\"2、自动创建项目结构\"></a>2、自动创建项目结构</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1354552/1602921758313-5099fe18-4c7b-4417-bf6f-2f40b9028296.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_18,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<h3 id=\"3、自动编写好主配置类\"><a href=\"#3、自动编写好主配置类\" class=\"headerlink\" title=\"3、自动编写好主配置类\"></a>3、自动编写好主配置类</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1354552/1602922039074-79e98aad-8158-4113-a7e7-305b57b0a6bf.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_29,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"image.png\"></p>\n<p>Spring Boot 2 学习笔记（上）：<a href=\"https://blog.csdn.net/u011863024/article/details/113667634\">https://blog.csdn.net/u011863024/article/details/113667634</a></p>\n<p>Spring Boot 2 学习笔记（下）：<a href=\"https://blog.csdn.net/u011863024/article/details/113667946\">https://blog.csdn.net/u011863024/article/details/113667946</a></p>\n<p>web模块默认规则的原理研究笔记：<br>主要包括：<br>1、配置文件加载位置<br>2、静态资源映射规则<br>3、templates文件夹<br>4、错误页面处理<br>5、WebMvcConfigurer配置</p>\n<p><a href=\"https://blog.csdn.net/qq_43240702/article/details/111032361\">https://blog.csdn.net/qq_43240702/article/details/111032361</a></p>\n<p>SpringBoot 自动装配源码：<a href=\"https://www.cnblogs.com/seazean/p/15109440.html\">https://www.cnblogs.com/seazean/p/15109440.html</a></p>\n<p>MVC 源码笔记，根据 doDispatch 函数一步一步的源码解析：<a href=\"https://www.cnblogs.com/seazean/p/15095819.htm\">https://www.cnblogs.com/seazean/p/15095819.htm</a></p>\n<h1 id=\"第一季：SpringBoot2核心技术-核心功能\"><a href=\"#第一季：SpringBoot2核心技术-核心功能\" class=\"headerlink\" title=\"第一季：SpringBoot2核心技术-核心功能\"></a><strong>第一季：SpringBoot2核心技术-核心功能</strong></h1><p>boot-05-web-01项目</p>\n<h1 id=\"04、配置文件\"><a href=\"#04、配置文件\" class=\"headerlink\" title=\"04、配置文件\"></a>04、配置文件</h1><h1 id=\"1、文件类型\"><a href=\"#1、文件类型\" class=\"headerlink\" title=\"1、文件类型\"></a>1、文件类型</h1><h2 id=\"1-1、properties\"><a href=\"#1-1、properties\" class=\"headerlink\" title=\"1.1、properties\"></a>1.1、properties</h2><p>同以前的properties用法</p>\n<h2 id=\"1-2、yaml\"><a href=\"#1-2、yaml\" class=\"headerlink\" title=\"1.2、yaml\"></a>1.2、yaml</h2><h3 id=\"1-2-1、简介\"><a href=\"#1-2-1、简介\" class=\"headerlink\" title=\"1.2.1、简介\"></a>1.2.1、简介</h3><p>YAML 是 “YAML Ain’t Markup Language”（YAML 不是一种标记语言）的递归缩写。在开发的这种语言时，YAML 的意思其实是：”Yet Another Markup Language”（仍是一种标记语言）。 </p>\n<p>非常适合用来做以数据为中心的配置文件</p>\n<h3 id=\"1-2-2、基本语法\"><a href=\"#1-2-2、基本语法\" class=\"headerlink\" title=\"1.2.2、基本语法\"></a>1.2.2、基本语法</h3><ul>\n<li><p>key: value；kv之间有空格</p>\n</li>\n<li><p>大小写敏感</p>\n</li>\n<li><p>使用缩进表示层级关系</p>\n</li>\n<li><p>缩进不允许使用tab，只允许空格</p>\n</li>\n<li><p>缩进的空格数不重要，只要相同层级的元素左对齐即可</p>\n</li>\n<li><p>‘#’表示注释</p>\n</li>\n<li><p>字符串无需加引号，如果要加，’’与””表示字符串内容 会被 转义&#x2F;不转义</p>\n</li>\n</ul>\n<h3 id=\"1-2-3、数据类型\"><a href=\"#1-2-3、数据类型\" class=\"headerlink\" title=\"1.2.3、数据类型\"></a>1.2.3、数据类型</h3><ul>\n<li>字面量：单个的、不可再分的值。date、boolean、string、number、null</li>\n</ul>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">k: v</code></pre>\n\n<ul>\n<li>对象：键值对的集合。map、hash、set、object</li>\n</ul>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">行内写法：  k: &#123;k1:v1,k2:v2,k3:v3&#125;\n#或\nk: \n\tk1: v1\n  k2: v2\n  k3: v3</code></pre>\n\n<ul>\n<li>数组：一组按次序排列的值。array、list、queue</li>\n</ul>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">行内写法：  k: [v1,v2,v3]\n#或者\nk:\n - v1\n - v2\n - v3</code></pre>\n\n<h3 id=\"1-2-4、示例\"><a href=\"#1-2-4、示例\" class=\"headerlink\" title=\"1.2.4、示例\"></a>1.2.4、示例</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@ConfigurationProperties(prefix &#x3D; &quot;person&quot;)\n@Component\n@ToString\n@Data\npublic class Person &#123;\n\t\n\tprivate String userName;\n\tprivate Boolean boss;\n\tprivate Date birth;\n\tprivate Integer age;\n\tprivate Pet pet;\n\tprivate String[] interests;\n\tprivate List&lt;String&gt; animal;\n\tprivate Map&lt;String, Object&gt; score;\n\tprivate Set&lt;Double&gt; salarys;\n\tprivate Map&lt;String, List&lt;Pet&gt;&gt; allPets;\n&#125;\n\n@Data\npublic class Pet &#123;\n\tprivate String name;\n\tprivate Double weight;\n&#125;</code></pre>\n\n\n\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">person:\n#  单引号会将 \\n作为字符串输出   双引号会将\\n 作为换行输出\n#  双引号不会转义，单引号会转义\n  boss: true\n  birth: 2019&#x2F;12&#x2F;9\n  age: 18\n#  interests: [篮球,足球]\n  interests:\n    - 篮球\n    - 足球\n    - 18\n  animal: [阿猫,阿狗]\n#  score:\n#    english: 80\n#    math: 90\n  score: &#123;english:80,math:90&#125;\n  salarys:\n    - 9999.98\n    - 9999.99\n  pet:\n    name: 阿狗\n    weight: 99.99\n  allPets:\n    sick:\n      - &#123;name: 阿狗,weight: 99.99&#125;\n      - name: 阿猫\n        weight: 88.88\n      - name: 阿虫\n        weight: 77.77\n    health:\n      - &#123;name: 阿花,weight: 199.99&#125;\n      - &#123;name: 阿明,weight: 199.99&#125;\n  user-name: &#39;zhangsan \\n 李四&#39;\n\n\n\n\n#spring:\n#  banner:\n#    image:\n#      bitdepth: 4\n#  cache:\n#    type: redis\n#    redis:\n#      time-to-live: 11000\n</code></pre>\n\n\n\n<h1 id=\"2、配置提示\"><a href=\"#2、配置提示\" class=\"headerlink\" title=\"2、配置提示\"></a>2、配置提示</h1><p>自定义的类和配置文件绑定一般没有提示。user-name: ‘zhangsan \\n 李四’</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!--https:&#x2F;&#x2F;docs.spring.io&#x2F;spring-boot&#x2F;docs&#x2F;2.3.12.RELEASE&#x2F;reference&#x2F;html&#x2F;appendix-configuration-metadata.html#configuration-metadata-annotation-processor--&gt;\n\n\t&lt;dependency&gt;\n           &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n           &lt;artifactId&gt;spring-boot-configuration-processor&lt;&#x2F;artifactId&gt;\n           &lt;optional&gt;true&lt;&#x2F;optional&gt;\n       &lt;&#x2F;dependency&gt;\n\n\n&lt;build&gt;\n       &lt;plugins&gt;\n           &lt;plugin&gt;\n               &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n               &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;\n               &lt;configuration&gt;\n                   &lt;excludes&gt;\n                       &lt;exclude&gt;\n                           &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n                           &lt;artifactId&gt;spring-boot-configuration-processor&lt;&#x2F;artifactId&gt;\n                       &lt;&#x2F;exclude&gt;\n                   &lt;&#x2F;excludes&gt;\n               &lt;&#x2F;configuration&gt;\n           &lt;&#x2F;plugin&gt;\n       &lt;&#x2F;plugins&gt;\n   &lt;&#x2F;build&gt;</code></pre>\n\n<p>build-exclude：打包时不打包这些无用提示类</p>\n<h1 id=\"05、Web开发\"><a href=\"#05、Web开发\" class=\"headerlink\" title=\"05、Web开发\"></a>05、Web开发</h1><p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1354552/1608701608750-77d03c43-c254-4132-acdf-843958446b27.png\" alt=\"img\"></p>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/2.3.12.RELEASE/reference/html/spring-boot-features.html#boot-features-spring-mvc-auto-configuration\">https://docs.spring.io/spring-boot/docs/2.3.12.RELEASE/reference/html/spring-boot-features.html#boot-features-spring-mvc-auto-configuration</a></p>\n<h1 id=\"1、SpringMVC自动配置概览\"><a href=\"#1、SpringMVC自动配置概览\" class=\"headerlink\" title=\"1、SpringMVC自动配置概览\"></a>1、SpringMVC自动配置概览</h1><p>Spring Boot provides auto-configuration for Spring MVC that <strong>works well with most applications.(大多场景我们都无需自定义配置)</strong></p>\n<p>The auto-configuration adds the following features on top of Spring’s defaults:</p>\n<ul>\n<li><p>Inclusion of <code>ContentNegotiatingViewResolver</code> and <code>BeanNameViewResolver</code> beans.</p>\n</li>\n<li><ul>\n<li>内容协商视图解析器和BeanName视图解析器</li>\n</ul>\n</li>\n<li><p>Support for serving static resources, including support for WebJars (covered <a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-static-content\">later in this document</a>)).</p>\n</li>\n<li><ul>\n<li>静态资源（包括webjars）</li>\n</ul>\n</li>\n<li><p>Automatic registration of <code>Converter</code>, <code>GenericConverter</code>, and <code>Formatter</code> beans.</p>\n</li>\n<li><ul>\n<li>自动注册 <code>Converter，GenericConverter，Formatter </code></li>\n</ul>\n</li>\n<li><p>Support for <code>HttpMessageConverters</code> (covered <a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-message-converters\">later in this document</a>).</p>\n</li>\n<li><ul>\n<li>支持 <code>HttpMessageConverters</code> （后来我们配合内容协商理解原理）</li>\n</ul>\n</li>\n<li><p>Automatic registration of <code>MessageCodesResolver</code> (covered <a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-message-codes\">later in this document</a>).</p>\n</li>\n<li><ul>\n<li>自动注册 <code>MessageCodesResolver</code> （国际化用）</li>\n</ul>\n</li>\n<li><p>Static <code>index.html</code> support.</p>\n</li>\n<li><ul>\n<li>静态index.html 页支持</li>\n</ul>\n</li>\n<li><p>Custom <code>Favicon</code> support (covered <a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-favicon\">later in this document</a>).</p>\n</li>\n<li><ul>\n<li>自定义 <code>Favicon</code></li>\n</ul>\n</li>\n<li><p>Automatic use of a <code>ConfigurableWebBindingInitializer</code> bean (covered <a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-web-binding-initializer\">later in this document</a>).</p>\n</li>\n<li><ul>\n<li>自动使用 <code>ConfigurableWebBindingInitializer</code> ，（DataBinder负责将请求数据绑定到JavaBean上）</li>\n</ul>\n</li>\n</ul>\n<p>If you want to keep those Spring Boot MVC customizations and make more <a href=\"https://docs.spring.io/spring/docs/5.2.9.RELEASE/spring-framework-reference/web.html#mvc\">MVC customizations</a> (interceptors, formatters, view controllers, and other features), you can add your own <code>@Configuration</code> class of type <code>WebMvcConfigurer</code> but <strong>without</strong> <code>@EnableWebMvc</code>.</p>\n<p><strong>不用@EnableWebMvc注解。使用</strong> <code>**@Configuration**</code> <strong>+</strong> <code>**WebMvcConfigurer**</code> <strong>自定义规则</strong></p>\n<p>If you want to provide custom instances of <code>RequestMappingHandlerMapping</code>, <code>RequestMappingHandlerAdapter</code>, or <code>ExceptionHandlerExceptionResolver</code>, and still keep the Spring Boot MVC customizations, you can declare a bean of type <code>WebMvcRegistrations</code> and use it to provide custom instances of those components.</p>\n<p><strong>声明</strong> <code>**WebMvcRegistrations**</code> <strong>改变默认底层组件</strong></p>\n<p>If you want to take complete control of Spring MVC, you can add your own <code>@Configuration</code> annotated with <code>@EnableWebMvc</code>, or alternatively add your own <code>@Configuration</code>-annotated <code>DelegatingWebMvcConfiguration</code> as described in the Javadoc of <code>@EnableWebMvc</code>.</p>\n<p><strong>使用</strong> <code>**@EnableWebMvc+@Configuration+DelegatingWebMvcConfiguration 全面接管SpringMVC**</code></p>\n<p>boot-05-web-01项目</p>\n<h1 id=\"2、简单功能分析\"><a href=\"#2、简单功能分析\" class=\"headerlink\" title=\"2、简单功能分析\"></a>2、简单功能分析</h1><h2 id=\"2-1、静态资源访问\"><a href=\"#2-1、静态资源访问\" class=\"headerlink\" title=\"2.1、静态资源访问\"></a>2.1、静态资源访问</h2><h3 id=\"1、静态资源目录\"><a href=\"#1、静态资源目录\" class=\"headerlink\" title=\"1、静态资源目录\"></a>1、静态资源目录</h3><p>只要静态资源放在类路径下： called <code>/static</code> (or <code>/public</code> or <code>/resources</code> or <code>/META-INF/resources</code></p>\n<p>访问 ： 当前项目根路径&#x2F; + 静态资源名 </p>\n<p>原理： 静态映射&#x2F;**。</p>\n<p>请求进来，先去找Controller看能不能处理。【不能处理的所有请求又都交给静态资源处理器。静态资源也找不到则响应404页面】</p>\n<p>&#x3D;&#x3D;改变【默认】的静态资源【路径】static-locations–&gt;放资源的地方！访问不用+ta！&#x3D;&#x3D;</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">spring:\n  mvc:\n    static-path-pattern: &#x2F;res&#x2F;**\n\n  resources:\n    static-locations: [classpath:&#x2F;haha&#x2F;]</code></pre>\n\n<p>点源码</p>\n<p>方便【拦截器拦截&#x2F;放行指定目录】下的资源或页面进行处理！！！</p>\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211015094909522.png\" alt=\"image-20211015094909522\"></p>\n<h3 id=\"2、静态【资源访问前缀】\"><a href=\"#2、静态【资源访问前缀】\" class=\"headerlink\" title=\"2、静态【资源访问前缀】\"></a>2、静态【资源访问前缀】</h3><p>默认无前缀</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">spring:\n  mvc:\n    static-path-pattern: &#x2F;res&#x2F;**</code></pre>\n\n<p>当前项目 + static-path-pattern + 静态资源名 &#x3D; 静态资源文件夹下找</p>\n<p>&#x3D;&#x3D;访问+前缀 static-path-pattern&#x3D;&#x3D;: <a href=\"http://localhost:8081/res/zhifubao.png\">http://localhost:8081/res/zhifubao.png</a></p>\n<h3 id=\"3、webjars\"><a href=\"#3、webjars\" class=\"headerlink\" title=\"3、webjars\"></a>3、webjars</h3><p>自动映射 &#x2F;<a href=\"http://localhost:8080/webjars/jquery/3.5.1/jquery.js\">webjars</a>&#x2F;**</p>\n<p><a href=\"https://www.webjars.org/\">https://www.webjars.org/</a></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependency&gt;\n    &lt;groupId&gt;org.webjars&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;jquery&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;3.5.1&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<p>访问地址：<a href=\"http://localhost:8080/webjars/jquery/3.5.1/jquery.js\">http://localhost:8080/webjars/<strong>jquery&#x2F;3.5.1&#x2F;jquery.js</strong></a>   后面地址要按照依赖里面的包路径</p>\n<h2 id=\"2-2、欢迎页支持\"><a href=\"#2-2、欢迎页支持\" class=\"headerlink\" title=\"2.2、欢迎页支持\"></a>2.2、欢迎页支持</h2><ul>\n<li><p>静态资源路径下  index.html</p>\n</li>\n<li><ul>\n<li>可以配置静态资源路径</li>\n<li>但是&#x3D;&#x3D;不可以配置静态资源的访问前缀。否则导致 index.html不能被【默认 (不写)】访问&#x3D;&#x3D;</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">spring:\n#  mvc:\n#    static-path-pattern: &#x2F;res&#x2F;**   这个会导致welcome page功能失效\n\n  resources:\n    static-locations: [classpath:&#x2F;haha&#x2F;]</code></pre>\n\n<ul>\n<li>controller能处理&#x2F;index</li>\n</ul>\n<h2 id=\"2-3、自定义-Favicon\"><a href=\"#2-3、自定义-Favicon\" class=\"headerlink\" title=\"2.3、自定义 Favicon\"></a>2.3、自定义 <code>Favicon</code></h2><p>【F12-network-favicon.ico requestURL-图片另存为】</p>\n<p>favicon.ico放在静态资源目录下即可。【不要+访问前缀】 </p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">spring:\n#  mvc:\n#    static-path-pattern: &#x2F;res&#x2F;**   这个会导致 Favicon 功能失效</code></pre>\n\n\n\n<p>&#x3D;&#x3D;以后都默认放到static，而+访问前缀（方便拦截放行）&#x3D;&#x3D;</p>\n<p>浏览器不关，就是同一会话session，&#x3D;&#x3D;favicon在session期间共享&#x3D;&#x3D;【换浏览器打开】</p>\n<h2 id=\"2-4、静态资源配置原理\"><a href=\"#2-4、静态资源配置原理\" class=\"headerlink\" title=\"2.4、静态资源配置原理\"></a>2.4、静态资源配置原理</h2><ul>\n<li>SpringBoot启动默认加载  xxxAutoConfiguration 类（自动配置类）</li>\n<li>SpringMVC功能的自动配置类(boot.autoconfigure.web.servlet) WebMvcAutoConfiguration，生效</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Configuration(proxyBeanMethods &#x3D; false)\n@ConditionalOnWebApplication(type &#x3D; Type.SERVLET)\n@ConditionalOnClass(&#123; Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class &#125;)\n@ConditionalOnMissingBean(WebMvcConfigurationSupport.class) &#x2F;&#x2F;!!!全面接管！！！\n@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)\n@AutoConfigureAfter(&#123; DispatcherServletAutoConfiguration.class, TaskExecutionAutoConfiguration.class,\n\t\tValidationAutoConfiguration.class &#125;)\npublic class WebMvcAutoConfiguration &#123;&#125;</code></pre>\n\n<ul>\n<li><p>给容器中配了什么。</p>\n</li>\n<li><p>springmvc用来兼容rest风格：表单提交put delete请求</p>\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211015110851860.png\" alt=\"image-20211015110851860\"></p>\n</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Configuration(proxyBeanMethods &#x3D; false)\n@Import(EnableWebMvcConfiguration.class)\n@EnableConfigurationProperties(&#123; WebMvcProperties.class, ResourceProperties.class &#125;)\n@Order(0)\npublic static class WebMvcAutoConfigurationAdapter implements WebMvcConfigurer &#123;&#125;</code></pre>\n\n<ul>\n<li>配置文件的相关属性和xxx配置前缀进行了绑定。WebMvcProperties–&gt;<strong>spring.mvc</strong>、ResourceProperties–&gt;<strong>spring.resources</strong></li>\n</ul>\n<p>【注意！拓展：】</p>\n<h4 id=\"1、配置类只有一个有参构造器：所有参数的值都会从容器中确定\"><a href=\"#1、配置类只有一个有参构造器：所有参数的值都会从容器中确定\" class=\"headerlink\" title=\"1、配置类只有一个有参构造器：所有参数的值都会从容器中确定\"></a>1、配置类只有一个有参构造器：所有参数的值都会从容器中确定</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\t&#x2F;&#x2F;有参构造器所有参数的值都会从容器中确定\n&#x2F;&#x2F;ResourceProperties resourceProperties；获取和spring.resources绑定的所有的值的对象\n&#x2F;&#x2F;WebMvcProperties mvcProperties 获取和spring.mvc绑定的所有的值的对象\n&#x2F;&#x2F;ListableBeanFactory beanFactory Spring的beanFactory\n&#x2F;&#x2F;HttpMessageConverters 找到所有的HttpMessageConverters\n&#x2F;&#x2F;ResourceHandlerRegistrationCustomizer 找到 资源处理器的自定义器。&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n&#x2F;&#x2F;DispatcherServletPath  \n&#x2F;&#x2F;ServletRegistrationBean   给应用注册Servlet、Filter....\n\tpublic WebMvcAutoConfigurationAdapter(ResourceProperties resourceProperties, WebMvcProperties mvcProperties,\n\t\t\t\tListableBeanFactory beanFactory, ObjectProvider&lt;HttpMessageConverters&gt; messageConvertersProvider,\n\t\t\t\tObjectProvider&lt;ResourceHandlerRegistrationCustomizer&gt; resourceHandlerRegistrationCustomizerProvider,\n\t\t\t\tObjectProvider&lt;DispatcherServletPath&gt; dispatcherServletPath,\n\t\t\t\tObjectProvider&lt;ServletRegistrationBean&lt;?&gt;&gt; servletRegistrations) &#123;\n\t\t\tthis.resourceProperties &#x3D; resourceProperties;\n\t\t\tthis.mvcProperties &#x3D; mvcProperties;\n\t\t\tthis.beanFactory &#x3D; beanFactory;\n\t\t\tthis.messageConvertersProvider &#x3D; messageConvertersProvider;\n\t\t\tthis.resourceHandlerRegistrationCustomizer &#x3D; resourceHandlerRegistrationCustomizerProvider.getIfAvailable();\n\t\t\tthis.dispatcherServletPath &#x3D; dispatcherServletPath;\n\t\t\tthis.servletRegistrations &#x3D; servletRegistrations;\n\t\t&#125;</code></pre>\n\n\n\n\n\n<h4 id=\"2、资源处理的默认规则\"><a href=\"#2、资源处理的默认规则\" class=\"headerlink\" title=\"2、资源处理的默认规则\"></a>2、资源处理的默认规则</h4><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">spring:\n#  mvc:\n#    static-path-pattern: &#x2F;res&#x2F;**        #默认&#x2F;**\n\n  resources:\n    add-mappings: false   禁用所有静态资源(的路径映射)规则</code></pre>\n\n\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Override\n\t\tpublic void addResourceHandlers(ResourceHandlerRegistry registry) &#123;\n\t\t\tif (!this.resourceProperties.isAddMappings()) &#123;\n\t\t\t\tlogger.debug(&quot;Default resource handling disabled&quot;);\n\t\t\t\treturn;\n\t\t\t&#125;\n\t\t\tDuration cachePeriod &#x3D; this.resourceProperties.getCache().getPeriod();\n\t\t\tCacheControl cacheControl &#x3D; this.resourceProperties.getCache().getCachecontrol().toHttpCacheControl();\n\t\t\t&#x2F;&#x2F;webjars的规则\n            if (!registry.hasMappingForPattern(&quot;&#x2F;webjars&#x2F;**&quot;)) &#123;\n                &#x2F;&#x2F;访问前缀 存放目录 缓存时间\n                customizeResourceHandlerRegistration(registry.addResourceHandler(&quot;&#x2F;webjars&#x2F;**&quot;)\n\t\t\t\t\t\t.addResourceLocations(&quot;classpath:&#x2F;META-INF&#x2F;resources&#x2F;webjars&#x2F;&quot;)\n\t\t\t\t\t\t.setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));\n\t\t\t&#125;\n            \n            &#x2F;&#x2F;静态资源路径的配置规则\n\t\t\tString staticPathPattern &#x3D; this.mvcProperties.getStaticPathPattern();\n\t\t\tif (!registry.hasMappingForPattern(staticPathPattern)) &#123;\n\t\t\t\tcustomizeResourceHandlerRegistration(registry.addResourceHandler(staticPathPattern)\n\t\t\t\t\t\t.addResourceLocations(getResourceLocations(this.resourceProperties.getStaticLocations()))\n\t\t\t\t\t\t.setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));\n\t\t\t&#125;\n\t\t&#125;</code></pre>\n\n<p>getStaticLocations-&gt;</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@ConfigurationProperties(prefix &#x3D; &quot;spring.resources&quot;, ignoreUnknownFields &#x3D; false)\npublic class ResourceProperties &#123;\n\n\tprivate static final String[] CLASSPATH_RESOURCE_LOCATIONS &#x3D; &#123; &quot;classpath:&#x2F;META-INF&#x2F;resources&#x2F;&quot;,\n\t\t\t&quot;classpath:&#x2F;resources&#x2F;&quot;, &quot;classpath:&#x2F;static&#x2F;&quot;, &quot;classpath:&#x2F;public&#x2F;&quot; &#125;;\n\n\t&#x2F;**\n\t * Locations of static resources. Defaults to classpath:[&#x2F;META-INF&#x2F;resources&#x2F;,\n\t * &#x2F;resources&#x2F;, &#x2F;static&#x2F;, &#x2F;public&#x2F;].\n\t *&#x2F;\n\tprivate String[] staticLocations &#x3D; CLASSPATH_RESOURCE_LOCATIONS;</code></pre>\n\n\n\n<h4 id=\"3、欢迎页的处理规则\"><a href=\"#3、欢迎页的处理规则\" class=\"headerlink\" title=\"3、欢迎页的处理规则\"></a>3、欢迎页的处理规则</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\tHandlerMapping：处理器映射。保存了每一个Handler能处理哪些请求。\t\n\n\t\t@Bean\n\t\tpublic WelcomePageHandlerMapping welcomePageHandlerMapping(ApplicationContext applicationContext,\n\t\t\t\tFormattingConversionService mvcConversionService, ResourceUrlProvider mvcResourceUrlProvider) &#123;\n\t\t\tWelcomePageHandlerMapping welcomePageHandlerMapping &#x3D; new WelcomePageHandlerMapping(\n\t\t\t\t\tnew TemplateAvailabilityProviders(applicationContext), applicationContext, getWelcomePage(),\n\t\t\t\t\tthis.mvcProperties.getStaticPathPattern());\n\t\t\twelcomePageHandlerMapping.setInterceptors(getInterceptors(mvcConversionService, mvcResourceUrlProvider));\n\t\t\twelcomePageHandlerMapping.setCorsConfigurations(getCorsConfigurations());\n\t\t\treturn welcomePageHandlerMapping;\n\t\t&#125;\n\n进入new ：\n\tWelcomePageHandlerMapping(TemplateAvailabilityProviders templateAvailabilityProviders,\n\t\t\tApplicationContext applicationContext, Optional&lt;Resource&gt; welcomePage, String staticPathPattern) &#123;\n\t\tif (welcomePage.isPresent() &amp;&amp; &quot;&#x2F;**&quot;.equals(staticPathPattern)) &#123;\n            &#x2F;&#x2F;要用欢迎页功能，必须是&#x2F;**\n\t\t\tlogger.info(&quot;Adding welcome page: &quot; + welcomePage.get());\n\t\t\tsetRootViewName(&quot;forward:index.html&quot;);\n\t\t&#125;\n\t\telse if (welcomeTemplateExists(templateAvailabilityProviders, applicationContext)) &#123;\n            &#x2F;&#x2F; 调用Controller  &#x2F;index\n\t\t\tlogger.info(&quot;Adding welcome page template: index&quot;);\n\t\t\tsetRootViewName(&quot;index&quot;);\n\t\t&#125;\n\t&#125;</code></pre>\n\n<h4 id=\"4、favicon\"><a href=\"#4、favicon\" class=\"headerlink\" title=\"4、favicon\"></a>4、favicon</h4><h1 id=\"3、请求参数处理【-x3D-x3D-！重要！-x3D-x3D-】\"><a href=\"#3、请求参数处理【-x3D-x3D-！重要！-x3D-x3D-】\" class=\"headerlink\" title=\"3、请求参数处理【&#x3D;&#x3D;！重要！&#x3D;&#x3D;】\"></a>3、请求参数处理【&#x3D;&#x3D;！重要！&#x3D;&#x3D;】</h1><h2 id=\"0、请求映射-RequestMapping\"><a href=\"#0、请求映射-RequestMapping\" class=\"headerlink\" title=\"0、请求映射  @RequestMapping\"></a>0、请求映射  @RequestMapping</h2><h3 id=\"1、rest使用与原理\"><a href=\"#1、rest使用与原理\" class=\"headerlink\" title=\"1、rest使用与原理\"></a>1、rest使用与原理</h3><ul>\n<li><p>@xxxMapping；</p>\n</li>\n<li><p>Rest风格支持（<em>使用<strong>HTTP</strong>请求方式动词来表示对资源的操作</em>）</p>\n</li>\n<li><ul>\n<li><em>以前：</em><em>&#x2F;getUser</em>  <em>获取用户</em>    <em>&#x2F;deleteUser</em> <em>删除用户</em>   <em>&#x2F;editUser</em>  <em>修改用户</em>      <em>&#x2F;saveUser</em> <em>保存用户</em></li>\n<li><em>现在： &#x2F;user</em>    *GET-*<em>获取用户</em>    *DELETE-*<em>删除用户</em>     *PUT-*<em>修改用户</em>      *POST-*<em>保存用户</em></li>\n</ul>\n</li>\n<li><ul>\n<li>核心Filter；HiddenHttpMethodFilter</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li><p>用法： 表单method&#x3D;post，隐藏域 _method&#x3D;put</p>\n</li>\n<li><p>&#96;&#96;&#96;html</p>\n<form action=\"/user\" method=\"post\">\n    <input name=\"_m\" type=\"hidden\" value=\"delete\"/>\n    <input value=\"REST-DELETE 提交\" type=\"submit\"/>\n</form>\n<form action=\"/user\" method=\"post\">\n    <input name=\"_method\" type=\"hidden\" value=\"PUT\"/>\n    <input value=\"REST-PUT 提交\" type=\"submit\"/>\n</form>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">\n- SpringBoot中手动开启 +配置\n\n- &#96;&#96;&#96;yaml\n  spring:\n    mvc:\n      hiddenmethod:\n        filter:\n          enabled: true</code></pre></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li>扩展：如何把_method 这个名字换成我们自己喜欢的。</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F;    @RequestMapping(value &#x3D; &quot;&#x2F;user&quot;,method &#x3D; RequestMethod.GET)\n    @GetMapping(&quot;&#x2F;user&quot;)\n    public String getUser()&#123;\n\n        return &quot;GET-张三&quot;;\n    &#125;\n\n&#x2F;&#x2F;    @RequestMapping(value &#x3D; &quot;&#x2F;user&quot;,method &#x3D; RequestMethod.POST)\n    @PostMapping(&quot;&#x2F;user&quot;)\n    public String saveUser()&#123;\n        return &quot;POST-张三&quot;;\n    &#125;\n\n\n&#x2F;&#x2F;    @RequestMapping(value &#x3D; &quot;&#x2F;user&quot;,method &#x3D; RequestMethod.PUT)\n    @PutMapping(&quot;&#x2F;user&quot;)\n    public String putUser()&#123;\n\n        return &quot;PUT-张三&quot;;\n    &#125;\n\n\n&#x2F;&#x2F;    @RequestMapping(value &#x3D; &quot;&#x2F;user&quot;,method &#x3D; RequestMethod.DELETE)\n    @DeleteMapping(&quot;&#x2F;user&quot;)\n    public String deleteUser()&#123;\n        return &quot;DELETE-张三&quot;;\n    &#125;\n\n\n\n\t@Bean\n\t@ConditionalOnMissingBean(HiddenHttpMethodFilter.class)&#x2F;&#x2F;没有Hidden再new OrderedHidden: 默认“_method”\n\t@ConditionalOnProperty(prefix &#x3D; &quot;spring.mvc.hiddenmethod.filter&quot;, name &#x3D; &quot;enabled&quot;, matchIfMissing &#x3D; false) &#x2F;&#x2F;默认false +配置！！！\n\tpublic OrderedHiddenHttpMethodFilter hiddenHttpMethodFilter() &#123;\n\t\treturn new OrderedHiddenHttpMethodFilter();\n\t&#125;\n\n\n\n    &#x2F;&#x2F;扩展点：如何把 _method 这个名字换成我们自己喜欢的\n&#x2F;&#x2F;自定义filter\n    @Bean\n    public HiddenHttpMethodFilter hiddenHttpMethodFilter()&#123;\n        HiddenHttpMethodFilter methodFilter &#x3D; new HiddenHttpMethodFilter();\n        methodFilter.setMethodParam(&quot;_m&quot;);\n        return methodFilter;\n    &#125;</code></pre>\n\n<p>没有Hidden再new OrderedHidden: 默认“_method”</p>\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211015155648148.png\" alt=\"image-20211015155648148\"></p>\n<p>那就config类自定义HiddenFilter：</p>\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211015160056129.png\" alt=\"image-20211015160056129\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">boot.config:\n    \n@Configuration(proxyBeanMethods &#x3D; false)\npublic class WebConfig &#x2F;*implements WebMvcConfigurer*&#x2F; &#123;\n\n    @Bean\n    public HiddenHttpMethodFilter hiddenHttpMethodFilter()&#123;\n        HiddenHttpMethodFilter methodFilter &#x3D; new HiddenHttpMethodFilter();\n        methodFilter.setMethodParam(&quot;_m&quot;);&#x2F;&#x2F;\n        return methodFilter;\n    &#125;\n    \n    \n_m起作用：DELETE   \n&lt;form action&#x3D;&quot;&#x2F;user&quot; method&#x3D;&quot;post&quot;&gt;\n    &lt;input name&#x3D;&quot;_m&quot; type&#x3D;&quot;hidden&quot; value&#x3D;&quot;delete&quot;&#x2F;&gt;\n    &lt;input value&#x3D;&quot;REST-DELETE 提交&quot; type&#x3D;&quot;submit&quot;&#x2F;&gt;\n&lt;&#x2F;form&gt;\n    \n_method不起作用：还是POST\n&lt;form action&#x3D;&quot;&#x2F;user&quot; method&#x3D;&quot;post&quot;&gt;\n    &lt;input name&#x3D;&quot;_method&quot; type&#x3D;&quot;hidden&quot; value&#x3D;&quot;PUT&quot;&#x2F;&gt;\n    &lt;input value&#x3D;&quot;REST-PUT 提交&quot; type&#x3D;&quot;submit&quot;&#x2F;&gt;\n&lt;&#x2F;form&gt;</code></pre>\n\n\n\n\n\n<p>Rest原理（表单提交要使用REST的时候）(&#x3D;&#x3D;表单提交只有GET POST两种&#x3D;&#x3D;，所以要包装到POST。)</p>\n<ul>\n<li><p>表单提交会带上**_method&#x3D;PUT**</p>\n</li>\n<li><p><strong>请求过来被</strong>HiddenHttpMethodFilter拦截</p>\n</li>\n<li><ul>\n<li>请求是否正常，并且是POST</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>获取到**_method**的值。</li>\n<li>兼容以下请求；(Allowed methods)   <strong>PUT</strong>.<strong>DELETE</strong>.<strong>PATCH</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li><strong>原生HttpServletRequest（post），&#x3D;&#x3D;包装模式&#x3D;&#x3D;requestWrapper重写了getMethod方法，返回的是传入的值。</strong></li>\n<li><strong>过滤器链放行的时候用wrapper。以后的方法调用getMethod是调用requestWrapper的。</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211015154109311.png\" alt=\"image-20211015154109311\"></p>\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211015154519265.png\" alt=\"image-20211015154519265\"></p>\n<p><strong>Rest使用客户端工具，</strong></p>\n<ul>\n<li>如PostMan直接发送Put、delete等方式请求，无需Filter。</li>\n</ul>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">spring:\n  mvc:\n    hiddenmethod:\n      filter:\n        enabled: true   #开启页面表单的Rest功能 （选择性开启）</code></pre>\n\n\n\n<h3 id=\"2、请求映射原理\"><a href=\"#2、请求映射原理\" class=\"headerlink\" title=\"2、请求映射原理\"></a>2、请求映射原理</h3><p>ctrl+H继承树</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1354552/1603181171918-b8acfb93-4914-4208-9943-b37610e93864.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_27,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<p>ctrl+F12打开3个父类整个结构</p>\n<p>SpringMVC功能分析都从 org.springframework.web.servlet.DispatcherServlet-》doDispatch（）开始</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">protected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception &#123;\n\t\tHttpServletRequest processedRequest &#x3D; request;\n\t\tHandlerExecutionChain mappedHandler &#x3D; null;\n\t\tboolean multipartRequestParsed &#x3D; false;\n\n\t\tWebAsyncManager asyncManager &#x3D; WebAsyncUtils.getAsyncManager(request);\n\n\t\ttry &#123;\n\t\t\tModelAndView mv &#x3D; null;\n\t\t\tException dispatchException &#x3D; null;\n\n\t\t\ttry &#123;\n\t\t\t\tprocessedRequest &#x3D; checkMultipart(request);\n\t\t\t\tmultipartRequestParsed &#x3D; (processedRequest !&#x3D; request);\n\n\t\t\t\t&#x2F;&#x2F; 找到当前请求使用哪个Handler（Controller的方法）处理\n\t\t\t\tmappedHandler &#x3D; getHandler(processedRequest);\n                \n                &#x2F;&#x2F;HandlerMapping：处理器映射。&#x2F;xxx-&gt;&gt;xxxx</code></pre>\n\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1354552/1603181460034-ba25f3c0-9cfd-4432-8949-3d1dd88d8b12.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_14,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211015162535596.png\" alt=\"image-20211015162535596\"></p>\n<p><strong>RequestMappingHandlerMapping</strong>：保存了所有@RequestMapping 和handler的映射规则。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1354552/1603181662070-9e526de8-fd78-4a02-9410-728f059d6aef.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_48,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<p>所有的请求映射都在HandlerMapping中。</p>\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211015163545107.png\" alt=\"image-20211015163201646\"></p>\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211015163425755.png\" alt=\"image-20211015163425755\"></p>\n<p>4–&gt;1GET</p>\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211015163845291.png\" alt=\"image-20211015163845291\"></p>\n<p>&#x2F;user 多GET，比对都行：二义性报错</p>\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211015163948249.png\" alt=\"image-20211015163948249\"></p>\n<ul>\n<li><p>SpringBoot自动配置欢迎页的 WelcomePageHandlerMapping 。访问&#x2F; 能访问到index.html；</p>\n</li>\n<li><p>SpringBoot自动配置了默认 的 RequestMappingHandlerMapping【WebMvcAutoConfiguration中搜】</p>\n</li>\n<li><p>请求进来，挨个尝试所有的HandlerMapping看是否有请求信息。</p>\n</li>\n<li><ul>\n<li>如果有就找到这个请求对应的handler</li>\n<li>如果没有就是下一个 HandlerMapping</li>\n</ul>\n</li>\n<li><p>我们需要一些自定义的映射处理，我们也可以自己给容器中放<strong>HandlerMapping</strong>【定义请求谁来处理】。</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">protected HandlerExecutionChain getHandler(HttpServletRequest request) throws Exception &#123;\n\tif (this.handlerMappings !&#x3D; null) &#123;\n\t\tfor (HandlerMapping mapping : this.handlerMappings) &#123;&#x2F;&#x2F;\n\t\t\tHandlerExecutionChain handler &#x3D; mapping.getHandler(request);&#x2F;&#x2F;\n\t\t\tif (handler !&#x3D; null) &#123;\n\t\t\t\treturn handler;\n\t\t\t&#125;\n\t\t&#125;\n\t&#125;\n\treturn null;\n&#125;</code></pre>\n\n<h2 id=\"！！！待填坑ing-自定义-HandlerMapping\"><a href=\"#！！！待填坑ing-自定义-HandlerMapping\" class=\"headerlink\" title=\"！！！待填坑ing~~[自定义 HandlerMapping]\"></a>！！！待填坑ing~~[自定义 <strong>HandlerMapping</strong>]</h2><p>自定义 <strong>HandlerMapping</strong>场景举例：</p>\n<p>&#x2F;api&#x2F;v1&#x2F;user—&gt;xxx包处理</p>\n<p>&#x2F;api&#x2F;v2&#x2F;user—&gt;xxx包处理</p>\n<h2 id=\"1、普通参数与基本注解【-x3D-x3D-！重要！-x3D-x3D-】\"><a href=\"#1、普通参数与基本注解【-x3D-x3D-！重要！-x3D-x3D-】\" class=\"headerlink\" title=\"1、普通参数与基本注解【&#x3D;&#x3D;！重要！&#x3D;&#x3D;】\"></a>1、普通参数与基本注解【&#x3D;&#x3D;！重要！&#x3D;&#x3D;】</h2><h3 id=\"1-1、注解：\"><a href=\"#1-1、注解：\" class=\"headerlink\" title=\"1.1、注解：\"></a>1.1、注解：</h3><p>&#x3D;&#x3D;@PathVariable、@RequestHeader、@ModelAttribute、@RequestParam、@MatrixVariable、@CookieValue、@RequestBody&#x3D;&#x3D;</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RestController\npublic class ParameterTestController &#123;\n\n\n    &#x2F;&#x2F;  car&#x2F;2&#x2F;owner&#x2F;zhangsan\n    @GetMapping(&quot;&#x2F;car&#x2F;&#123;id&#125;&#x2F;owner&#x2F;&#123;username&#125;&quot;)\n    public Map&lt;String,Object&gt; getCar(@PathVariable(&quot;id&quot;) Integer id,\n                                     @PathVariable(&quot;username&quot;) String name,\n                                     @PathVariable Map&lt;String,String&gt; pv,\n                                     @RequestHeader(&quot;User-Agent&quot;) String userAgent,\n                                     @RequestHeader Map&lt;String,String&gt; header,\n                                     @RequestParam(&quot;age&quot;) Integer age,\n                                     @RequestParam(&quot;inters&quot;) List&lt;String&gt; inters,\n                                     @RequestParam Map&lt;String,String&gt; params,\n                                     @CookieValue(&quot;_ga&quot;) String _ga,\n                                     @CookieValue(&quot;_ga&quot;) Cookie cookie)&#123;\n\n\n        Map&lt;String,Object&gt; map &#x3D; new HashMap&lt;&gt;();\n\n&#x2F;&#x2F;        map.put(&quot;id&quot;,id);\n&#x2F;&#x2F;        map.put(&quot;name&quot;,name);\n&#x2F;&#x2F;        map.put(&quot;pv&quot;,pv);\n&#x2F;&#x2F;        map.put(&quot;userAgent&quot;,userAgent);\n&#x2F;&#x2F;        map.put(&quot;headers&quot;,header);\n        map.put(&quot;age&quot;,age);\n        map.put(&quot;inters&quot;,inters);\n        map.put(&quot;params&quot;,params);\n        map.put(&quot;_ga&quot;,_ga);\n        System.out.println(cookie.getName()+&quot;&#x3D;&#x3D;&#x3D;&gt;&quot;+cookie.getValue());\n        return map;\n    &#125;\n\n\n    @PostMapping(&quot;&#x2F;save&quot;)\n    public Map postMethod(@RequestBody String content)&#123;\n        Map&lt;String,Object&gt; map &#x3D; new HashMap&lt;&gt;();\n        map.put(&quot;content&quot;,content);\n        return map;\n    &#125;\n\n\n    &#x2F;&#x2F;1、语法： 请求路径：&#x2F;cars&#x2F;sell;low&#x3D;34;brand&#x3D;byd,audi,yd\n    &#x2F;&#x2F;2、SpringBoot默认是禁用了矩阵变量的功能\n    &#x2F;&#x2F;      手动开启：原理。对于路径的处理。UrlPathHelper进行解析。\n    &#x2F;&#x2F;              removeSemicolonContent（移除分号内容）支持矩阵变量的\n    &#x2F;&#x2F;3、矩阵变量同名必须有url路径变量才能被解析：pathVar！！！\n    @GetMapping(&quot;&#x2F;cars&#x2F;&#123;path&#125;&quot;)\n    public Map carsSell(@MatrixVariable(&quot;low&quot;) Integer low,\n                        @MatrixVariable(&quot;brand&quot;) List&lt;String&gt; brand,\n                        @PathVariable(&quot;path&quot;) String path)&#123;\n        Map&lt;String,Object&gt; map &#x3D; new HashMap&lt;&gt;();\n\n        map.put(&quot;low&quot;,low);\n        map.put(&quot;brand&quot;,brand);\n        map.put(&quot;path&quot;,path);\n        return map;\n    &#125;\n\n    &#x2F;&#x2F; &#x2F;boss&#x2F;1;age&#x3D;20&#x2F;2;age&#x3D;10\n\n    @GetMapping(&quot;&#x2F;boss&#x2F;&#123;bossId&#125;&#x2F;&#123;empId&#125;&quot;)\n    public Map boss(@MatrixVariable(value &#x3D; &quot;age&quot;,pathVar &#x3D; &quot;bossId&quot;) Integer bossAge,\n                    @MatrixVariable(value &#x3D; &quot;age&quot;,pathVar &#x3D; &quot;empId&quot;) Integer empAge)&#123;\n        Map&lt;String,Object&gt; map &#x3D; new HashMap&lt;&gt;();\n\n        map.put(&quot;bossAge&quot;,bossAge);\n        map.put(&quot;empAge&quot;,empAge);\n        return map;\n\n    &#125;\n\n&#125;</code></pre>\n\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211015170840785.png\" alt=\"image-20211015170840785\"></p>\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211015173548887.png\" alt=\"image-20211015173548887\"></p>\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211015173604861.png\" alt=\"image-20211015173604861\"></p>\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211015193244504.png\" alt=\"image-20211015193244504\"></p>\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211015194429557.png\" alt=\"image-20211015194429557\"></p>\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211015193312452.png\" alt=\"image-20211015193312452\"></p>\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211015193501122.png\" alt=\"image-20211015193501122\"></p>\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211015193529615.png\" alt=\"image-20211015193529615\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">WebConfig：\n要么implements WebMvcConfigurer 接口，重写configurePathMatch方法\n要么 直接@Bean一个WebMvcConfigurer组件\n</code></pre>\n\n\n\n\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RequestAttribute（获取request域属性：页面转发时获取请求数据）\n不进行页面功能开发，不返回JSON数据\nRequestController 默认方法返回只做页面跳转：\n\n@Controller\npublic class RequestController &#123;\n\n    @GetMapping(&quot;&#x2F;goto&quot;)\n    public String goToPage(HttpServletRequest request)&#123;\n\n        request.setAttribute(&quot;msg&quot;,&quot;成功了...&quot;);\n        request.setAttribute(&quot;code&quot;,200);\n        return &quot;forward:&#x2F;success&quot;;  &#x2F;&#x2F;转发到  &#x2F;success请求 (或者跳转到页面，用EL表达式写出~)\n    &#125;\n\n\n    @GetMapping(&quot;&#x2F;params&quot;)\n    public String testParam(Map&lt;String,Object&gt; map,\n                            Model model,\n                            HttpServletRequest request,\n                            HttpServletResponse response)&#123;\n        map.put(&quot;hello&quot;,&quot;world666&quot;);\n        model.addAttribute(&quot;world&quot;,&quot;hello666&quot;);\n        request.setAttribute(&quot;message&quot;,&quot;HelloWorld&quot;);\n\n        Cookie cookie &#x3D; new Cookie(&quot;c1&quot;,&quot;v1&quot;);\n        response.addCookie(cookie);\n        return &quot;forward:&#x2F;success&quot;;\n    &#125;\n\n\n    &#x2F;&#x2F;没引入thymeleaf，无template页面，模拟下\n    @ResponseBody\n    @GetMapping(&quot;&#x2F;success&quot;)\n    public Map success(@RequestAttribute(value &#x3D; &quot;msg&quot;,required &#x3D; false) String msg,\n                       @RequestAttribute(value &#x3D; &quot;code&quot;,required &#x3D; false)Integer code,\n                       HttpServletRequest request)&#123;\n        Object msg1 &#x3D; request.getAttribute(&quot;msg&quot;);&#x2F;&#x2F;\n\n        Map&lt;String,Object&gt; map &#x3D; new HashMap&lt;&gt;();\n        Object hello &#x3D; request.getAttribute(&quot;hello&quot;);\n        Object world &#x3D; request.getAttribute(&quot;world&quot;);\n        Object message &#x3D; request.getAttribute(&quot;message&quot;);\n\n        map.put(&quot;reqMethod_msg&quot;,msg1);&#x2F;&#x2F;\n        map.put(&quot;annotation_msg&quot;,msg);\n        map.put(&quot;hello&quot;,hello);\n        map.put(&quot;world&quot;,world);\n        map.put(&quot;message&quot;,message);\n\n        return map;\n\n    &#125;\n&#125;</code></pre>\n\n\n\n\n\n<h3 id=\"1-2、Servlet-API：\"><a href=\"#1-2、Servlet-API：\" class=\"headerlink\" title=\"1.2、Servlet API：\"></a>1.2、Servlet API：</h3><p>&#x3D;&#x3D;WebRequest、ServletRequest、MultipartRequest、 HttpSession、javax.servlet.http.PushBuilder、Principal、InputStream、Reader、HttpMethod、Locale、TimeZone、ZoneId&#x3D;&#x3D;</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class RequestController &#123;\n\n\n    @GetMapping(&quot;&#x2F;goto&quot;)\n    public String goToPage(HttpServletRequest request)&#123;\n\n        request.setAttribute(&quot;msg&quot;,&quot;成功了...&quot;);\n        request.setAttribute(&quot;code&quot;,200);\n        return &quot;forward:&#x2F;success&quot;;  &#x2F;&#x2F;转发到  &#x2F;success请求 (或者跳转到页面，用EL表达式写出~)\n    &#125;\n    \n    debug:\n    @Value(SpringEL表达式动态获取值)\n        </code></pre>\n\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211016112135095.png\" alt=\"image-20211016112135095\"></p>\n<p>into</p>\n<p><strong>ServletRequestMethodArgumentResolver  可以解析以上的部分参数</strong></p>\n<p>HttpServletRequest</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Override\n\tpublic boolean supportsParameter(MethodParameter parameter) &#123;\n\t\tClass&lt;?&gt; paramType &#x3D; parameter.getParameterType();\n\t\treturn (WebRequest.class.isAssignableFrom(paramType) ||\n\t\t\t\tServletRequest.class.isAssignableFrom(paramType) ||\n\t\t\t\tMultipartRequest.class.isAssignableFrom(paramType) ||\n\t\t\t\tHttpSession.class.isAssignableFrom(paramType) ||\n\t\t\t\t(pushBuilder !&#x3D; null &amp;&amp; pushBuilder.isAssignableFrom(paramType)) ||\n\t\t\t\tPrincipal.class.isAssignableFrom(paramType) ||\n\t\t\t\tInputStream.class.isAssignableFrom(paramType) ||\n\t\t\t\tReader.class.isAssignableFrom(paramType) ||\n\t\t\t\tHttpMethod.class &#x3D;&#x3D; paramType ||\n\t\t\t\tLocale.class &#x3D;&#x3D; paramType ||\n\t\t\t\tTimeZone.class &#x3D;&#x3D; paramType ||\n\t\t\t\tZoneId.class &#x3D;&#x3D; paramType);\n\t&#125;</code></pre>\n\n<p>resolveArgument</p>\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211016112315605.png\" alt=\"image-20211016112315605\"></p>\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211016112449723.png\" alt=\"image-20211016112449723\"></p>\n<h3 id=\"1-3、复杂参数：\"><a href=\"#1-3、复杂参数：\" class=\"headerlink\" title=\"1.3、复杂参数：\"></a>1.3、复杂参数：</h3><p>&#x3D;&#x3D;<strong>Map</strong>、<strong>Model（map、model里面的数据会被放在request的请求域  &#x3D;&#x3D;request.setAttribute）、</strong>Errors&#x2F;BindingResult、<strong>RedirectAttributes（ 重定向携带数据   页面开始时用）</strong>、<strong>ServletResponse（response）</strong>、SessionStatus、UriComponentsBuilder、ServletUriComponentsBuilder&#x3D;&#x3D;</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">Map&lt;String,Object&gt; map,  Model model, HttpServletRequest request 都是可以给request域中放数据，\nrequest.getAttribute();\n\n\n@Controller\npublic class RequestController &#123;\n    @GetMapping(&quot;&#x2F;goto&quot;)\n    public String goToPage(HttpServletRequest request)&#123;\n\n        request.setAttribute(&quot;msg&quot;,&quot;成功了...&quot;);\n        request.setAttribute(&quot;code&quot;,200);\n        return &quot;forward:&#x2F;success&quot;;  &#x2F;&#x2F;转发到  &#x2F;success请求 (或者跳转到页面，用EL表达式写出~)\n    &#125;\n    \n    @GetMapping(&quot;&#x2F;params&quot;)\n    public String testParam(Map&lt;String,Object&gt; map,\n                            Model model,\n                            HttpServletRequest request,\n                            HttpServletResponse response)&#123;\n        map.put(&quot;hello&quot;,&quot;world666&quot;);\n        model.addAttribute(&quot;world&quot;,&quot;hello666&quot;);\n        request.setAttribute(&quot;message&quot;,&quot;HelloWorld&quot;);&#x2F;&#x2F;&#x3D;&#x3D;\n\n        Cookie cookie &#x3D; new Cookie(&quot;c1&quot;,&quot;v1&quot;);\n        cookie.setDomain(&quot;localhost&quot;);\n        response.addCookie(cookie);&#x2F;&#x2F;让浏览器加一个Cookie\n        return &quot;forward:&#x2F;success&quot;;\n    &#125;\n\n    &#x2F;&#x2F;没引入thymeleaf，无template页面，模拟下\n    @ResponseBody\n    @GetMapping(&quot;&#x2F;success&quot;)\n    public Map success(@RequestAttribute(value &#x3D; &quot;msg&quot;,required &#x3D; false) String msg,&#x2F;&#x2F;goToPage  required &#x3D; false\n                       @RequestAttribute(value &#x3D; &quot;code&quot;,required &#x3D; false)Integer code,\n                       HttpServletRequest request)&#123;\n        Object msg1 &#x3D; request.getAttribute(&quot;msg&quot;);&#x2F;&#x2F;\n\n        Map&lt;String,Object&gt; map &#x3D; new HashMap&lt;&gt;();\n        Object hello &#x3D; request.getAttribute(&quot;hello&quot;);&#x2F;&#x2F;testParam 中放入request域的3个属性\n        Object world &#x3D; request.getAttribute(&quot;world&quot;);\n        Object message &#x3D; request.getAttribute(&quot;message&quot;);\n\n        map.put(&quot;reqMethod_msg&quot;,msg1);&#x2F;&#x2F;\n        map.put(&quot;annotation_msg&quot;,msg);\n        map.put(&quot;hello&quot;,hello);\n        map.put(&quot;world&quot;,world);\n        map.put(&quot;message&quot;,message);\n\n        return map;\n\n    &#125;\n</code></pre>\n\n\n\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211016115136186.png\" alt=\"image-20211016115136186\"></p>\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211016114923227.png\" alt=\"image-20211016114923227\"></p>\n<p>ctrl+F12搜ModelAndViewContainer.getModel()</p>\n<p><strong>Map、Model类型的参数</strong>，会返回 mavContainer.getModel();—&gt; BindingAwareModelMap 是Model 也是Map</p>\n<p><strong>mavContainer</strong>.getModel(); 获取到值的</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1354552/1603271442869-63b4c3c7-c721-4074-987d-cbe5999273ae.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_28,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1354552/1603271678813-d8e1a1e5-94fa-412c-a7f1-6f27174fd127.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_20,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1354552/1603271813894-037be041-92a5-49af-a49c-c350b3dd587a.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_27,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<p>-&gt; 3 原理6</p>\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211016170941813.png\" alt=\"image-20211016170941813\"></p>\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211016170834161.png\" alt=\"image-20211016170834161\"></p>\n<h3 id=\"1-4、自定义对象参数：表单post–-gt-json对象\"><a href=\"#1-4、自定义对象参数：表单post–-gt-json对象\" class=\"headerlink\" title=\"1.4、自定义对象参数：表单post–&gt;json对象\"></a>1.4、自定义对象参数：表单post–&gt;json对象</h3><p>可以自动类型转换与格式化，可以级联封装。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * &lt;form action&#x3D;&quot;&#x2F;saveuser&quot; method&#x3D;&quot;post&quot;&gt;\n *     姓名： &lt;input name&#x3D;&quot;userName&quot;&#x2F;&gt; &lt;br&#x2F;&gt;\n *     年龄： &lt;input name&#x3D;&quot;age&quot;&#x2F;&gt; &lt;br&#x2F;&gt;\n *     生日： &lt;input name&#x3D;&quot;birth&quot;&#x2F;&gt; &lt;br&#x2F;&gt;\n *     宠物姓名：&lt;input name&#x3D;&quot;pet.name&quot;&#x2F;&gt;&lt;br&#x2F;&gt;\n *     宠物年龄：&lt;input name&#x3D;&quot;pet.age&quot;&#x2F;&gt;\n *     &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;保存&quot;&#x2F;&gt;\n * &lt;&#x2F;form&gt;\n *&#x2F;\n@Data\npublic class Person &#123;\n    \n    private String userName;\n    private Integer age;\n    private Date birth;\n    private Pet pet;\n    \n&#125;\n\n@Data\npublic class Pet &#123;\n\n    private String name;\n    private String age;\n\n&#125;\n\nresult\n    \n    \n测试封装POJO；\n&lt;form action&#x3D;&quot;&#x2F;saveuser&quot; method&#x3D;&quot;post&quot;&gt;\n    姓名： &lt;input name&#x3D;&quot;userName&quot; value&#x3D;&quot;zhangsan&quot;&#x2F;&gt; &lt;br&#x2F;&gt;\n    年龄： &lt;input name&#x3D;&quot;age&quot; value&#x3D;&quot;18&quot;&#x2F;&gt; &lt;br&#x2F;&gt;\n    生日： &lt;input name&#x3D;&quot;birth&quot; value&#x3D;&quot;2019&#x2F;12&#x2F;10&quot;&#x2F;&gt; &lt;br&#x2F;&gt;\n&lt;!--    宠物姓名：&lt;input name&#x3D;&quot;pet.name&quot; value&#x3D;&quot;阿猫&quot;&#x2F;&gt;&lt;br&#x2F;&gt;--&gt;\n&lt;!--    宠物年龄：&lt;input name&#x3D;&quot;pet.age&quot; value&#x3D;&quot;5&quot;&#x2F;&gt;--&gt;\n    宠物： &lt;input name&#x3D;&quot;pet&quot; value&#x3D;&quot;啊猫,3&quot;&#x2F;&gt;\n    &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;保存&quot;&#x2F;&gt;\n&lt;&#x2F;form&gt;\n    \n@RestController\npublic class ParameterTestController &#123;\n\n    &#x2F;**\n     * 数据绑定：页面提交的请求数据（GET、POST）都可以和对象属性进行绑定\n     * @param person\n     * @return\n     *&#x2F;\n    @PostMapping(&quot;&#x2F;saveuser&quot;)\n    public Person saveuser(Person person)&#123;\n\n        return person;\n    &#125;</code></pre>\n\n\n\n<h2 id=\"2、POJO封装过程\"><a href=\"#2、POJO封装过程\" class=\"headerlink\" title=\"2、POJO封装过程\"></a>2、POJO封装过程</h2><ul>\n<li>run保存 debug带参数&#x2F;saveuser ： support-最后一个<strong>ServletModelAttributeMethodProcessor</strong></li>\n<li>原理见5.3</li>\n</ul>\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211018101948160.png\" alt=\"image-20211018101948160\"></p>\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211018102028737.png\" alt=\"image-20211018102028737\"></p>\n<h2 id=\"3、参数处理【原理】\"><a href=\"#3、参数处理【原理】\" class=\"headerlink\" title=\"3、参数处理【原理】\"></a>3、参数处理【原理】</h2><p>DispatcherServlet-doDispatch:</p>\n<ul>\n<li><p>HandlerMapping中找到能处理请求的Handler（Controller.method()）</p>\n</li>\n<li><p>为当前Handler 找一个适配器 HandlerAdapter； <strong>RequestMappingHandlerAdapter</strong></p>\n</li>\n<li><p><img src=\"http://cache.itzy8.top/springboot2/image-20211015201428354.png\" alt=\"image-20211015201428354\"></p>\n</li>\n<li><p><img src=\"http://cache.itzy8.top/springboot2/image-20211015201308869.png\" alt=\"image-20211015201308869\"></p>\n</li>\n<li><p>适配器执行目标方法并确定方法参数的每一个值</p>\n</li>\n</ul>\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211015200810637.png\" alt=\"image-20211015200810637\"></p>\n<h3 id=\"1、HandlerAdapter\"><a href=\"#1、HandlerAdapter\" class=\"headerlink\" title=\"1、HandlerAdapter\"></a>1、HandlerAdapter</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1354552/1603262942726-107353bd-f8b7-44f6-93cf-2a3cad4093cf.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_18,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<p>0 - 支持方法上标注@RequestMapping </p>\n<p>1 - 支持函数式编程的</p>\n<p>xxxxxx</p>\n<h3 id=\"2、执行目标方法\"><a href=\"#2、执行目标方法\" class=\"headerlink\" title=\"2、执行目标方法\"></a>2、执行目标方法</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F; Actually invoke the handler.\n&#x2F;&#x2F;DispatcherServlet -- doDispatch:\nmv &#x3D; ha.handle(processedRequest, response, mappedHandler.getHandler());\n【step into-&gt;*4到RequestMappingHandlerAdapter里的handleInternal  往下】\nmav &#x3D; invokeHandlerMethod(request, response, handlerMethod); &#x2F;&#x2F;执行目标方法\ninto\n真正执行！\n\n&#x2F;&#x2F;ServletInvocableHandlerMethod\nObject returnValue &#x3D; invokeForRequest(webRequest, mavContainer, providedArgs);\n&#x2F;&#x2F;获取方法的参数值\nObject[] args &#x3D; getMethodArgumentValues(request, mavContainer, providedArgs);</code></pre>\n\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211015202519711.png\" alt=\"image-20211015202519711\"></p>\n<p>封装好后，真正开始执行：</p>\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211015203017940.png\" alt=\"image-20211015203017940\"></p>\n<p>into</p>\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211015204231566.png\" alt=\"image-20211015204231566\"></p>\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211015204300073.png\" alt=\"image-20211015204300073\"></p>\n<p>into</p>\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211015204652814.png\" alt=\"image-20211015204652814\"></p>\n<p>into doInvoke：反射工具类 调用目标方法</p>\n<p>to 5、getMethodArgumentValues        into…</p>\n<h3 id=\"3、参数解析器-HandlerMethodArgumentResolver\"><a href=\"#3、参数解析器-HandlerMethodArgumentResolver\" class=\"headerlink\" title=\"3、参数解析器-HandlerMethodArgumentResolver\"></a>3、参数解析器-HandlerMethodArgumentResolver</h3><p>确定将要执行的目标方法的每一个参数的值是什么;</p>\n<p>SpringMVC目标方法能写多少种参数类型。取决于参数解析器。</p>\n<p>Hierarchy:</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1354552/1603263283504-85bbd4d5-a9af-4dbf-b6a2-30b409868774.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_20,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1354552/1603263394724-33122714-9d06-42ec-bf45-e440e8b49c05.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_23,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<ul>\n<li>当前解析器【是否支持解析这种】参数</li>\n<li>支持就调用 resolveArgument进行解析</li>\n</ul>\n<h3 id=\"4、返回值处理器\"><a href=\"#4、返回值处理器\" class=\"headerlink\" title=\"4、返回值处理器\"></a>4、返回值处理器</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1354552/1603263524227-386da4be-43b1-4b17-a2cc-8cf886346af9.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_22,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<p>调试：</p>\n<p><a href=\"http://localhost:8081/car/2/owner/zhangsan\">http://localhost:8081/car/2/owner/zhangsan</a> </p>\n<h3 id=\"5、如何确定目标方法每一个参数的值\"><a href=\"#5、如何确定目标方法每一个参数的值\" class=\"headerlink\" title=\"5、如何确定目标方法每一个参数的值\"></a>5、如何确定目标方法每一个参数的值</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;InvocableHandlerMethod&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\nprotected Object[] getMethodArgumentValues(NativeWebRequest request, @Nullable ModelAndViewContainer mavContainer,\n\t\t\tObject... providedArgs) throws Exception &#123;\n\n\t\tMethodParameter[] parameters &#x3D; getMethodParameters();&#x2F;&#x2F;\n\t\tif (ObjectUtils.isEmpty(parameters)) &#123;\n\t\t\treturn EMPTY_ARGS;\n\t\t&#125;\n\n\t\tObject[] args &#x3D; new Object[parameters.length];\n\t\tfor (int i &#x3D; 0; i &lt; parameters.length; i++) &#123;\n\t\t\tMethodParameter parameter &#x3D; parameters[i];\n\t\t\tparameter.initParameterNameDiscovery(this.parameterNameDiscoverer);\n\t\t\targs[i] &#x3D; findProvidedArgument(parameter, providedArgs);\n\t\t\tif (args[i] !&#x3D; null) &#123;\n\t\t\t\tcontinue;\n\t\t\t&#125;\n\t\t\tif (!this.resolvers.supportsParameter(parameter)) &#123;&#x2F;&#x2F;\n\t\t\t\tthrow new IllegalStateException(formatArgumentError(parameter, &quot;No suitable resolver&quot;));\n\t\t\t&#125;\n\t\t\ttry &#123;\n\t\t\t\targs[i] &#x3D; this.resolvers.resolveArgument(parameter, mavContainer, request, this.dataBinderFactory);&#x2F;&#x2F;\n\t\t\t&#125;\n\t\t\tcatch (Exception ex) &#123;\n\t\t\t\t&#x2F;&#x2F; Leave stack trace for later, exception may actually be resolved and handled...\n\t\t\t\tif (logger.isDebugEnabled()) &#123;\n\t\t\t\t\tString exMsg &#x3D; ex.getMessage();\n\t\t\t\t\tif (exMsg !&#x3D; null &amp;&amp; !exMsg.contains(parameter.getExecutable().toGenericString())) &#123;\n\t\t\t\t\t\tlogger.debug(formatArgumentError(parameter, exMsg));\n\t\t\t\t\t&#125;\n\t\t\t\t&#125;\n\t\t\t\tthrow ex;\n\t\t\t&#125;\n\t\t&#125;\n\t\treturn args;\n\t&#125;</code></pre>\n\n<p>getMethodParameters();</p>\n<p>this.resolvers.supportsParameter(parameter):  into…</p>\n<h4 id=\"5-1、挨个判断所有参数解析器那个支持解析这个参数\"><a href=\"#5-1、挨个判断所有参数解析器那个支持解析这个参数\" class=\"headerlink\" title=\"5.1、挨个判断所有参数解析器那个支持解析这个参数\"></a>5.1、挨个判断所有参数解析器那个支持解析这个参数</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Nullable\nprivate HandlerMethodArgumentResolver getArgumentResolver(MethodParameter parameter) &#123;\n\tHandlerMethodArgumentResolver result &#x3D; this.argumentResolverCache.get(parameter);&#x2F;&#x2F;\n\tif (result &#x3D;&#x3D; null) &#123;\n\t\tfor (HandlerMethodArgumentResolver resolver : this.argumentResolvers) &#123;\n\t\t\tif (resolver.supportsParameter(parameter)) &#123;&#x2F;&#x2F;\n\t\t\t\tresult &#x3D; resolver;\n\t\t\t\tthis.argumentResolverCache.put(parameter, result);&#x2F;&#x2F;缓存组件，越来越快！\n\t\t\t\tbreak;\n\t\t\t&#125;\n\t\t&#125;\n\t&#125;\n\treturn result;\n&#125;</code></pre>\n\n\n\n<p>supportsParameter             into:<img src=\"http://cache.itzy8.top/springboot2/image-20211015205855423.png\" alt=\"image-20211015205855423\"></p>\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211015210042961.png\" alt=\"image-20211015210042961\"></p>\n<h4 id=\"5-2、解析这个参数的值\"><a href=\"#5-2、解析这个参数的值\" class=\"headerlink\" title=\"5.2、解析这个参数的值\"></a>5.2、解析这个参数的值</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">调用各自 HandlerMethodArgumentResolver 的 resolveArgument 方法即可</code></pre>\n\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211015210926578.png\" alt=\"image-20211015210926578\"></p>\n<p>urlPathHelper解析路径变量保存到request域中</p>\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211015211641183.png\" alt=\"image-20211015211641183\"></p>\n<p>RequestHeader：</p>\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211015212357516.png\" alt=\"image-20211015212357516\"></p>\n<h4 id=\"5-3、自定义类型参数-封装POJO\"><a href=\"#5-3、自定义类型参数-封装POJO\" class=\"headerlink\" title=\"5.3、自定义类型参数 封装POJO\"></a>5.3、自定义类型参数 封装POJO</h4><p><strong>ServletModelAttributeMethodProcessor  这个参数处理器支持</strong></p>\n<p> <strong>是否为简单类型。</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static boolean isSimpleValueType(Class&lt;?&gt; type) &#123;\n\t\treturn (Void.class !&#x3D; type &amp;&amp; void.class !&#x3D; type &amp;&amp;\n\t\t\t\t(ClassUtils.isPrimitiveOrWrapper(type) ||\n\t\t\t\tEnum.class.isAssignableFrom(type) ||\n\t\t\t\tCharSequence.class.isAssignableFrom(type) ||\n\t\t\t\tNumber.class.isAssignableFrom(type) ||\n\t\t\t\tDate.class.isAssignableFrom(type) ||\n\t\t\t\tTemporal.class.isAssignableFrom(type) ||\n\t\t\t\tURI.class &#x3D;&#x3D; type ||\n\t\t\t\tURL.class &#x3D;&#x3D; type ||\n\t\t\t\tLocale.class &#x3D;&#x3D; type ||\n\t\t\t\tClass.class &#x3D;&#x3D; type));\n\t&#125;\n\n\n\n@Override\n\t@Nullable\n\tpublic final Object resolveArgument(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer,\n\t\t\tNativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory) throws Exception &#123;\n\n\t\tAssert.state(mavContainer !&#x3D; null, &quot;ModelAttributeMethodProcessor requires ModelAndViewContainer&quot;);\n\t\tAssert.state(binderFactory !&#x3D; null, &quot;ModelAttributeMethodProcessor requires WebDataBinderFactory&quot;);\n\n\t\tString name &#x3D; ModelFactory.getNameForParameter(parameter);\n\t\tModelAttribute ann &#x3D; parameter.getParameterAnnotation(ModelAttribute.class);\n\t\tif (ann !&#x3D; null) &#123;\n\t\t\tmavContainer.setBinding(name, ann.binding());\n\t\t&#125;\n\n\t\tObject attribute &#x3D; null;\n\t\tBindingResult bindingResult &#x3D; null;\n\n\t\tif (mavContainer.containsAttribute(name)) &#123;\n\t\t\tattribute &#x3D; mavContainer.getModel().get(name);\n\t\t&#125;\n\t\telse &#123;\n\t\t\t&#x2F;&#x2F; Create attribute instance\n\t\t\ttry &#123;\n\t\t\t\tattribute &#x3D; createAttribute(name, parameter, binderFactory, webRequest);\n\t\t\t&#125;\n\t\t\tcatch (BindException ex) &#123;\n\t\t\t\tif (isBindExceptionRequired(parameter)) &#123;\n\t\t\t\t\t&#x2F;&#x2F; No BindingResult parameter -&gt; fail with BindException\n\t\t\t\t\tthrow ex;\n\t\t\t\t&#125;\n\t\t\t\t&#x2F;&#x2F; Otherwise, expose null&#x2F;empty value and associated BindingResult\n\t\t\t\tif (parameter.getParameterType() &#x3D;&#x3D; Optional.class) &#123;\n\t\t\t\t\tattribute &#x3D; Optional.empty();\n\t\t\t\t&#125;\n\t\t\t\tbindingResult &#x3D; ex.getBindingResult();\n\t\t\t&#125;\n\t\t&#125;\n\n\t\tif (bindingResult &#x3D;&#x3D; null) &#123;\n\t\t\t&#x2F;&#x2F; Bean property binding and validation;\n\t\t\t&#x2F;&#x2F; skipped in case of binding failure on construction.\n\t\t\tWebDataBinder binder &#x3D; binderFactory.createBinder(webRequest, attribute, name);&#x2F;&#x2F;!!!!!!!!!!!!!!!\n\t\t\tif (binder.getTarget() !&#x3D; null) &#123;\n\t\t\t\tif (!mavContainer.isBindingDisabled(name)) &#123;\n\t\t\t\t\tbindRequestParameters(binder, webRequest);\n\t\t\t\t&#125;\n\t\t\t\tvalidateIfApplicable(binder, parameter);\n\t\t\t\tif (binder.getBindingResult().hasErrors() &amp;&amp; isBindExceptionRequired(binder, parameter)) &#123;\n\t\t\t\t\tthrow new BindException(binder.getBindingResult());\n\t\t\t\t&#125;\n\t\t\t&#125;\n\t\t\t&#x2F;&#x2F; Value type adaptation, also covering java.util.Optional\n\t\t\tif (!parameter.getParameterType().isInstance(attribute)) &#123;\n\t\t\t\tattribute &#x3D; binder.convertIfNecessary(binder.getTarget(), parameter.getParameterType(), parameter);\n\t\t\t&#125;\n\t\t\tbindingResult &#x3D; binder.getBindingResult();\n\t\t&#125;\n\n\t\t&#x2F;&#x2F; Add resolved attribute and BindingResult at the end of the model\n\t\tMap&lt;String, Object&gt; bindingResultModel &#x3D; bindingResult.getModel();\n\t\tmavContainer.removeAttributes(bindingResultModel);\n\t\tmavContainer.addAllAttributes(bindingResultModel);\n\n\t\treturn attribute;\n\t&#125;</code></pre>\n\n<p>将请求数据封装入Person对象里</p>\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211018102446784.png\" alt=\"image-20211018102446784\"></p>\n<p><strong>WebDataBinder binder &#x3D; binderFactory.createBinder(webRequest, attribute, name);</strong></p>\n<p><strong>WebDataBinder :web数据绑定器，将请求参数的值绑定到指定的JavaBean里面</strong></p>\n<p><strong>WebDataBinder 利用它里面的 Converters 将请求数据转成指定的数据类型。再次(反射)封装到JavaBean中：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">bindRequestParameters(binder, webRequest);</code></pre>\n\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211018102851866.png\" alt=\"image-20211018102851866\"></p>\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211018102941258.png\" alt=\"image-20211018102941258\"></p>\n<p><strong>GenericConversionService.find：在设置每一个值的时候，找它里面的所有converter哪个可以将这个数据类型（request带来参数的字符串）转换到指定的类型（JavaBean – Integer）</strong></p>\n<p><strong>文件上传： byte流 – &gt; file</strong> </p>\n<p>见1、SpringMVC自动配置概览：</p>\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211018125008276.png\" alt=\"image-20211018125008276\"></p>\n<p>@FunctionalInterface<strong>public interface</strong> Converter&lt;S, T&gt;</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1354552/1603337871521-25fc1aa1-133a-4ce0-a146-d565633d7658.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_39,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1354552/1603338486441-9bbd22a9-813f-49bd-b51b-e66c7f4b8598.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_44,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<p>未来我们可以给WebDataBinder里面放自己的Converter；</p>\n<p><strong>private static final class</strong> StringToNumber&lt;T **extends** Number&gt; <strong>implements</strong> Converter&lt;String, T&gt;</p>\n<h4 id=\"自定义-Converter！！！！！\"><a href=\"#自定义-Converter！！！！！\" class=\"headerlink\" title=\"自定义 Converter！！！！！\"></a>自定义 Converter！！！！！</h4><p><img src=\"http://cache.itzy8.top/springboot2/image-20211018125517187.png\" alt=\"image-20211018125517187\"></p>\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211018125615851.png\" alt=\"image-20211018125615851\"></p>\n<p>货币、时间等</p>\n<p>类型转换器 格式化</p>\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211018125816840.png\" alt=\"image-20211018125816840\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F;1、WebMvcConfigurer定制化SpringMVC的功能\n@Bean\npublic WebMvcConfigurer webMvcConfigurer()&#123;\n    return new WebMvcConfigurer() &#123;\n        @Override\n        public void configurePathMatch(PathMatchConfigurer configurer) &#123;\n            UrlPathHelper urlPathHelper &#x3D; new UrlPathHelper();\n            &#x2F;&#x2F; 不移除；后面的内容。矩阵变量功能就可以生效\n            urlPathHelper.setRemoveSemicolonContent(false);\n            configurer.setUrlPathHelper(urlPathHelper);\n        &#125;\n\n        @Override\n        public void addFormatters(FormatterRegistry registry) &#123;\n            registry.addConverter(new Converter&lt;String, Pet&gt;() &#123;\n\n                @Override\n                public Pet convert(String source) &#123;\n                    &#x2F;&#x2F; 啊猫,3\n                    if(!StringUtils.isEmpty(source))&#123;\n                        Pet pet &#x3D; new Pet();\n                        String[] split &#x3D; source.split(&quot;,&quot;);\n                        pet.setName(split[0]);\n                        pet.setAge(Integer.parseInt(split[1]));\n                        return pet;\n                    &#125;\n                    return null;\n                &#125;\n            &#125;);\n        &#125;\n    &#125;;\n&#125;</code></pre>\n\n\n\n<p><a href=\"http://localhost:8081/params\">http://localhost:8081/params</a> debug：</p>\n<h3 id=\"6、目标方法执行完成\"><a href=\"#6、目标方法执行完成\" class=\"headerlink\" title=\"6、目标方法执行完成\"></a>6、目标方法执行完成</h3><p>将所有的数据都放在 <strong>ModelAndViewContainer</strong>；包含【要去的页面地址View。还包含Model数据。】</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1354552/1603272018605-1bce3142-bdd9-4834-a028-c753e91c52ac.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_16,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<p>跳出到</p>\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211016171735640.png\" alt=\"image-20211016171735640\"></p>\n<h3 id=\"7、处理派发结果\"><a href=\"#7、处理派发结果\" class=\"headerlink\" title=\"7、处理派发结果\"></a>7、处理派发结果</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">return &quot;forward:&#x2F;success&quot;;</code></pre>\n\n<p>一路into</p>\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211016192320085.png\" alt=\"image-20211016192320085\"></p>\n<p>into into F8</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">getModelAndView里：\nmodelFactory.updateModel(webRequest, mavContainer);\n\n</code></pre>\n\n<p>DisPatcherServlet里：</p>\n<p>ha.handle()</p>\n<p>applyPostHandle() 拦截器…</p>\n<p><strong>processDispatchResult</strong>(processedRequest, response, mappedHandler, mv, dispatchException);</p>\n<p>renderMergedOutputModel(mergedModel, getRequestToExpose(request), response);</p>\n<p>into*2:   exposeModelAsRequestAttributes！！！！！！！！！！！！！</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">InternalResourceView：\n@Override\n\tprotected void renderMergedOutputModel(\n\t\t\tMap&lt;String, Object&gt; model, HttpServletRequest request, HttpServletResponse response) throws Exception &#123;\n\n\t\t&#x2F;&#x2F; Expose the model object as request attributes.\n\t\texposeModelAsRequestAttributes(model, request);\n\n\t\t&#x2F;&#x2F; Expose helpers as request attributes, if any.\n\t\texposeHelpers(request);\n\n\t\t&#x2F;&#x2F; Determine the path for the request dispatcher.\n\t\tString dispatcherPath &#x3D; prepareForRendering(request, response);\n\n\t\t&#x2F;&#x2F; Obtain a RequestDispatcher for the target resource (typically a JSP).\n\t\tRequestDispatcher rd &#x3D; getRequestDispatcher(request, dispatcherPath);\n\t\tif (rd &#x3D;&#x3D; null) &#123;\n\t\t\tthrow new ServletException(&quot;Could not get RequestDispatcher for [&quot; + getUrl() +\n\t\t\t\t\t&quot;]: Check that the corresponding file exists within your web application archive!&quot;);\n\t\t&#125;\n\n\t\t&#x2F;&#x2F; If already included or response already committed, perform include, else forward.\n\t\tif (useInclude(request, response)) &#123;\n\t\t\tresponse.setContentType(getContentType());\n\t\t\tif (logger.isDebugEnabled()) &#123;\n\t\t\t\tlogger.debug(&quot;Including [&quot; + getUrl() + &quot;]&quot;);\n\t\t\t&#125;\n\t\t\trd.include(request, response);\n\t\t&#125;\n\n\t\telse &#123;\n\t\t\t&#x2F;&#x2F; Note: The forwarded resource is supposed to determine the content type itself.\n\t\t\tif (logger.isDebugEnabled()) &#123;\n\t\t\t\tlogger.debug(&quot;Forwarding to [&quot; + getUrl() + &quot;]&quot;);\n\t\t\t&#125;\n\t\t\trd.forward(request, response);\n\t\t&#125;\n\t&#125;</code></pre>\n\n\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">暴露模型作为请求域属性\n&#x2F;&#x2F; Expose the model object as request attributes.\n\t\texposeModelAsRequestAttributes(model, request);</code></pre>\n\n<p>model.forEach：request.setAttribute！！！！！！！！！！</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">protected void exposeModelAsRequestAttributes(Map&lt;String, Object&gt; model,\n\t\t\tHttpServletRequest request) throws Exception &#123;\n\n    &#x2F;&#x2F;model中的所有数据遍历挨个放在请求域中\n\t\tmodel.forEach((name, value) -&gt; &#123;\n\t\t\tif (value !&#x3D; null) &#123;\n\t\t\t\trequest.setAttribute(name, value);\n\t\t\t&#125;\n\t\t\telse &#123;\n\t\t\t\trequest.removeAttribute(name);\n\t\t\t&#125;\n\t\t&#125;);\n\t&#125;</code></pre>\n\n<p>map、model–&gt;request域 在渲染视图view.render时放，即SpringMVC决定要跳转到哪个页面了，跳转之前request.setAttribute的。</p>\n<h1 id=\"4、数据响应与内容协商\"><a href=\"#4、数据响应与内容协商\" class=\"headerlink\" title=\"4、数据响应与内容协商\"></a>4、数据响应与内容协商</h1><p>响应page:单体   响应data:前后端分离</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1354552/1606043749073-2573e24a-9ea9-459e-ad94-a433e1082624.png\" alt=\"img\"></p>\n<h2 id=\"1、响应JSON\"><a href=\"#1、响应JSON\" class=\"headerlink\" title=\"1、响应JSON\"></a>1、响应JSON</h2><h3 id=\"1-1、jackson-jar-ResponseBody\"><a href=\"#1-1、jackson-jar-ResponseBody\" class=\"headerlink\" title=\"1.1、jackson.jar+@ResponseBody\"></a>1.1、jackson.jar+@ResponseBody</h3><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;\n        &lt;&#x2F;dependency&gt;\n\nweb场景自动引入了json场景\n    &lt;dependency&gt;\n      &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n      &lt;artifactId&gt;spring-boot-starter-json&lt;&#x2F;artifactId&gt;\n      &lt;version&gt;2.3.4.RELEASE&lt;&#x2F;version&gt;\n      &lt;scope&gt;compile&lt;&#x2F;scope&gt;\n    &lt;&#x2F;dependency&gt;</code></pre>\n\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1354552/1605151090728-f7c60e6f-d0c0-4541-bfa3-8cc805dfd5d6.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_21,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<p>给前端自动返回json数据；</p>\n<h4 id=\"1、返回值解析器\"><a href=\"#1、返回值解析器\" class=\"headerlink\" title=\"1、返回值解析器\"></a>1、返回值解析器</h4><p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1354552/1605151359370-01cd1fbe-628a-4eea-9430-d79a78f59125.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_25,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<p>&#x3D;&#x3D;invokeForRequest、F8断点调试：&#x2F;test&#x2F;person&#x3D;&#x3D;</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">try &#123;\n\t\t\tthis.returnValueHandlers.handleReturnValue(\n\t\t\t\t\treturnValue, getReturnValueType(returnValue), mavContainer, webRequest);\n\t\t&#125;\n\n\n\n\t@Override\n\tpublic void handleReturnValue(@Nullable Object returnValue, MethodParameter returnType,\n\t\t\tModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception &#123;\n\n\t\tHandlerMethodReturnValueHandler handler &#x3D; selectHandler(returnValue, returnType);&#x2F;&#x2F;\n\t\tif (handler &#x3D;&#x3D; null) &#123;\n\t\t\tthrow new IllegalArgumentException(&quot;Unknown return value type: &quot; + returnType.getParameterType().getName());\n\t\t&#125;\n\t\thandler.handleReturnValue(returnValue, returnType, mavContainer, webRequest);&#x2F;&#x2F;\n\t&#125;\n\n\n\nRequestResponseBodyMethodProcessor!!!!\n@Override\n\tpublic void handleReturnValue(@Nullable Object returnValue, MethodParameter returnType,\n\t\t\tModelAndViewContainer mavContainer, NativeWebRequest webRequest)\n\t\t\tthrows IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException &#123;\n\n\t\tmavContainer.setRequestHandled(true);\n\t\tServletServerHttpRequest inputMessage &#x3D; createInputMessage(webRequest);\n\t\tServletServerHttpResponse outputMessage &#x3D; createOutputMessage(webRequest);\n\n\t\t&#x2F;&#x2F; Try even with null return value. ResponseBodyAdvice could get involved.\n        &#x2F;&#x2F; 使用消息转换器进行写出操作\n\t\twriteWithMessageConverters(returnValue, returnType, inputMessage, outputMessage);\n\t&#125;</code></pre>\n\n\n\n<h4 id=\"2、返回值解析器原理\"><a href=\"#2、返回值解析器原理\" class=\"headerlink\" title=\"2、返回值解析器原理\"></a>2、返回值解析器原理</h4><p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1354552/1605151728659-68c8ce8a-1b2b-4ab0-b86d-c3a875184672.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_23,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<p>&#x3D;&#x3D;invokeForRequest、F8断点调试：&#x2F;test&#x2F;person&#x3D;&#x3D;</p>\n<ul>\n<li><p>1、返回值处理器判断是否支持这种类型返回值 supportsReturnType</p>\n</li>\n<li><p>2、返回值处理器调用 handleReturnValue 进行处理</p>\n</li>\n<li><p>3、RequestResponseBodyMethodProcessor 可以处理返回值标了@ResponseBody 注解的。</p>\n</li>\n<li><ul>\n<li>\\1.  利用 <strong>MessageConverters</strong> 进行处理 将数据写为json</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>1、【MediaType】内容协商（<strong>浏览器</strong>默认会以请求头的方式告诉服务器他<strong>能接受</strong>什么样的内容类型）</li>\n<li>q&#x3D;权重！&#x3D;&#x3D;xml_q&#x3D;0.9     &gt;     *&#x2F;*&#x3D;json_q&#x3D;0.8，所以浏览器默认优先响应xml数据！！！！！！！！！！&#x3D;&#x3D;</li>\n</ul>\n</li>\n<li><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1354552/1605163005521-a20d1d8e-0494-43d0-8135-308e7a22e896.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_32,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"><ul>\n<li>2、<strong>服务器</strong>最终根据自己自身的能力，决定服务器<strong>能生产</strong>出什么样内容类型的数据，</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>3、SpringMVC会挨个遍历所有容器底层的 HttpMessageConverter ，看谁能处理？</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li><ul>\n<li>1、得到MappingJackson2HttpMessageConverter可以将对象写为json</li>\n<li>2、利用MappingJackson2HttpMessageConverter将对象转为json再写出去。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Controller\npublic class ResponseTestController &#123;\n\n\n    @ResponseBody &#x2F;&#x2F;--RequestResponseBodyMethodProcessor ---&gt; messageConverter\n    @GetMapping(&quot;&#x2F;he11&quot;)\n    public FileSystemResource file()&#123;&#x2F;&#x2F;implement Resource~\n\n\n        &#x2F;&#x2F;作业：文件以这样的方式返回看是谁处理的（messageConverter）。?？\n        return null;\n    &#125;\n\n\n    &#x2F;**\n     * 1、浏览器发请求直接返回 xml    [application&#x2F;xml]        jacksonXmlConverter\n     * 2、如果是ajax(JS)请求 返回 json   [application&#x2F;json]      jacksonJsonConverter\n     * 3、如果硅谷app发请求，返回自定义协议数据  [appliaction&#x2F;x-guigu]   xxxxConverter\n     *          属性值1;属性值2;\n     *\n     * 步骤：\n     * 1、添加自定义的MessageConverter进系统底层\n     * 2、系统底层就会统计出所有MessageConverter能操作哪些类型\n     * 3、客户端内容协商 [guigu---&gt;guigu]\n     *\n     * 作业：如何以参数的方式进行内容协商?？\n     * @return\n     *&#x2F;\n    @ResponseBody  &#x2F;&#x2F;利用返回值处理器里面的消息转换器进行处理\n    @GetMapping(value &#x3D; &quot;&#x2F;test&#x2F;person&quot;)\n    public Person getPerson()&#123;\n        Person person &#x3D; new Person();\n        person.setAge(28);\n        person.setBirth(new Date());\n        person.setUserName(&quot;zhangsan&quot;);\n        return person;\n    &#125;\n\n&#125;</code></pre>\n\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211018152848799.png\" alt=\"image-20211018152848799\"></p>\n<h3 id=\"1-2、SpringMVC到底支持哪些返回值\"><a href=\"#1-2、SpringMVC到底支持哪些返回值\" class=\"headerlink\" title=\"1.2、SpringMVC到底支持哪些返回值\"></a>1.2、SpringMVC到底支持哪些返回值</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">ModelAndView\nModel\nView\nResponseEntity \nResponseBodyEmitter\nStreamingResponseBody\nHttpEntity\nHttpHeaders\nCallable     异步的\nDeferredResult\nListenableFuture\nCompletionStage   MVC包装了的async\nWebAsyncTask\n有 @ModelAttribute 且为对象类型的:!simpleType\n@ResponseBody 注解 ---&gt; RequestResponseBodyMethodProcessor；&#x2F;&#x2F;!!!</code></pre>\n\n<h3 id=\"1-3、HTTPMessageConverter原理\"><a href=\"#1-3、HTTPMessageConverter原理\" class=\"headerlink\" title=\"1.3、HTTPMessageConverter原理\"></a>1.3、HTTPMessageConverter原理</h3><h4 id=\"1、MessageConverter规范\"><a href=\"#1、MessageConverter规范\" class=\"headerlink\" title=\"1、MessageConverter规范\"></a>1、MessageConverter规范</h4><p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1354552/1605163447900-e2748217-0f31-4abb-9cce-546b4d790d0b.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_19,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<p>HttpMessageConverter: 看是否支持将 此 Class类型的对象，转为MediaType类型的数据。</p>\n<p>例子：Person对象转W为JSON response。或者 JSON转R为Person req</p>\n<h4 id=\"2、默认的MessageConverter\"><a href=\"#2、默认的MessageConverter\" class=\"headerlink\" title=\"2、默认的MessageConverter\"></a>2、默认的MessageConverter</h4><p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1354552/1605163584708-e19770d6-6b35-4caa-bf21-266b73cb1ef1.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_17,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<p>0 - 只支持Byte类型的ret</p>\n<p>1 - String</p>\n<p>2 - String</p>\n<p><strong>3 - Resource</strong></p>\n<p>4 - ResourceRegion</p>\n<p>5 - DOMSource.class \\SAXSource.class \\ StAXSource.class \\StreamSource.class \\Source.class   【HashSet   xml解析相关~】</p>\n<p><strong>6 -</strong> MultiValueMap</p>\n<p>&#x3D;&#x3D;7 - <strong>true</strong>  MappingJackson2     任意类型可转换~&#x3D;&#x3D;</p>\n<p><strong>8 - true</strong></p>\n<p><strong>9 - 支持注解方式xml处理的。</strong>  XmlRootElement</p>\n<p>最终 MappingJackson2HttpMessageConverter  把(任意类型)<strong>对象转为JSON</strong>（利用底层的jackson的<strong>objectMapper</strong>转换的）</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1354552/1605164243168-1a31e9af-54a4-463e-b65a-c28ca7a8a2fa.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_34,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<h2 id=\"2、内容协商\"><a href=\"#2、内容协商\" class=\"headerlink\" title=\"2、内容协商\"></a>2、内容协商</h2><p>根据客户端接收能力不同，<strong>返回不同媒体类型</strong>的数据。json xml….</p>\n<h3 id=\"1、引入xml依赖\"><a href=\"#1、引入xml依赖\" class=\"headerlink\" title=\"1、引入xml依赖\"></a>1、引入xml依赖</h3><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"> &lt;dependency&gt;\n            &lt;groupId&gt;com.fasterxml.jackson.dataformat&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;jackson-dataformat-xml&lt;&#x2F;artifactId&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<h3 id=\"2、postman分别测试返回json和xml\"><a href=\"#2、postman分别测试返回json和xml\" class=\"headerlink\" title=\"2、postman分别测试返回json和xml\"></a>2、postman分别测试返回json和xml</h3><p>只需要改变请求头中Accept字段。Http协议中规定的，告诉服务器本客户端可以接收的数据类型。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1354552/1605173127653-8a06cd0f-b8e1-4e22-9728-069b942eba3f.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_33,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211018155547025.png\" alt=\"image-20211018155547025\"></p>\n<h3 id=\"3、开启浏览器参数方式内容协商功能\"><a href=\"#3、开启浏览器参数方式内容协商功能\" class=\"headerlink\" title=\"3、开启浏览器参数方式内容协商功能\"></a>3、开启浏览器参数方式内容协商功能</h3><p>postman发xml头req debug：handleReturnValue-in-F8:           MediaType</p>\n<p>&#x3D;&#x3D;浏览器不好改req头Accept字段为json，除非ajax数据setRequestAttribute(“ContentType”)&#x3D;&#x3D;</p>\n<p>&#x3D;&#x3D;为了方便内容协商，开启基于请求参数的内容协商功能。&#x3D;&#x3D;</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">spring:\n    contentnegotiation:\n      favor-parameter: true  #开启请求参数内容协商模式</code></pre>\n\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211018171732471.png\" alt=\"image-20211018171732471\"></p>\n<p>浏览器发请求<strong>【带参?format&#x3D;】</strong>： <a href=\"http://localhost:8080/test/person?format=json\">http://localhost:8080/test/person?format=json</a> </p>\n<p><a href=\"http://localhost:8080/test/person?format=json\">http://localhost:8080/test/person?format=</a>xml </p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1354552/1605230907471-b0ed34bc-6782-40e7-84b7-615726312f01.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_22,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<p>确定客户端接收什么样的内容类型；</p>\n<p>1、Parameter策略优先确定是要返回json数据（获取请求头中的format的值）</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1354552/1605231074299-25f5b062-2de1-4a09-91bf-11e018d6ec0e.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_18,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<p>2、最终进行内容协商返回给客户端json即可。</p>\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211018172849929.png\" alt=\"image-20211018172849929\"></p>\n<h3 id=\"4、内容协商原理\"><a href=\"#4、内容协商原理\" class=\"headerlink\" title=\"4、内容协商原理\"></a>4、内容协商原理</h3><ul>\n<li><p>1、判断当前响应头中是否已经有确定的媒体类型。MediaType</p>\n</li>\n<li><pre><code>MediaType contentType = outputMessage.getHeaders().getContentType();\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">\n- **2、getAcceptableMediaTypes 获取客户端（PostMan、浏览器）支持接收的内容类型。（获取客户端Accept请求头字段）【application&#x2F;xml】**\n\n- - **contentNegotiationManager 内容协商管理器 默认使用基于请求头的策略**\n  - ![img](https:&#x2F;&#x2F;cdn.nlark.com&#x2F;yuque&#x2F;0&#x2F;2020&#x2F;png&#x2F;1354552&#x2F;1605230462280-ef98de47-6717-4e27-b4ec-3eb0690b55d0.png?x-oss-process&#x3D;image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_15%2Ctext_YXRndWlndS5jb20g5bCa56GF6LC3%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n\n- - **HeaderContentNegotiationStrategy  确定客户端可以接收的内容类型** \n  - ![img](https:&#x2F;&#x2F;cdn.nlark.com&#x2F;yuque&#x2F;0&#x2F;2020&#x2F;png&#x2F;1354552&#x2F;1605230546376-65dcf657-7653-4a58-837a-f5657778201a.png?x-oss-process&#x3D;image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_28%2Ctext_YXRndWlndS5jb20g5bCa56GF6LC3%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n\n- 3、**getProducibleMediaTypes**  遍历循环所有当前系统的 **MessageConverter**，看谁支持操作这个对象（Person）: canWrite\n\n- 4、找到支持操作Person的converter，把converter支持的媒体类型统计出来。  result.**addAll**(converter.getSupportedMediaTypes());\n\n- 5、客户端需要【application&#x2F;xml】。服务端能力【10种、json、xml】&#x3D;&#x3D;优化点：这里可以把server端处理能力producibleType(已固定)全部提前缓存起来，会快一点！&#x3D;&#x3D;\n\n- ![img](https:&#x2F;&#x2F;cdn.nlark.com&#x2F;yuque&#x2F;0&#x2F;2020&#x2F;png&#x2F;1354552&#x2F;1605173876646-f63575e2-50c8-44d5-9603-c2d11a78adae.png?x-oss-process&#x3D;image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_20%2Ctext_YXRndWlndS5jb20g5bCa56GF6LC3%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n\n- &#96;&#96;&#96;\n  isCompatibleWith</code></pre>\n</code></pre>\n</li>\n<li><p>6、进行内容协商的最佳匹配媒体类型 isConcrete():</p>\n</li>\n<li><p><img src=\"http://cache.itzy8.top/springboot2/image-20211018162826713.png\" alt=\"image-20211018162826713\"></p>\n</li>\n<li><p>7、用 支持 [将对象转为 最佳匹配媒体类型(xml)] 的converter。调用它进行转化 。</p>\n</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1354552/1605173657818-73331882-6086-490c-973b-af46ccf07b32.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_18,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<p>导入了jackson处理xml的包，xml的converter就会自动进来</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">WebMvcConfigurationSupport:\njackson2XmlPresent &#x3D; ClassUtils.isPresent(&quot;com.fasterxml.jackson.dataformat.xml.XmlMapper&quot;, classLoader);\n\nif (jackson2XmlPresent) &#123;\n\t\t\tJackson2ObjectMapperBuilder builder &#x3D; Jackson2ObjectMapperBuilder.xml();\n\t\t\tif (this.applicationContext !&#x3D; null) &#123;\n\t\t\t\tbuilder.applicationContext(this.applicationContext);\n\t\t\t&#125;\n\t\t\tmessageConverters.add(new MappingJackson2XmlHttpMessageConverter(builder.build()));\n\t\t&#125;</code></pre>\n\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211018163841411.png\" alt=\"image-20211018163841411\"></p>\n<h3 id=\"5、自定义-MessageConverter！！！！！！\"><a href=\"#5、自定义-MessageConverter！！！！！！\" class=\"headerlink\" title=\"5、自定义 MessageConverter！！！！！！\"></a>5、自定义 MessageConverter！！！！！！</h3><p><strong>实现多协议数据兼容。json、xml、x-guigu</strong></p>\n<p><strong>0、</strong>@ResponseBody 响应数据出去 调用 <strong>RequestResponseBodyMethodProcessor</strong> 处理</p>\n<p>1、Processor 处理方法返回值。通过 <strong>MessageConverter</strong> 处理</p>\n<p>2、所有 <strong>MessageConverter</strong> 合起来可以支持各种媒体类型数据的操作（读、写）：CanR R CanW WtoT</p>\n<p>3、内容协商找到最终的 <strong>messageConverter</strong>；</p>\n<p>系统默认Converter： WebMvcAutoConfiguration</p>\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211018174404496.png\" alt=\"image-20211018174404496\"></p>\n<p>this</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">addDefaultConverters               getDefaultConverters              super.getMessageConverters();\naddDefaultHttpMessageConverters    jackson2XmlPresent：\njackson2XmlPresent &#x3D; ClassUtils.isPresent(&quot;com.fasterxml.jackson.dataformat.xml.XmlMapper&quot;, classLoader);\n见上节4、内容协商原理</code></pre>\n\n<p>导入了jackson处理xml的包，xml的converter就会自动进来</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">    &#x2F;**\n     * 1、浏览器发请求直接返回 xml    [application&#x2F;xml]        jacksonXmlConverter\n     * 2、如果是ajax(JS)请求 返回 json   [application&#x2F;json]      jacksonJsonConverter\n     * 3、如果硅谷app发请求，返回自定义协议数据  [appliaction&#x2F;x-guigu]   xxxxConverter\n     *          属性值1;属性值2;\n     *\n     * 步骤：\n     * 1、添加自定义的MessageConverter进系统底层\n     * 2、系统底层就会统计出所有MessageConverter能操作哪些类型\n     * 3、客户端内容协商 [guigu---&gt;guigu]\n     *\n     * 作业：如何以参数的方式进行【自定义】内容协商?？\n     * @return\n     *&#x2F;\n    @ResponseBody  &#x2F;&#x2F;利用返回值处理器里面的消息转换器进行处理\n    @GetMapping(value &#x3D; &quot;&#x2F;test&#x2F;person&quot;)\n    public Person getPerson()&#123;\n        Person person &#x3D; new Person();\n        person.setAge(28);\n        person.setBirth(new Date());\n        person.setUserName(&quot;zhangsan&quot;);\n        return person;\n    &#125;\n\n&#125;</code></pre>\n\n<p>SpringMVC的什么功能。一个入口给容器中添加一个  WebMvcConfigurer</p>\n<p>WebConfig中编写：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Configuration(proxyBeanMethods &#x3D; false)\npublic class WebConfig &#x2F;*implements WebMvcConfigurer*&#x2F; &#123;\n    \n    &#x2F;&#x2F;1、WebMvcConfigurer定制化SpringMVC的功能\n    @Bean\n    public WebMvcConfigurer webMvcConfigurer()&#123;\n        return new WebMvcConfigurer() &#123;\n\n            &#x2F;**\n             * 自定义内容协商策略\n             * @param configurer\n             *&#x2F;\n            @Override &#x2F;&#x2F;覆盖默认\n            public void configureContentNegotiation(ContentNegotiationConfigurer configurer) &#123;\n                &#x2F;&#x2F;Map&lt;String, MediaType&gt; mediaTypes\n                Map&lt;String, MediaType&gt; mediaTypes &#x3D; new HashMap&lt;&gt;();\n                mediaTypes.put(&quot;json&quot;,MediaType.APPLICATION_JSON);\n                mediaTypes.put(&quot;xml&quot;,MediaType.APPLICATION_XML);\n                mediaTypes.put(&quot;gg&quot;,MediaType.parseMediaType(&quot;application&#x2F;x-guigu&quot;));&#x2F;&#x2F;acceptable 绑定producible\n                &#x2F;&#x2F;指定支持解析哪些参数对应的哪些媒体类型\n                ParameterContentNegotiationStrategy parameterStrategy &#x3D; new ParameterContentNegotiationStrategy(mediaTypes);&#x2F;&#x2F;参数类型!!!\n&#x2F;&#x2F;                parameterStrategy.setParameterName(&quot;ff&quot;); &#x2F;&#x2F;?format&#x3D;---&gt;?ff&#x3D;\n\n                HeaderContentNegotiationStrategy headStrategy &#x3D; new HeaderContentNegotiationStrategy();&#x2F;&#x2F;否则不能用postman改头Accept字段生效！！！\n\n                configurer.strategies(Arrays.asList(parameterStrategy,headStrategy));&#x2F;&#x2F;!!!\n            &#125;\n\n            @Override &#x2F;&#x2F;默认+扩展:自定义的Converter\n            public void extendMessageConverters(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters) &#123;\n                converters.add(new GuiguMessageConverter());&#x2F;&#x2F;\n            &#125;\n        &#125;\n        \n        \n        \n        \n        \n        \n    &#125;</code></pre>\n\n<p>converter.GuiguMessageConverter:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * 自定义的Converter：implements HttpMessageConverter&lt;Person&gt;\n *&#x2F;\npublic class GuiguMessageConverter implements HttpMessageConverter&lt;Person&gt; &#123;\n\n    @Override\n    public boolean canRead(Class&lt;?&gt; clazz, MediaType mediaType) &#123;&#x2F;&#x2F;@RequestBody 略\n        return false;\n    &#125;\n\n    @Override\n    public boolean canWrite(Class&lt;?&gt; clazz, MediaType mediaType) &#123;\n        return clazz.isAssignableFrom(Person.class);&#x2F;&#x2F;处理Person-&gt;...\n    &#125;\n\n    &#x2F;**\n     * 服务器要统计所有MessageConverter都能写出哪些内容类型\n     *\n     * application&#x2F;x-guigu\n     * @return\n     *&#x2F;\n    @Override\n    public List&lt;MediaType&gt; getSupportedMediaTypes() &#123;\n        return MediaType.parseMediaTypes(&quot;application&#x2F;x-guigu&quot;);&#x2F;&#x2F;producible\n    &#125;\n\n    @Override\n    public Person read(Class&lt;? extends Person&gt; clazz, HttpInputMessage inputMessage) throws IOException, HttpMessageNotReadableException &#123;\n        return null;\n    &#125;\n\n    @Override\n    public void write(Person person, MediaType contentType, HttpOutputMessage outputMessage) throws IOException, HttpMessageNotWritableException &#123;\n        &#x2F;&#x2F;自定义协议数据的写出\n        String data &#x3D; person.getUserName()+&quot;;&quot;+person.getAge()+&quot;;&quot;+person.getBirth();&#x2F;&#x2F;属性值1;属性值2;\n\n\n        &#x2F;&#x2F;写出去\n        OutputStream body &#x3D; outputMessage.getBody();\n        body.write(data.getBytes());\n    &#125;\n&#125;</code></pre>\n\n\n\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1354552/1605260623995-8b1f7cec-9713-4f94-9cf1-8dbc496bd245.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_18,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1354552/1605261062877-0a27cc41-51cb-4018-a9af-4e0338a247cd.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_27,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<p>只自定义param后，只能解析参数的，没有Header的策略</p>\n<p>accept *&#x2F;* 都行，就第一个优先：一律返回json！！！</p>\n<p>所以必须new一个空new HeaderContentNegotiationStrategy(); 入strategies的List{里}。 头、参都行了！！！</p>\n<p>【浏览器：参数?format&#x3D;gg   postman：头accept  application&#x2F;x-guigu】</p>\n<p>还可以+Path。。。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class HeaderContentNegotiationStrategy implements ContentNegotiationStrategy &#123;\n\npublic interface ContentNegotiationStrategy &#123;\n</code></pre>\n\n\n\n<p><strong>有可能我们添加的自定义的功能会覆盖默认很多功能，导致一些默认的功能失效。</strong>【看源码，缺啥添啥   HeaderStrategy】</p>\n<p><strong>作业：大家考虑，上述功能除了我们完全自定义外？SpringBoot有没有为我们提供基于配置文件的快速修改媒体类型功能？怎么配置呢？【提示：参照SpringBoot官方文档web开发内容协商章节】</strong></p>\n<h1 id=\"5、视图解析与模板引擎\"><a href=\"#5、视图解析与模板引擎\" class=\"headerlink\" title=\"5、视图解析与模板引擎\"></a>5、视图解析与模板引擎</h1><p>视图解析（页面跳转）：<strong>SpringBoot默认不支持 JSP[不支持在Jar压缩包中编译]，需要引入第三方模板引擎技术实现页面渲染。</strong></p>\n<h2 id=\"1、视图解析\"><a href=\"#1、视图解析\" class=\"headerlink\" title=\"1、视图解析\"></a>1、视图解析</h2><p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1354552/1606043749039-cefbf687-4feb-441d-bad8-c6d933248d3c.png\" alt=\"img\"></p>\n<h3 id=\"1、视图解析原理流程\"><a href=\"#1、视图解析原理流程\" class=\"headerlink\" title=\"1、视图解析原理流程\"></a>1、视图解析原理流程</h3><p>1、目标方法处理的过程中，所有数据都会被放在 <strong>ModelAndViewContainer 里面。包括数据和视图地址</strong></p>\n<p><strong>2、方法的参数是一个自定义类型对象（从请求参数中确定的），把他重新放在</strong> <strong>ModelAndViewContainer</strong> </p>\n<p><strong>3、任何目标方法执行完成以后都会返回 ModelAndView（<strong><strong>数据和视图地址</strong></strong>）。</strong></p>\n<p><strong>4、****processDispatchResult  处理派发结果（页面改如何响应）</strong></p>\n<ul>\n<li><p>1、<strong>render</strong>(<strong>mv</strong>, request, response); 进行页面渲染逻辑</p>\n</li>\n<li><ul>\n<li>1、根据方法的String返回值得到 <strong>View</strong> 对象【定义了页面的渲染逻辑】</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>1、所有的视图解析器尝试是否能根据当前返回值得到<strong>View</strong>对象</li>\n<li>2、得到了  <strong>redirect:&#x2F;main.html</strong> –&gt; Thymeleaf new <strong>RedirectView</strong>()</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>3、ContentNegotiationViewResolver 里面包含了下面所有的视图解析器，内部还是利用下面所有视图解析器得到视图对象。</li>\n<li>4、view.render(mv.getModelInternal(), request, response);   视图对象调用自定义的render进行页面渲染工作</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li><ul>\n<li><strong>RedirectView 如何渲染【重定向到一个页面】</strong></li>\n<li><strong>1、获取目标url地址</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li><ul>\n<li><strong>2、&#x3D;&#x3D;response.sendRedirect(encodedURL);&#x3D;&#x3D;【servlet中最原生的重定向语法】</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211019200245587.png\" alt=\"image-20211019200245587\"></p>\n<p>HTTP<em>状态码</em>——<em>302</em> 理解 <em>302</em> 表示临时性重定向。 访问一个Url时,被重定向到另一个url上。 常用于页面跳转。</p>\n<p><strong>视图解析：</strong></p>\n<ul>\n<li><ul>\n<li><strong>返回值以 forward: 开始： new InternalResourceView(forwardUrl); –&gt;  &#x3D;&#x3D;原生servlet转发：request.getRequestDispatcher(path 比如”&#x2F;“).forward(request, response);&#x3D;&#x3D;</strong></li>\n<li><strong>返回值以</strong> <strong>redirect: 开始：</strong> <strong>new RedirectView() –》 render就是重定向</strong></li>\n</ul>\n</li>\n<li><ul>\n<li><strong>返回值是普通字符串： new ThymeleafView（）—&gt;</strong>  process()</li>\n</ul>\n</li>\n</ul>\n<p><strong>作业</strong>：。。。</p>\n<p>自定义视图解析器+自定义视图； <strong>大厂学院。</strong></p>\n<p>比如：data–&gt;Excel表</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1354552/1605680247945-088b0f17-185c-490b-8889-103e8b4d8c07.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_16,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1354552/1605679959020-54b96fe7-f2fc-4b4d-a392-426e1d5413de.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_23,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211019174346084.png\" alt=\"image-20211019174346084\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1354552/1605679471537-7db702dc-b165-4dc6-b64a-26459ee5fd6c.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_17,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211019175035172.png\" alt=\"image-20211019175035172\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1354552/1605679913592-151a616a-c754-4da3-a2c1-91dc0230a48d.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_22,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<p>重定向 参数</p>\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211019195833998.png\" alt=\"image-20211019195833998\"></p>\n<h2 id=\"2、模板引擎-Thymeleaf（性能不高-不能高并发）\"><a href=\"#2、模板引擎-Thymeleaf（性能不高-不能高并发）\" class=\"headerlink\" title=\"2、模板引擎-Thymeleaf（性能不高 不能高并发）\"></a>2、模板引擎-Thymeleaf（性能不高 不能高并发）</h2><h3 id=\"1、thymeleaf简介\"><a href=\"#1、thymeleaf简介\" class=\"headerlink\" title=\"1、thymeleaf简介\"></a>1、thymeleaf简介</h3><p>Thymeleaf is a modern server-side Java template engine for both web and standalone environments, capable of processing HTML, XML, JavaScript, CSS and even plain text.</p>\n<p><strong>现代化、服务端Java模板引擎</strong></p>\n<p><a href=\"https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#standard-expression-syntax\">https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#standard-expression-syntax</a></p>\n<h3 id=\"2、基本语法\"><a href=\"#2、基本语法\" class=\"headerlink\" title=\"2、基本语法\"></a>2、基本语法</h3><h4 id=\"1、表达式\"><a href=\"#1、表达式\" class=\"headerlink\" title=\"1、表达式\"></a>1、表达式</h4><table>\n<thead>\n<tr>\n<th>表达式名字</th>\n<th>语法</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>变量取值</td>\n<td>${…}</td>\n<td>获取请求域、session域、对象等值</td>\n</tr>\n<tr>\n<td>选择变量</td>\n<td>*{…}</td>\n<td>获取上下文对象值</td>\n</tr>\n<tr>\n<td>消息</td>\n<td>#{…}</td>\n<td>获取国际化等值</td>\n</tr>\n<tr>\n<td>链接</td>\n<td>@{…}</td>\n<td>生成链接</td>\n</tr>\n<tr>\n<td>片段表达式</td>\n<td>~{…}</td>\n<td>jsp:include 作用，【引入】【(已有的)公共页面片段】</td>\n</tr>\n</tbody></table>\n<h4 id=\"2、字面量\"><a href=\"#2、字面量\" class=\"headerlink\" title=\"2、字面量\"></a>2、字面量</h4><p>文本值: <strong>‘one text’</strong> <strong>,</strong> <strong>‘Another one!’</strong> <strong>,…</strong>数字: <strong>0</strong> <strong>,</strong> <strong>34</strong> <strong>,</strong> <strong>3.0</strong> <strong>,</strong> <strong>12.3</strong> <strong>,…</strong>布尔值: <strong>true</strong> <strong>,</strong> <strong>false</strong></p>\n<p>空值: <strong>null</strong></p>\n<p>变量： one，two，…. 变量不能有空格</p>\n<h4 id=\"3、文本操作\"><a href=\"#3、文本操作\" class=\"headerlink\" title=\"3、文本操作\"></a>3、文本操作</h4><p>字符串拼接: <strong>+</strong></p>\n<p>变量替换: <strong>|The name is ${name}|</strong> </p>\n<h4 id=\"4、数学运算\"><a href=\"#4、数学运算\" class=\"headerlink\" title=\"4、数学运算\"></a>4、数学运算</h4><p>运算符: + , - , * , &#x2F; , %</p>\n<h4 id=\"5、布尔运算\"><a href=\"#5、布尔运算\" class=\"headerlink\" title=\"5、布尔运算\"></a>5、布尔运算</h4><p>运算符:  <strong>and</strong> <strong>,</strong> <strong>or</strong></p>\n<p>一元运算: <strong>!</strong> <strong>,</strong> <strong>not</strong> </p>\n<h4 id=\"6、比较运算\"><a href=\"#6、比较运算\" class=\"headerlink\" title=\"6、比较运算\"></a>6、比较运算</h4><p>比较: <strong>&gt;</strong> <strong>,</strong> <strong>&lt;** **,** **&gt;&#x3D;</strong> <strong>,</strong> <strong>&lt;&#x3D;</strong> <strong>(</strong> <strong>gt</strong> <strong>,</strong> <strong>lt</strong> <strong>,</strong> <strong>ge</strong> <strong>,</strong> <strong>le</strong> **)**等式: <strong>&#x3D;&#x3D;</strong> <strong>,</strong> <strong>!&#x3D;</strong> <strong>(</strong> <strong>eq</strong> <strong>,</strong> <strong>ne</strong> <strong>)</strong> </p>\n<h4 id=\"7、条件运算\"><a href=\"#7、条件运算\" class=\"headerlink\" title=\"7、条件运算\"></a>7、条件运算</h4><p>If-then: <strong>(if) ? (then)</strong></p>\n<p>If-then-else: <strong>(if) ? (then) : (else)</strong></p>\n<p>Default: (value) <strong>?: (defaultvalue)</strong> </p>\n<h4 id=\"8、特殊操作\"><a href=\"#8、特殊操作\" class=\"headerlink\" title=\"8、特殊操作\"></a>8、特殊操作</h4><p>无操作： _</p>\n<h3 id=\"3、设置属性值-th-attr\"><a href=\"#3、设置属性值-th-attr\" class=\"headerlink\" title=\"3、设置属性值-th:attr\"></a>3、设置属性值-th:attr</h3><p>设置单个值</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;form action&#x3D;&quot;subscribe.html&quot; th:attr&#x3D;&quot;action&#x3D;@&#123;&#x2F;subscribe&#125;&quot;&gt;\n  &lt;fieldset&gt;\n    &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;email&quot; &#x2F;&gt;\n    &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;Subscribe!&quot; th:attr&#x3D;&quot;value&#x3D;#&#123;subscribe.submit&#125;&quot;&#x2F;&gt;\n  &lt;&#x2F;fieldset&gt;\n&lt;&#x2F;form&gt;</code></pre>\n\n<p>设置多个值</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;img src&#x3D;&quot;..&#x2F;..&#x2F;images&#x2F;gtvglogo.png&quot;  th:attr&#x3D;&quot;src&#x3D;@&#123;&#x2F;images&#x2F;gtvglogo.png&#125;,title&#x3D;#&#123;logo&#125;,alt&#x3D;#&#123;logo&#125;&quot; &#x2F;&gt;</code></pre>\n\n\n\n<p>以上两个的&#x3D;&#x3D;代替写法 th:xxxx&#x3D;“#@…{}”    动态取值覆盖默认&#x3D;&#x3D;</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;Subscribe!&quot; th:value&#x3D;&quot;#&#123;subscribe.submit&#125;&quot;&#x2F;&gt;\n&lt;form action&#x3D;&quot;subscribe.html&quot; th:action&#x3D;&quot;@&#123;&#x2F;subscribe&#125;&quot;&gt;</code></pre>\n\n\n\n<p>所有h5兼容的标签写法</p>\n<p><a href=\"https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#setting-value-to-specific-attributes\">https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#setting-value-to-specific-attributes</a></p>\n<h3 id=\"4、迭代\"><a href=\"#4、迭代\" class=\"headerlink\" title=\"4、迭代\"></a>4、迭代</h3><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;tr th:each&#x3D;&quot;prod : $&#123;prods&#125;&quot;&gt;\n        &lt;td th:text&#x3D;&quot;$&#123;prod.name&#125;&quot;&gt;Onions&lt;&#x2F;td&gt;\n        &lt;td th:text&#x3D;&quot;$&#123;prod.price&#125;&quot;&gt;2.41&lt;&#x2F;td&gt;\n        &lt;td th:text&#x3D;&quot;$&#123;prod.inStock&#125;? #&#123;true&#125; : #&#123;false&#125;&quot;&gt;yes&lt;&#x2F;td&gt;\n&lt;&#x2F;tr&gt;</code></pre>\n\n\n\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;tr th:each&#x3D;&quot;prod,iterStat : $&#123;prods&#125;&quot; th:class&#x3D;&quot;$&#123;iterStat.odd&#125;? &#39;odd&#39;&quot;&gt;\n  &lt;td th:text&#x3D;&quot;$&#123;prod.name&#125;&quot;&gt;Onions&lt;&#x2F;td&gt;\n  &lt;td th:text&#x3D;&quot;$&#123;prod.price&#125;&quot;&gt;2.41&lt;&#x2F;td&gt;\n  &lt;td th:text&#x3D;&quot;$&#123;prod.inStock&#125;? #&#123;true&#125; : #&#123;false&#125;&quot;&gt;yes&lt;&#x2F;td&gt;\n&lt;&#x2F;tr&gt;</code></pre>\n\n\n\n<h3 id=\"5、条件运算\"><a href=\"#5、条件运算\" class=\"headerlink\" title=\"5、条件运算\"></a>5、条件运算</h3><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;a href&#x3D;&quot;comments.html&quot;\nth:href&#x3D;&quot;@&#123;&#x2F;product&#x2F;comments(prodId&#x3D;$&#123;prod.id&#125;)&#125;&quot;\nth:if&#x3D;&quot;$&#123;not #lists.isEmpty(prod.comments)&#125;&quot;&gt;view&lt;&#x2F;a&gt;</code></pre>\n\n\n\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;div th:switch&#x3D;&quot;$&#123;user.role&#125;&quot;&gt;\n  &lt;p th:case&#x3D;&quot;&#39;admin&#39;&quot;&gt;User is an administrator&lt;&#x2F;p&gt;\n  &lt;p th:case&#x3D;&quot;#&#123;roles.manager&#125;&quot;&gt;User is a manager&lt;&#x2F;p&gt;\n  &lt;p th:case&#x3D;&quot;*&quot;&gt;User is some other thing&lt;&#x2F;p&gt;\n&lt;&#x2F;div&gt;</code></pre>\n\n\n\n<h3 id=\"6、属性优先级\"><a href=\"#6、属性优先级\" class=\"headerlink\" title=\"6、属性优先级\"></a>6、属性优先级</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1354552/1605498132699-4fae6085-a207-456c-89fa-e571ff1663da.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_44,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<h2 id=\"3、thymeleaf使用\"><a href=\"#3、thymeleaf使用\" class=\"headerlink\" title=\"3、thymeleaf使用\"></a>3、thymeleaf使用</h2><h4 id=\"1、引入Starter\"><a href=\"#1、引入Starter\" class=\"headerlink\" title=\"1、引入Starter\"></a>1、引入Starter</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;&#x2F;artifactId&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<h4 id=\"2、自动配置好了thymeleaf\"><a href=\"#2、自动配置好了thymeleaf\" class=\"headerlink\" title=\"2、自动配置好了thymeleaf\"></a>2、自动配置好了thymeleaf</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Configuration(proxyBeanMethods &#x3D; false)\n@EnableConfigurationProperties(ThymeleafProperties.class)\n@ConditionalOnClass(&#123; TemplateMode.class, SpringTemplateEngine.class &#125;)\n@AutoConfigureAfter(&#123; WebMvcAutoConfiguration.class, WebFluxAutoConfiguration.class &#125;)\npublic class ThymeleafAutoConfiguration &#123; &#125;&#x2F;&#x2F;</code></pre>\n\n\n\n<p>自动配好的策略</p>\n<ul>\n<li><p>1、所有thymeleaf的配置值都在 ThymeleafProperties</p>\n</li>\n<li><p>2、配置好了 <strong>SpringTemplateEngine</strong> </p>\n</li>\n<li><p><strong>3、配好了</strong> <strong>ThymeleafViewResolver</strong> </p>\n</li>\n<li><p>4、我们只需要直接开发页面</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">ThymeleafProperties:\n\tpublic static final String DEFAULT_PREFIX &#x3D; &quot;classpath:&#x2F;templates&#x2F;&quot;;\n\n\tpublic static final String DEFAULT_SUFFIX &#x3D; &quot;.html&quot;;  &#x2F;&#x2F;xxx.html</code></pre>\n\n\n\n<h4 id=\"3、页面开发【初体验-小试牛刀-】-域中-th-要修改的属性-x3D-””\"><a href=\"#3、页面开发【初体验-小试牛刀-】-域中-th-要修改的属性-x3D-””\" class=\"headerlink\" title=\"3、页面开发【初体验 小试牛刀~】                域中$  th:要修改的属性&#x3D;””\"></a>3、页面开发【初体验 小试牛刀~】                域中$  th:要修改的属性&#x3D;””</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">templates&#x2F;success.html:\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot; xmlns:th&#x3D;&quot;http:&#x2F;&#x2F;www.thymeleaf.org&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n&lt;h1 th:text&#x3D;&quot;$&#123;msg&#125;&quot;&gt;哈哈&lt;&#x2F;h1&gt;\n&lt;h2&gt;\n    &lt;a href&#x3D;&quot;www.atguigu.com&quot; th:href&#x3D;&quot;$&#123;link&#125;&quot;&gt;去百度&lt;&#x2F;a&gt;  &lt;br&#x2F;&gt;\n    &lt;a href&#x3D;&quot;www.atguigu.com&quot; th:href&#x3D;&quot;@&#123;&#x2F;link&#125;&quot;&gt;去百度[无效]&lt;&#x2F;a&gt; &lt;!--绝对路径   可动态+&#x2F;world...--&gt;\n    &lt;a href&#x3D;&quot;www.atguigu.com&quot; th:href&#x3D;&quot;@&#123;http:&#x2F;&#x2F;www.baidu.com&#125;&quot;&gt;去百度2&lt;&#x2F;a&gt;\n&lt;&#x2F;h2&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n        \n        \n        \n        \n@Controller&#x2F;&#x2F;!!!不是RestController!!!!\npublic class ViewTestController &#123;\n\n    @GetMapping(&quot;&#x2F;atguigu&quot;)\n    public String atguigu(Model model)&#123;\n\n        &#x2F;&#x2F;model中的数据会被放在请求域中 request.setAttribute(&quot;a&quot;,aa)\n        model.addAttribute(&quot;msg&quot;,&quot;你好 guigu&quot;);\n        model.addAttribute(&quot;link&quot;,&quot;http:&#x2F;&#x2F;www.baidu.com&quot;);\n        return &quot;success&quot;;\n    &#125;\n&#125;</code></pre>\n\n\n\n\n\n\n\n\n\n<h2 id=\"4、构建后台管理系统-boot-05-web-admin\"><a href=\"#4、构建后台管理系统-boot-05-web-admin\" class=\"headerlink\" title=\"4、构建后台管理系统   boot-05-web-admin\"></a>4、构建后台管理系统   boot-05-web-admin</h2><h3 id=\"1、项目创建\"><a href=\"#1、项目创建\" class=\"headerlink\" title=\"1、项目创建\"></a>1、项目创建</h3><p>thymeleaf、web-starter、devtools、lombok</p>\n<h3 id=\"2、静态资源处理\"><a href=\"#2、静态资源处理\" class=\"headerlink\" title=\"2、静态资源处理\"></a>2、静态资源处理</h3><p>自动配置好，我们只需要把所有静态资源放到 static 文件夹下</p>\n<h3 id=\"3、路径构建\"><a href=\"#3、路径构建\" class=\"headerlink\" title=\"3、路径构建\"></a>3、路径构建</h3><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">html都要+：！！！！！！\n&lt;html lang&#x3D;&quot;en&quot; xmlns:th&#x3D;&quot;http:&#x2F;&#x2F;www.thymeleaf.org&quot;&gt;</code></pre>\n\n<p>th:action&#x3D;”@{&#x2F;login}”</p>\n<p>th:修改标签属性&#x3D;”${}”</p>\n<p>行内写法(修改纯文本)：&lt;&gt; [[${}]] &lt;&#x2F;&gt;</p>\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211019142523718.png\" alt=\"image-20211019142523718\"></p>\n<p>抽取公共样式组件 common.html : css&#x2F; js &#x2F;left side&#x2F; header section</p>\n<p>th: @{} 动态化标签后，改了项目名也自动OK！！！</p>\n<h3 id=\"4、模板抽取（8、-Template-Layout）\"><a href=\"#4、模板抽取（8、-Template-Layout）\" class=\"headerlink\" title=\"4、模板抽取（8、 Template Layout）\"></a>4、模板抽取（8、 Template Layout）</h3><p>th:insert放整体 &#x2F;replace放内容+换标签 &#x2F;include只放内容</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">    &lt;div th:include&#x3D;&quot;common :: commonheader&quot;&gt; &lt;&#x2F;div&gt;\n    \n\n    &lt;!-- left side start--&gt;\n    &lt;div th:replace&#x3D;&quot;common :: #leftmenu&quot;&gt; &lt;&#x2F;div&gt;\n    &lt;!-- left side end--&gt;\n    \n    &lt;!-- main content start--&gt;\n    &lt;div class&#x3D;&quot;main-content&quot; &gt;\n\n        &lt;!-- header section start--&gt;\n        &lt;div th:replace&#x3D;&quot;common :: headermenu&quot;&gt; &lt;&#x2F;div&gt;\n        &lt;!-- header section end--&gt;\n        ......\n      \n      \n&lt;!-- Placed js at the end of the document so the pages load faster --&gt;\n&lt;div th:replace&#x3D;&quot;common :: #commonscript&quot;&gt; &lt;&#x2F;div&gt;</code></pre>\n\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211019154316418.png\" alt=\"image-20211019154316418\"></p>\n<h3 id=\"5、页面跳转\"><a href=\"#5、页面跳转\" class=\"headerlink\" title=\"5、页面跳转\"></a>5、页面跳转</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F;+模板引擎thymeleaf后，如果需要跳转到指定的【页面】，需要使用@Controller注解和视图解析器InternalResourceViewResolver配合使用。   自动渲染String为页面\n&#x2F;&#x2F;如果我们在Controller方法中，需要返回JSON、XML，或者我们自己定义的类型到页面中，那么就需要使用【@ResponseBody注解该方法】。\n@Controller &#x2F;&#x2F;不能用@RestController!!!\npublic class IndexController &#123;\n\n    &#x2F;**\n     * 来登录页\n     * @return\n     *&#x2F;\n    @GetMapping(value &#x3D; &#123;&quot;&#x2F;&quot;, &quot;&#x2F;login&quot;&#125;)\n    public String loginPage() &#123;\n        return &quot;login&quot;;\n    &#125;\n\n    @PostMapping(&quot;&#x2F;login&quot;)\n    public String main(User user, HttpSession session, Model model)&#123;\n\n        if(StringUtils.hasLength(user.getUserName()) &amp;&amp; &quot;123456&quot;.equals(user.getPassWord()))&#123;\n            &#x2F;&#x2F;把登陆成功的用户保存起来\n            session.setAttribute(&quot;loginUser&quot;,user);\n            &#x2F;&#x2F;登录成功重定向到main.html;  重定向防止表单重复提交！！！\n            return &quot;redirect:&#x2F;main.html&quot;;\n        &#125;else &#123;\n            model.addAttribute(&quot;msg&quot;,&quot;账号密码错误&quot;);&#x2F;&#x2F;转发回login页\n            &#x2F;&#x2F;回到登录页面\n            return &quot;login&quot;;\n        &#125;\n    &#125;\n\n    &#x2F;**\n     * 去main页面\n     * @return\n     *&#x2F;\n    @GetMapping(&quot;&#x2F;main.html&quot;)\n    public String mainPage(HttpSession session, Model model)&#123;\n\n        &#x2F;&#x2F;是否登录，  拦截器，过滤器\n        Object loginUser &#x3D; session.getAttribute(&quot;loginUser&quot;);\n        if(loginUser !&#x3D; null)&#123;\n            return &quot;main&quot;;\n        &#125; else &#123;\n            model.addAttribute(&quot;msg&quot;,&quot;请重新登录&quot;);&#x2F;&#x2F;转发回login页\n            &#x2F;&#x2F;回到登录页面\n            return &quot;login&quot;;\n        &#125;\n\n    &#125;\n\n\n&#125;</code></pre>\n\n\n\n\n\n<h3 id=\"6、数据渲染-表格内容\"><a href=\"#6、数据渲染-表格内容\" class=\"headerlink\" title=\"6、数据渲染[表格内容]\"></a>6、数据渲染[表格内容]</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Controller\npublic class TableController &#123;    \n\t@GetMapping(&quot;&#x2F;dynamic_table&quot;)\n    public String dynamic_table(Model model)&#123;\n        &#x2F;&#x2F;表格内容的遍历\n        List&lt;User&gt; users &#x3D; Arrays.asList(new User(&quot;zhangsan&quot;, &quot;123456&quot;),\n                new User(&quot;lisi&quot;, &quot;123444&quot;),\n                new User(&quot;haha&quot;, &quot;aaaaa&quot;),\n                new User(&quot;hehe &quot;, &quot;aaddd&quot;));\n        model.addAttribute(&quot;users&quot;,users);\n\n        return &quot;table&#x2F;dynamic_table&quot;;\n    &#125;\n...\n&#125;\n\n\n        &lt;table class&#x3D;&quot;display table table-bordered&quot; id&#x3D;&quot;hidden-table-info&quot;&gt;\n        &lt;thead&gt;\n        &lt;tr&gt;\n            &lt;th&gt;#&lt;&#x2F;th&gt;\n            &lt;th&gt;用户名&lt;&#x2F;th&gt;\n            &lt;th&gt;密码&lt;&#x2F;th&gt;\n        &lt;&#x2F;tr&gt;\n        &lt;&#x2F;thead&gt;\n        &lt;tbody&gt;\n        &lt;tr class&#x3D;&quot;gradeX&quot; th:each&#x3D;&quot;user,stats:$&#123;users&#125;&quot;&gt;\n            &lt;td th:text&#x3D;&quot;$&#123;stats.count&#125;&quot;&gt;Trident&lt;&#x2F;td&gt;\n            &lt;td th:text&#x3D;&quot;$&#123;user.userName&#125;&quot;&gt;Internet&lt;&#x2F;td&gt;\n            &lt;td &gt;[[$&#123;user.password&#125;]]&lt;&#x2F;td&gt;\n        &lt;&#x2F;tr&gt;\n        &lt;&#x2F;tbody&gt;\n        &lt;&#x2F;table&gt;</code></pre>\n\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211019163545198.png\" alt=\"image-20211019163545198\"></p>\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211019164110569.png\" alt=\"image-20211019164110569\"></p>\n<h1 id=\"跨域CORS……ing\"><a href=\"#跨域CORS……ing\" class=\"headerlink\" title=\"[!]跨域CORS……ing\"></a>[!]跨域CORS……ing</h1><h1 id=\"6、拦截器\"><a href=\"#6、拦截器\" class=\"headerlink\" title=\"6、拦截器\"></a>6、拦截器</h1><h2 id=\"1、HandlerInterceptor-接口-Ctrl-F12\"><a href=\"#1、HandlerInterceptor-接口-Ctrl-F12\" class=\"headerlink\" title=\"1、HandlerInterceptor 接口 (Ctrl+F12)\"></a>1、HandlerInterceptor 接口 (Ctrl+F12)</h2><p> &#x3D;&#x3D;原生servlet转发：request.getRequestDispatcher(path 比如”&#x2F;“).forward(request, response);&#x3D;&#x3D;</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * 登录检查\n * 1、配置好拦截器要拦截哪些请求\n * 2、把这些配置放在容器中\n *&#x2F;\n@Slf4j\npublic class LoginInterceptor implements HandlerInterceptor &#123;\n\n    &#x2F;**\n     * 目标方法执行之前\n     * @param request\n     * @param response\n     * @param handler\n     * @return\n     * @throws Exception\n     *&#x2F;\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;\n\n        String requestURI &#x3D; request.getRequestURI();&#x2F;&#x2F;\n        log.info(&quot;preHandle拦截的请求路径是&#123;&#125;&quot;,requestURI);\n\n        &#x2F;&#x2F;登录检查逻辑\n        HttpSession session &#x3D; request.getSession();\n\n        Object loginUser &#x3D; session.getAttribute(&quot;loginUser&quot;);\n\n        if(loginUser !&#x3D; null)&#123;\n            &#x2F;&#x2F;放行\n            return true;\n        &#125;\n\n        &#x2F;&#x2F;拦截住。未登录。跳转到登录页\n&#x2F;&#x2F;        session.setAttribute(&quot;msg&quot;,&quot;请先登录&quot;);\n&#x2F;&#x2F;        response.sendRedirect(&quot;&#x2F;&quot;);\n\n        &#x2F;&#x2F;请求域转发属性 可展示出来\n        request.setAttribute(&quot;msg&quot;,&quot;请先登录&quot;);\n&#x2F;&#x2F;        原生servlet请求域转发：request.getRequestDispatcher(path 比如&quot;&#x2F;&quot;).forward(request, response);\n        request.getRequestDispatcher(&quot;&#x2F;&quot;).forward(request,response);\n        return false;\n    &#125;\n\n    &#x2F;**\n     * 目标方法执行完成以后\n     * @param request\n     * @param response\n     * @param handler\n     * @param modelAndView\n     * @throws Exception\n     *&#x2F;\n    @Override\n    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception &#123;\n        log.info(&quot;postHandle执行&#123;&#125;&quot;,modelAndView);&#x2F;&#x2F;\n    &#125;\n\n    &#x2F;**\n     * 页面渲染以后\n     * @param request\n     * @param response\n     * @param handler\n     * @param ex\n     * @throws Exception\n     *&#x2F;\n    @Override\n    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception &#123;\n        log.info(&quot;afterCompletion执行异常&#123;&#125;&quot;,ex);&#x2F;&#x2F;\n    &#125;\n&#125;</code></pre>\n\n\n\n<h2 id=\"2、配置拦截器\"><a href=\"#2、配置拦截器\" class=\"headerlink\" title=\"2、配置拦截器\"></a>2、配置拦截器</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * 1、编写一个拦截器实现HandlerInterceptor接口\n * 2、拦截器注册到容器中（实现WebMvcConfigurer的addInterceptors）\n * 3、指定拦截规则【如果是拦截所有，静态资源也会被拦截】\n *&#x2F;\n@Configuration\npublic class AdminWebConfig implements WebMvcConfigurer &#123;\n\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) &#123;\n        registry.addInterceptor(new LoginInterceptor())\n                .addPathPatterns(&quot;&#x2F;**&quot;)  &#x2F;&#x2F;所有请求都被拦截包括静态资源\n                .excludePathPatterns(&quot;&#x2F;&quot;,&quot;&#x2F;login&quot;,&quot;&#x2F;css&#x2F;**&quot;,&quot;&#x2F;fonts&#x2F;**&quot;,&quot;&#x2F;images&#x2F;**&quot;,&quot;&#x2F;js&#x2F;**&quot;); &#x2F;&#x2F;放行的请求\n    &#125;\n&#125;</code></pre>\n\n<p>IndexController：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">    &#x2F;**\n     * 去main页面\n     * @return\n     *&#x2F;\n    @GetMapping(&quot;&#x2F;main.html&quot;)\n    public String mainPage(HttpSession session, Model model)&#123;\n\n        log.info(&quot;当前方法是：&#123;&#125;&quot;, &quot;mainPage&quot;);\n        &#x2F;&#x2F;是否登录，  拦截器，过滤器\n&#x2F;&#x2F;        Object loginUser &#x3D; session.getAttribute(&quot;loginUser&quot;);\n&#x2F;&#x2F;        if(loginUser !&#x3D; null)&#123;\n&#x2F;&#x2F;            return &quot;main&quot;;\n&#x2F;&#x2F;        &#125; else &#123;\n&#x2F;&#x2F;            model.addAttribute(&quot;msg&quot;,&quot;请重新登录&quot;);&#x2F;&#x2F;转发回login页\n&#x2F;&#x2F;            &#x2F;&#x2F;回到登录页面\n&#x2F;&#x2F;            return &quot;login&quot;;\n&#x2F;&#x2F;        &#125;\n\n        return &quot;main&quot;;\n\n    &#125;</code></pre>\n\n\n\n<p>登录后，main：</p>\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211019214326644.png\" alt=\"image-20211019214326644\"></p>\n<h2 id=\"3、拦截器原理\"><a href=\"#3、拦截器原理\" class=\"headerlink\" title=\"3、拦截器原理\"></a>3、拦截器原理</h2><p>1、根据当前请求，找到<strong>HandlerExecutionChain【</strong>可以处理请求的handler以及handler的所有 拦截器】</p>\n<p>2、先来<strong>顺序执行</strong> 所有拦截器的 preHandle方法</p>\n<ul>\n<li>1、如果当前拦截器prehandler返回为true。则执行下一个拦截器的preHandle</li>\n<li>2、如果当前拦截器返回为false。直接    倒序执行所有已经执行了的拦截器的  afterCompletion；</li>\n<li><img src=\"http://cache.itzy8.top/springboot2/image-20211020143747361.png\" alt=\"image-20211020143747361\"></li>\n</ul>\n<p><strong>3、如果任何一个拦截器返回false。直接return跳出不执行目标方法</strong></p>\n<p><strong>4、所有拦截器都返回True。执行目标方法</strong></p>\n<p><strong>5、倒序执行所有拦截器的postHandle方法。</strong></p>\n<p><strong>6、前面的步骤有任何异常都会直接倒序触发</strong> afterCompletion</p>\n<p>7、页面成功渲染完成以后，也会倒序触发 afterCompletion</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1354552/1605764129365-5b31a748-1541-4bee-9692-1917b3364bc6.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_44,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1354552/1605765121071-64cfc649-4892-49a3-ac08-88b52fb4286f.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_35,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<h1 id=\"7、文件上传\"><a href=\"#7、文件上传\" class=\"headerlink\" title=\"7、文件上传\"></a>7、文件上传</h1><h2 id=\"1、页面表单\"><a href=\"#1、页面表单\" class=\"headerlink\" title=\"1、页面表单\"></a>1、页面表单</h2><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;form method&#x3D;&quot;post&quot; action&#x3D;&quot;&#x2F;upload&quot; enctype&#x3D;&quot;multipart&#x2F;form-data&quot;&gt;\n    &lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;file&quot;&gt;&lt;br&gt;\n    &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot;&gt;\n&lt;&#x2F;form&gt;</code></pre>\n\n\n\n<h2 id=\"2、文件上传代码\"><a href=\"#2、文件上传代码\" class=\"headerlink\" title=\"2、文件上传代码\"></a>2、文件上传代码</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">@RequestPart(&quot;photos&quot;) MultipartFile[] photos</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">    \n&lt;form role&#x3D;&quot;form&quot; th:action&#x3D;&quot;@&#123;&#x2F;upload&#125;&quot; method&#x3D;&quot;post&quot; enctype&#x3D;&quot;multipart&#x2F;form-data&quot;&gt;\n                            &lt;div class&#x3D;&quot;form-group&quot;&gt;\n                                &lt;label for&#x3D;&quot;exampleInputEmail1&quot;&gt;邮箱&lt;&#x2F;label&gt;\n                                &lt;input type&#x3D;&quot;email&quot; name&#x3D;&quot;email&quot; class&#x3D;&quot;form-control&quot; id&#x3D;&quot;exampleInputEmail1&quot; placeholder&#x3D;&quot;Enter email&quot;&gt;\n                            &lt;&#x2F;div&gt;\n                            &lt;div class&#x3D;&quot;form-group&quot;&gt;\n                                &lt;label for&#x3D;&quot;exampleInputPassword1&quot;&gt;名字&lt;&#x2F;label&gt;\n                                &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot; class&#x3D;&quot;form-control&quot; id&#x3D;&quot;exampleInputPassword1&quot; placeholder&#x3D;&quot;Password&quot;&gt;\n                            &lt;&#x2F;div&gt;\n                            &lt;div class&#x3D;&quot;form-group&quot;&gt;\n                                &lt;label for&#x3D;&quot;exampleInputFile&quot;&gt;头像&lt;&#x2F;label&gt;\n                                &lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;headerImg&quot; id&#x3D;&quot;exampleInputFile&quot;&gt;\n                                &lt;p class&#x3D;&quot;help-block&quot;&gt;Example block-level help text here.&lt;&#x2F;p&gt;\n                            &lt;&#x2F;div&gt;\n                            &lt;div class&#x3D;&quot;form-group&quot;&gt;\n                                &lt;label for&#x3D;&quot;exampleInputFile&quot;&gt;生活照&lt;&#x2F;label&gt;\n                                &lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;photos&quot; multiple&gt;\n                                &lt;p class&#x3D;&quot;help-block&quot;&gt;Example block-level help text here.&lt;&#x2F;p&gt;\n                            &lt;&#x2F;div&gt;\n                            &lt;div class&#x3D;&quot;checkbox&quot;&gt;\n                                &lt;label&gt;\n                                    &lt;input type&#x3D;&quot;checkbox&quot;&gt; Check me out\n                                &lt;&#x2F;label&gt;\n                            &lt;&#x2F;div&gt;\n                            &lt;button type&#x3D;&quot;submit&quot; class&#x3D;&quot;btn btn-primary&quot;&gt;提交&lt;&#x2F;button&gt;\n                        &lt;&#x2F;form&gt;\n\n\n\n\n\n\n\n\n&#x2F;**\n * 文件上传测试\n *&#x2F;\n@Slf4j\n@Controller\npublic class FormTestController &#123;\n\n    @GetMapping(&quot;&#x2F;form_layouts&quot;)\n    public String form_layouts()&#123;\n        return &quot;form&#x2F;form_layouts&quot;;\n    &#125;\n\n    &#x2F;**\n     * MultipartFile 自动封装上传过来的文件\n     * @param email\n     * @param username\n     * @param headerImg\n     * @param photos\n     * @return\n     *&#x2F;\n    @PostMapping(&quot;&#x2F;upload&quot;)\n    public String upload(@RequestParam(&quot;email&quot;) String email,\n                         @RequestParam(&quot;username&quot;) String username,\n                         @RequestPart(&quot;headerImg&quot;) MultipartFile headerImg,\n                         @RequestPart(&quot;photos&quot;) MultipartFile[] photos) throws IOException &#123;\n\n        log.info(&quot;上传的信息：email&#x3D;&#123;&#125;，username&#x3D;&#123;&#125;，headerImg&#x3D;&#123;&#125;，photos&#x3D;&#123;&#125;&quot;,\n                email,username,headerImg.getSize(),photos.length);\n\n        if(!headerImg.isEmpty())&#123;\n            &#x2F;&#x2F;保存到文件服务器，OSS服务器\n            String originalFilename &#x3D; headerImg.getOriginalFilename();\n            headerImg.transferTo(new File(&quot;F:\\\\cache\\\\&quot;+originalFilename));\n        &#125;\n\n        if(photos.length &gt; 0)&#123;\n            for (MultipartFile photo : photos) &#123;\n                if(!photo.isEmpty())&#123;\n                    String originalFilename &#x3D; photo.getOriginalFilename();\n                    photo.transferTo(new File(&quot;F:\\\\cache\\\\&quot;+originalFilename));\n                &#125;\n            &#125;\n        &#125;\n\n\n        return &quot;main&quot;;\n    &#125;\n&#125;</code></pre>\n\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211020151334708.png\" alt=\"image-20211020151334708\"></p>\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211020151438492.png\" alt=\"image-20211020151438492\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">spring.servlet.multipart.max-file-size&#x3D;10MB\nspring.servlet.multipart.max-request-size&#x3D;100MB</code></pre>\n\n\n\n<p>debug…doDispatcher打断点 点:提交</p>\n<h2 id=\"3、自动配置原理\"><a href=\"#3、自动配置原理\" class=\"headerlink\" title=\"3、自动配置原理\"></a>3、自动配置原理</h2><p>**文件上传自动配置类-MultipartAutoConfiguration-**<strong>MultipartProperties</strong></p>\n<ul>\n<li><p>自动配置好了 <strong>StandardServletMultipartResolver   【文件上传解析器】</strong></p>\n</li>\n<li><p><strong>原理步骤</strong></p>\n</li>\n<li><ul>\n<li><p><strong>1、checkMultipart: 请求进来使用文件上传解析器判断（</strong>isMultipart<strong>）并封装（</strong>resolveMultipart，<strong>返回</strong>MultipartHttpServletRequest<strong>）文件上传请求</strong></p>\n</li>\n<li><p><img src=\"http://cache.itzy8.top/springboot2/image-20211020153025819.png\" alt=\"image-20211020153025819\"></p>\n</li>\n<li><p><strong>2、参数解析器来解析请求中的文件内容封装成MultipartFile</strong></p>\n</li>\n</ul>\n</li>\n<li><ul>\n<li><strong>3、将request中文件信息封装为一个Map；</strong>MultiValueMap&lt;String, MultipartFile&gt;</li>\n<li><img src=\"http://cache.itzy8.top/springboot2/image-20211020154157042.png\" alt=\"image-20211020154157042\"></li>\n<li><img src=\"http://cache.itzy8.top/springboot2/image-20211020154219974.png\" alt=\"image-20211020154219974\"></li>\n<li><img src=\"http://cache.itzy8.top/springboot2/image-20211020154237092.png\" alt=\"image-20211020154237092\"></li>\n</ul>\n</li>\n</ul>\n<p><strong>transferTo: FileCopyUtils.copy</strong>。实现文件流的拷贝</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@PostMapping(&quot;&#x2F;upload&quot;)\npublic String upload(@RequestParam(&quot;email&quot;) String email,\n                     @RequestParam(&quot;username&quot;) String username,\n                     @RequestPart(&quot;headerImg&quot;) MultipartFile headerImg,\n                     @RequestPart(&quot;photos&quot;) MultipartFile[] photos)</code></pre>\n\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1354552/1605847414866-32b6cc9c-5191-4052-92eb-069d652dfbf9.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_23,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<h1 id=\"8、异常处理-7-1-11-Error-Handling\"><a href=\"#8、异常处理-7-1-11-Error-Handling\" class=\"headerlink\" title=\"8、异常处理(7.1.11.Error Handling)\"></a>8、异常处理(7.1.11.Error Handling)</h1><p><a href=\"https://docs.spring.io/spring-boot/docs/2.3.12.RELEASE/reference/html/spring-boot-features.html#boot-features-spring-mvc-template-engines\">https://docs.spring.io/spring-boot/docs/2.3.12.RELEASE/reference/html/spring-boot-features.html#boot-features-spring-mvc-template-engines</a></p>\n<h2 id=\"1、错误处理\"><a href=\"#1、错误处理\" class=\"headerlink\" title=\"1、错误处理\"></a>1、错误处理</h2><h4 id=\"1、默认规则\"><a href=\"#1、默认规则\" class=\"headerlink\" title=\"1、默认规则\"></a>1、默认规则</h4><ul>\n<li><p>默认情况下，Spring Boot提供<code>/error</code>处理所有错误的映射</p>\n</li>\n<li><p>对于机器客户端postman，它将生成JSON响应，其中包含错误，HTTP状态和异常消息的详细信息。对于浏览器客户端，响应一个“ whitelabel”错误视图，以HTML格式呈现相同的数据</p>\n</li>\n<li><p>postman模拟已登录：</p>\n</li>\n<li><p><img src=\"http://cache.itzy8.top/springboot2/image-20211020155734907.png\" alt=\"image-20211020155734907\"></p>\n</li>\n<li><p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1354552/1606024421363-77083c34-0b0e-4698-bb72-42da351d3944.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_14,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1354552/1606024616835-bc491bf0-c3b1-4ac3-b886-d4ff3c9874ce.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_28,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n</li>\n<li><p><strong>要对其进行自定义，添加</strong><code>**View**</code><strong>解析为</strong><code>**error**``** **</code></p>\n</li>\n<li><p>要完全替换默认行为，可以实现 <code>ErrorController </code>并注册该类型的Bean定义，或添加<code>ErrorAttributes类型的组件</code>以使用现有机制但替换其内容。</p>\n</li>\n<li><p>error&#x2F;下的4xx，5xx页面会被自动解析；</p>\n</li>\n<li><ul>\n<li><p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1354552/1606024592756-d4ab8a6b-ec37-426b-8b39-010463603d57.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_15,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n</li>\n<li><p><img src=\"http://cache.itzy8.top/springboot2/image-20211020162515175.png\" alt=\"image-20211020162515175\"></p>\n</li>\n<li><p>&#96;&#96;&#96;<br>@GetMapping(“&#x2F;basic_table”)<br>public String basic_table() {</p>\n<pre><code>int i = 10/0;// / by zero error\nreturn &quot;table/basic_table&quot;;\n</code></pre>\n<p>}</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">\n#### 2、定制错误处理逻辑\n\n- 自定义错误页\n\n- - error&#x2F;404.html   error&#x2F;5xx.html；有精确的错误状态码页面就&#x3D;&#x3D;匹配精确，没有就找 4xx.html；如果都没有就触发白页&#x3D;&#x3D;\n\n  - ![image-20211020173659945](http:&#x2F;&#x2F;cache.itzy8.top&#x2F;springboot2&#x2F;image-20211020173659945.png)\n\n  - ![image-20211020173723605](http:&#x2F;&#x2F;cache.itzy8.top&#x2F;springboot2&#x2F;image-20211020173723605.png)\n\n  - ![image-20211020173913613](http:&#x2F;&#x2F;cache.itzy8.top&#x2F;springboot2&#x2F;image-20211020173913613.png)\n\n  - &#96;&#96;&#96;java\n    &#x2F;**\n     *\n     * @param a  不带请求参数或者参数类型不对  400；Bad Request  一般都是浏览器的参数没有传递正确\n     * @return\n     *&#x2F;\n    @GetMapping(&quot;&#x2F;basic_table&quot;)\n    public String basic_table(@RequestParam(&quot;a&quot;) int a)&#123;\n    \n        int i &#x3D; 10&#x2F;0;\n        return &quot;table&#x2F;basic_table&quot;;\n    &#125;</code></pre>\n\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211020174631995.png\" alt=\"image-20211020174631995\"></p>\n</li>\n</ul>\n</li>\n<li><p>@ControllerAdvice+@ExceptionHandler处理全局异常；底层是 <strong>ExceptionHandlerExceptionResolver 支持的</strong></p>\n</li>\n<li><pre><code class=\"java\">/**\n * 处理整个web controller的异常\n */\n@Slf4j\n@ControllerAdvice\npublic class GlobalExceptionHandler &#123;\n\n    @ExceptionHandler(&#123;ArithmeticException.class,NullPointerException.class&#125;)  //处理异常\n    public String handleArithException(Exception e)&#123;\n\n        log.error(&quot;异常是：&#123;&#125;&quot;,e);\n        return &quot;login&quot;; //视图地址 or ModelAndView\n    &#125;\n&#125;\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">\n- ![image-20211020184108688](http:&#x2F;&#x2F;cache.itzy8.top&#x2F;springboot2&#x2F;image-20211020184108688.png)\n\n- @ResponseStatus+自定义异常 ；底层是 **ResponseStatusExceptionResolver ，把responsestatus注解的信息底层调用** **response.sendError(statusCode, resolvedReason)；请求就结束了，mav&#x3D;null，tomcat发送的&#x2F;error**\n\n- &#96;&#96;&#96;java\n  @ResponseStatus(value&#x3D; HttpStatus.FORBIDDEN,reason &#x3D; &quot;用户数量太多&quot;)\n  public class UserTooManyException extends RuntimeException &#123;\n  \n      public  UserTooManyException()&#123;\n  \n      &#125;\n      public  UserTooManyException(String message)&#123;\n          super(message);\n      &#125;\n  &#125;\n  \n  \n      @GetMapping(&quot;&#x2F;dynamic_table&quot;)\n      public String dynamic_table(@RequestParam(value&#x3D;&quot;pn&quot;,defaultValue &#x3D; &quot;1&quot;) Integer pn,Model model)&#123;\n          &#x2F;&#x2F;表格内容的遍历\n  &#x2F;&#x2F;        response.sendError\n       List&lt;User&gt; users &#x3D; Arrays.asList(new User(&quot;zhangsan&quot;, &quot;123456&quot;),\n                  new User(&quot;lisi&quot;, &quot;123444&quot;),\n                  new User(&quot;haha&quot;, &quot;aaaaa&quot;),\n                  new User(&quot;hehe &quot;, &quot;aaddd&quot;));\n          model.addAttribute(&quot;users&quot;,users);\n  \n          if(users.size()&gt;3)&#123;\n              throw new UserTooManyException();\n          &#125;</code></pre>\n\n![image-20211020190326375](http://cache.itzy8.top/springboot2/image-20211020190326375.png)\n\n\n\n![image-20211020190400683](http://cache.itzy8.top/springboot2/image-20211020190400683.png)\n</code></pre>\n</li>\n<li><p>Spring底层的异常，如 参数类型转换异常；<strong>DefaultHandlerExceptionResolver 处理框架底层的异常。</strong></p>\n</li>\n<li><p><img src=\"http://cache.itzy8.top/springboot2/image-20211020190726669.png\" alt=\"image-20211020190726669\"></p>\n</li>\n<li><p><img src=\"http://cache.itzy8.top/springboot2/image-20211020191113933.png\" alt=\"image-20211020191113933\"></p>\n</li>\n<li><ul>\n<li>response.sendError(HttpServletResponse.<strong>SC_BAD_REQUEST</strong>, ex.getMessage()); </li>\n<li>tomcat原生错误页：</li>\n</ul>\n</li>\n<li><p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1354552/1606114118010-f4aaf5ee-2747-4402-bc82-08321b2490ed.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_19,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<ul>\n<li><img src=\"http://cache.itzy8.top/springboot2/image-20211020191018306.png\" alt=\"image-20211020191018306\"></li>\n</ul>\n</li>\n<li><p>自定义实现 HandlerExceptionResolver 处理异常；可以作为默认的全局异常处理规则（Ordered.HIGHEST_PRECEDENCE）</p>\n</li>\n<li><ul>\n<li><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1354552/1606114688649-e6502134-88b3-48db-a463-04c23eddedc7.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_16,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F;优先级，数字越小优先级越高 (否则，就被DefaultHandlerExceptionResolver处理了！) 最高，所有错误都成了他！\n@Order(value&#x3D; Ordered.HIGHEST_PRECEDENCE)    \n@Component\npublic class CustomerHandlerExceptionResolver implements HandlerExceptionResolver &#123;\n    @Override\n    public ModelAndView resolveException(HttpServletRequest request,\n                                         HttpServletResponse response,\n                                         Object handler, Exception ex) &#123;\n\n        try &#123;\n            response.sendError(511,&quot;我喜欢的错误&quot;);&#x2F;&#x2F;\n        &#125; catch (IOException e) &#123;\n            e.printStackTrace();\n        &#125;\n        return new ModelAndView();\n    &#125;\n&#125;</code></pre>\n\n<ul>\n<li><strong>ErrorViewResolver</strong>  实现自定义处理异常；</li>\n<li><ul>\n<li>response.sendError 。error请求就会转给controller</li>\n<li>你的异常没有任何人能处理。tomcat底层 response.sendError。error请求就会转给controller</li>\n</ul>\n</li>\n<li><ul>\n<li><strong>basicErrorController 要去的页面地址是</strong> <strong>ErrorViewResolver</strong> 解析出的视图地址 ；</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"3、异常处理自动配置原理\"><a href=\"#3、异常处理自动配置原理\" class=\"headerlink\" title=\"3、异常处理自动配置原理\"></a>3、异常处理自动配置原理</h4><ul>\n<li><p><strong>autoconfig-servlet-error-ErrorMvcAutoConfiguration  自动配置异常处理规则</strong></p>\n</li>\n<li><ul>\n<li><strong>容器中的组件1：类型：DefaultErrorAttributes -&gt;</strong> <strong>id：errorAttributes</strong></li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li><strong>public class</strong> <strong>&#x3D;&#x3D;DefaultErrorAttributes&#x3D;&#x3D;</strong> <strong>implements</strong> <strong>&#x3D;&#x3D;ErrorAttributes, HandlerExceptionResolver&#x3D;&#x3D;</strong></li>\n<li><strong>DefaultErrorAttributes</strong>：定义错误页面中可以&#x3D;&#x3D;包含哪些数据&#x3D;&#x3D;。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1354552/1606044430037-8d599e30-1679-407c-96b7-4df345848fa4.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_28,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></li>\n<li><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1354552/1606044487738-8cb1dcda-08c5-4104-a634-b2468512e60f.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_31,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li><strong>容器中的组件2：&#x3D;&#x3D;类型：BasicErrorController –&gt; id：basicErrorController（json+白页 适配响应）&#x3D;&#x3D;</strong></li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li><strong>处理默认</strong> <strong>&#x2F;error 路径的请求；页面响应</strong> <strong>new</strong> ModelAndView(<strong>“error”</strong>, model)；</li>\n</ul>\n</li>\n<li><p><img src=\"http://cache.itzy8.top/springboot2/image-20211020163218626.png\" alt=\"image-20211020163218626\"></p>\n<ul>\n<li>&#96;&#96;&#96;<br>#server.error.path&#x3D;&#x2F;error<pre class=\"line-numbers language-none\"><code class=\"language-none\">\n    - ![image-20211020163434801](http:&#x2F;&#x2F;cache.itzy8.top&#x2F;springboot2&#x2F;image-20211020163434801.png)\n\n    - **容器中有组件 View**-&gt;**id是error**；&#x3D;&#x3D;（响应默认错误页）&#x3D;&#x3D;\n\n- - - 容器中放组件 **BeanNameViewResolver（视图解析器）；按照返回的视图名作为组件的id去容器中找View对象。**\n\n    - ![image-20211020163913132](http:&#x2F;&#x2F;cache.itzy8.top&#x2F;springboot2&#x2F;image-20211020163913132.png)\n\n      \n\n- - **容器中的组件3：**类型：**DefaultErrorViewResolver -&gt; id：**conventionErrorViewResolver\n\n- - - 如果发生错误，会以HTTP的状态码 作为&#x3D;&#x3D;视图页地址&#x3D;&#x3D;（viewName），找到真正的页面\n    - &#x3D;&#x3D;error&#x2F;404、5xx.html&#x3D;&#x3D;\n\n![image-20211020165114658](http:&#x2F;&#x2F;cache.itzy8.top&#x2F;springboot2&#x2F;image-20211020165114658.png)\n\n如果想要返回页面；就会找error视图【**StaticView**.render()】。(默认是一个白页)\n\n\n\nBasicErrorController :\n\n![img](https:&#x2F;&#x2F;cdn.nlark.com&#x2F;yuque&#x2F;0&#x2F;2020&#x2F;png&#x2F;1354552&#x2F;1606043870164-3770e116-344f-448e-8bff-8f32438edc9a.png?x-oss-process&#x3D;image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_29%2Ctext_YXRndWlndS5jb20g5bCa56GF6LC3%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)写出去json\n\n![img](https:&#x2F;&#x2F;cdn.nlark.com&#x2F;yuque&#x2F;0&#x2F;2020&#x2F;png&#x2F;1354552&#x2F;1606043904074-50b7f088-2d2b-4da5-85e2-0a756da74dca.png?x-oss-process&#x3D;image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_35%2Ctext_YXRndWlndS5jb20g5bCa56GF6LC3%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10) 错误页\n\n\n\n\n\n#### 4、异常处理步骤流程\n\n1、执行目标方法ha.handle()，目标方法运行期间有任何异常都会被catch、而且标志当前请求结束finally：webRequest.requestCompleted()  reqActive&#x3D;false；并且用 **dispatchException封装** \n\n2、进入视图解析流程（页面渲染？） \n\nprocessDispatchResult(processedRequest, response, mappedHandler, **mv**(null), **dispatchException**);\n\ninto\n\n3、**mv** &#x3D; **processHandlerException**；处理handler发生的异常，处理完成返回ModelAndView；\n\n- 1、遍历所有的 **handlerExceptionResolvers，看谁能处理当前异常【****HandlerExceptionResolver处理器异常解析器****】**\n- ![img](https:&#x2F;&#x2F;cdn.nlark.com&#x2F;yuque&#x2F;0&#x2F;2020&#x2F;png&#x2F;1354552&#x2F;1606047252166-ce71c3a1-0e0e-4499-90f4-6d80014ca19f.png?x-oss-process&#x3D;image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_28%2Ctext_YXRndWlndS5jb20g5bCa56GF6LC3%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n- **2、系统默认的  异常解析器；**\n- ![img](https:&#x2F;&#x2F;cdn.nlark.com&#x2F;yuque&#x2F;0&#x2F;2020&#x2F;png&#x2F;1354552&#x2F;1606047109161-c68a46c1-202a-4db1-bbeb-23fcae49bbe9.png?x-oss-process&#x3D;image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_17%2Ctext_YXRndWlndS5jb20g5bCa56GF6LC3%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n- @ExceptionHandler @ResponseStatus ...\n- - **1、DefaultErrorAttributes先来处理异常。把异常信息保存到request域，并且返回null；**\n  - ![image-20211020171418458](http:&#x2F;&#x2F;cache.itzy8.top&#x2F;springboot2&#x2F;image-20211020171418458.png)\n- **2、默认没有任何人能处理异常，所以异常会被抛出**\n- - **1、如果没有任何人能处理，最终底层就会&#x3D;&#x3D;发送 &#x2F;error 请求。会被底层的BasicErrorController处理&#x3D;&#x3D;【servlet规范】**\n  - ![image-20211020172349858](http:&#x2F;&#x2F;cache.itzy8.top&#x2F;springboot2&#x2F;image-20211020172349858.png)\n  - ![image-20211020172413003](http:&#x2F;&#x2F;cache.itzy8.top&#x2F;springboot2&#x2F;image-20211020172413003.png)\n    - **2、解析错误视图；遍历所有的**  **ErrorViewResolver  看谁能解析。**\n- - - ![img](https:&#x2F;&#x2F;cdn.nlark.com&#x2F;yuque&#x2F;0&#x2F;2020&#x2F;png&#x2F;1354552&#x2F;1606047900473-e31c1dc3-7a5f-4f70-97de-5203429781fa.png?x-oss-process&#x3D;image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_14%2Ctext_YXRndWlndS5jb20g5bCa56GF6LC3%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n    - **3、默认的** **DefaultErrorViewResolver ,作用是把响应状态码作为错误页的地址，error&#x2F;500.html** \n- - - **4、模板引擎最终响应这个页面** **error&#x2F;500.html** \n\n\n\n\n\n# 9、Web原生组件注入（Servlet、Filter、Listener）7.4.1\n\n## 1、使用Servlet API\n\nboot入口主程序：@ServletComponentScan(basePackages &#x3D; **&quot;com.atguigu.admin&quot;**) :指定原生Servlet组件都放在哪个包里\n\n\n\n@WebServlet(urlPatterns &#x3D; **&quot;&#x2F;my&quot;**)：效果：直接响应，**没有经过Spring的拦截器？**\n\n@WebFilter(urlPatterns&#x3D;&#123;**&quot;&#x2F;css&#x2F;\\*&quot;**,**&quot;&#x2F;images&#x2F;\\*&quot;**&#125;)                    &#x2F;*:servlet   &#x2F;**:Spring\n\n@WebListener\n\n\n\n\n\n\n\n扩展：DispatchServlet 如何注册进来\n\n- 容器中自动配置了  DispatcherServlet  属性绑定到 WebMvcProperties；对应的配置文件配置项是 **spring.mvc。**\n\n- **通过** **ServletRegistrationBean**&lt;DispatcherServlet&gt; 把 DispatcherServlet  配置进来。\n\n- 默认映射的是 &#x2F; 路径。\n\n- &#96;&#96;&#96;\n  #spring.mvc.servlet.path&#x3D;&#x2F;mvc&#x2F;</code></pre></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1354552/1606284869220-8b63d54b-39c4-40f6-b226-f5f095ef9304.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_32,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<p>Tomcat-Servlet；</p>\n<p>多个Servlet都能处理到同一层路径，精确优选原则</p>\n<p>A： &#x2F;my&#x2F;</p>\n<p>B： &#x2F;my&#x2F;1</p>\n<h2 id=\"2、使用RegistrationBean-推荐\"><a href=\"#2、使用RegistrationBean-推荐\" class=\"headerlink\" title=\"2、使用RegistrationBean(推荐)\"></a>2、使用RegistrationBean(推荐)</h2><p>ServletRegistrationBean<code>, </code>FilterRegistrationBean<code>, and </code>ServletListenerRegistrationBean</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * 1、MyServlet --&gt; &#x2F;my\n * 2、DispatcherServlet --&gt; &#x2F;\n *&#x2F;\n@Configuration(proxyBeanMethods &#x3D; true)&#x2F;&#x2F;保证依赖的组件始终是单实例的!!!\npublic class MyRegistConfig &#123;\n\n    @Bean\n    public ServletRegistrationBean myServlet()&#123;\n        MyServlet myServlet &#x3D; new MyServlet();\n\n        return new ServletRegistrationBean(myServlet,&quot;&#x2F;my&quot;,&quot;&#x2F;my02&quot;);\n    &#125;\n\n\n    @Bean\n    public FilterRegistrationBean myFilter()&#123;\n\n        MyFilter myFilter &#x3D; new MyFilter();\n&#x2F;&#x2F;        return new FilterRegistrationBean(myFilter,myServlet()); &#x2F;&#x2F; 拦截&quot;&#x2F;my&quot;,&quot;&#x2F;my02&quot;     myServlet单实例！！！\n        FilterRegistrationBean filterRegistrationBean &#x3D; new FilterRegistrationBean(myFilter);\n        filterRegistrationBean.setUrlPatterns(Arrays.asList(&quot;&#x2F;my&quot;,&quot;&#x2F;css&#x2F;*&quot;));\n        return filterRegistrationBean;\n    &#125;\n\n    @Bean\n    public ServletListenerRegistrationBean myListener()&#123;\n        MyServletContextListener myServletContextListener &#x3D; new MyServletContextListener();\n        return new ServletListenerRegistrationBean(myServletContextListener);\n    &#125;\n&#125;</code></pre>\n\n\n\n<h1 id=\"10、嵌入式Servlet容器-7-4-3\"><a href=\"#10、嵌入式Servlet容器-7-4-3\" class=\"headerlink\" title=\"10、嵌入式Servlet容器(7.4.3)\"></a>10、嵌入式Servlet容器(7.4.3)</h1><h2 id=\"1、切换嵌入式Servlet容器\"><a href=\"#1、切换嵌入式Servlet容器\" class=\"headerlink\" title=\"1、切换嵌入式Servlet容器\"></a>1、切换嵌入式Servlet容器</h2><ul>\n<li><p>默认支持的webServer</p>\n</li>\n<li><ul>\n<li><code>Tomcat</code>, <code>Jetty</code>, or <code>Undertow</code></li>\n<li><code>ServletWebServerApplicationContext Ioc容器启动寻找ServletWebServerFactory 并引导创建服务器</code></li>\n</ul>\n</li>\n<li><p>切换服务器</p>\n</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1354552/1606280937533-504d0889-b893-4a01-af68-2fc31ffce9fc.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_26,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">    &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;\n    &lt;exclusions&gt;\n        &lt;exclusion&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-tomcat&lt;&#x2F;artifactId&gt;\n        &lt;&#x2F;exclusion&gt;\n    &lt;&#x2F;exclusions&gt;\n&lt;&#x2F;dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-undertow&lt;&#x2F;artifactId&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n\n\n\n\n<ul>\n<li><p>原理</p>\n</li>\n<li><ul>\n<li>SpringBoot应用启动发现当前是Web应用。web场景包-导入tomcat</li>\n<li>web应用会创建一个web版的ioc容器 <code>ServletWebServerApplicationContext</code></li>\n</ul>\n</li>\n<li><ul>\n<li><code>ServletWebServerApplicationContext</code> 启动的时候寻找 <code>ServletWebServerFactory``（Servlet 的web服务器工厂---&gt; Servlet 的web服务器）</code> </li>\n<li>SpringBoot底层默认有很多的WebServer工厂；<code>TomcatServletWebServerFactory</code>, <code>JettyServletWebServerFactory</code>, or <code>UndertowServletWebServerFactory</code></li>\n</ul>\n</li>\n<li><ul>\n<li><code>底层直接会有一个自动配置类。ServletWebServerFactoryAutoConfiguration</code></li>\n<li><code>ServletWebServerFactoryAutoConfiguration导入了ServletWebServerFactoryConfiguration（配置类）</code></li>\n</ul>\n</li>\n<li><ul>\n<li><code>ServletWebServerFactoryConfiguration 配置类 根据动态判断系统中到底导入了那个Web服务器的包。（默认是web-starter导入tomcat包），容器中就有 TomcatServletWebServerFactory</code></li>\n<li><code>TomcatServletWebServerFactory 创建出Tomcat服务器并启动；TomcatWebServer 的构造器拥有初始化方法initialize---this.tomcat.start();</code></li>\n</ul>\n</li>\n<li><ul>\n<li><code>内嵌服务器，就是手动把启动服务器的代码调用（tomcat核心jar包存在）</code></li>\n</ul>\n</li>\n<li><p>&#96;&#96;</p>\n</li>\n</ul>\n<h2 id=\"2、定制Servlet容器-7-4-4\"><a href=\"#2、定制Servlet容器-7-4-4\" class=\"headerlink\" title=\"2、定制Servlet容器 7.4.4\"></a>2、定制Servlet容器 7.4.4</h2><ul>\n<li><p>实现  <strong>WebServerFactoryCustomizer</strong><ConfigurableServletWebServerFactory> </p>\n</li>\n<li><ul>\n<li>把配置文件的值和<code>ServletWebServerFactory 进行绑定</code></li>\n<li><img src=\"http://cache.itzy8.top/springboot2/image-20211020210556675.png\" alt=\"image-20211020210556675\"></li>\n</ul>\n</li>\n<li><p>&#x3D;&#x3D;修改配置文件 <strong>server.xxx</strong>&#x3D;&#x3D;</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#server.servlet.session.timeout&#x3D;60m\n#server.undertow.accesslog.dir&#x3D;&#x2F;tmp</code></pre>\n</li>\n<li><p>直接自定义 <strong>ConfigurableServletWebServerFactory</strong></p>\n</li>\n</ul>\n<p><strong>xxxxxCustomize：定制化器，可以改变xxxx的默认规则</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import org.springframework.boot.web.server.WebServerFactoryCustomizer;\nimport org.springframework.boot.web.servlet.server.ConfigurableServletWebServerFactory;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class CustomizationBean implements WebServerFactoryCustomizer&lt;ConfigurableServletWebServerFactory&gt; &#123;\n\n    @Override\n    public void customize(ConfigurableServletWebServerFactory server) &#123;\n        server.setPort(9000);\n    &#125;\n\n&#125;</code></pre>\n\n\n\n<h1 id=\"11、定制化原理【-x3D-x3D-Boot精髓！-x3D-x3D-】\"><a href=\"#11、定制化原理【-x3D-x3D-Boot精髓！-x3D-x3D-】\" class=\"headerlink\" title=\"11、定制化原理【&#x3D;&#x3D;Boot精髓！&#x3D;&#x3D;】\"></a>11、定制化原理【&#x3D;&#x3D;Boot精髓！&#x3D;&#x3D;】</h1><h2 id=\"1、定制化的常见方式\"><a href=\"#1、定制化的常见方式\" class=\"headerlink\" title=\"1、定制化的常见方式\"></a>1、定制化的常见方式</h2><ul>\n<li><p>修&#x3D;&#x3D;改配置文件&#x3D;&#x3D;；</p>\n</li>\n<li><p><strong>xxxxxCustomizer；</strong></p>\n</li>\n<li><p><strong>编&#x3D;&#x3D;写自定义的配置类   xxxConfiguration；+ @Bean&#x3D;&#x3D;替换、增加(视图解析器) 容器中默认组件；</strong> </p>\n</li>\n<li><p>&#x3D;&#x3D;<strong>Web应用 编写一个配置类实现 WebMvcConfigurer 即可定制化web功能；+ @Bean给容器中再扩展一些组件</strong>&#x3D;&#x3D;</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * 1、编写一个拦截器实现HandlerInterceptor接口\n * 2、拦截器注册到容器中（实现WebMvcConfigurer的addInterceptors）\n * 3、指定拦截规则【如果是拦截所有，静态资源也会被拦截】\n *\n * @EnableWebMvc:全面接管\n *      1、静态资源？视图解析器？欢迎页.....全部失效!\n *&#x2F;\n&#x2F;&#x2F;@EnableWebMvc\n@Configuration\npublic class AdminWebConfig implements WebMvcConfigurer&#123;\n\n\n    &#x2F;**\n     * Filter、Interceptor 几乎拥有相同的功能？\n     * 1、Filter是Servlet定义的原生组件。好处，脱离Spring应用也能使用\n     * 2、Interceptor是Spring定义的接口。可以使用Spring的自动装配等功能\n     *\n     *&#x2F;\n&#x2F;&#x2F;    @Autowired\n&#x2F;&#x2F;    RedisUrlCountInterceptor redisUrlCountInterceptor;\n\n    &#x2F;**\n     * 定义静态资源行为\n     * @param registry\n     *&#x2F;\n&#x2F;&#x2F;    @Override\n&#x2F;&#x2F;    public void addResourceHandlers(ResourceHandlerRegistry registry) &#123;\n&#x2F;&#x2F;        &#x2F;**\n&#x2F;&#x2F;         * 访问  &#x2F;aa&#x2F;** 所有请求都去 classpath:&#x2F;static&#x2F; 下面进行匹配\n&#x2F;&#x2F;         *&#x2F;\n&#x2F;&#x2F;        registry.addResourceHandler(&quot;&#x2F;aa&#x2F;**&quot;)\n&#x2F;&#x2F;                .addResourceLocations(&quot;classpath:&#x2F;static&#x2F;&quot;); &#x2F;&#x2F;前缀 与 路径目录\n&#x2F;&#x2F;    &#125;\n\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) &#123;\n        registry.addInterceptor(new LoginInterceptor())\n                .addPathPatterns(&quot;&#x2F;**&quot;)  &#x2F;&#x2F;所有请求都被拦截包括静态资源\n                .excludePathPatterns(&quot;&#x2F;&quot;,&quot;&#x2F;login&quot;,&quot;&#x2F;css&#x2F;**&quot;,&quot;&#x2F;fonts&#x2F;**&quot;,&quot;&#x2F;images&#x2F;**&quot;,\n                        &quot;&#x2F;js&#x2F;**&quot;,&quot;&#x2F;aa&#x2F;**&quot;); &#x2F;&#x2F;放行的请求\n\n&#x2F;&#x2F;        registry.addInterceptor(redisUrlCountInterceptor)\n&#x2F;&#x2F;                .addPathPatterns(&quot;&#x2F;**&quot;)\n&#x2F;&#x2F;                .excludePathPatterns(&quot;&#x2F;&quot;,&quot;&#x2F;login&quot;,&quot;&#x2F;css&#x2F;**&quot;,&quot;&#x2F;fonts&#x2F;**&quot;,&quot;&#x2F;images&#x2F;**&quot;,\n&#x2F;&#x2F;                        &quot;&#x2F;js&#x2F;**&quot;,&quot;&#x2F;aa&#x2F;**&quot;);\n    &#125;\n\n&#x2F;&#x2F;    @Bean\n&#x2F;&#x2F;    public WebMvcRegistrations webMvcRegistrations()&#123;\n&#x2F;&#x2F;        return new WebMvcRegistrations()&#123;\n&#x2F;&#x2F;            @Override\n&#x2F;&#x2F;            public RequestMappingHandlerMapping getRequestMappingHandlerMapping() &#123;\n&#x2F;&#x2F;                return null;\n&#x2F;&#x2F;            &#125;\n&#x2F;&#x2F;        &#125;;\n&#x2F;&#x2F;    &#125;\n\n    &#x2F;&#x2F;\n&#125;</code></pre>\n\n<ul>\n<li>过于底层……:</li>\n<li><img src=\"http://cache.itzy8.top/springboot2/image-20211020211857837.png\" alt=\"image-20211020211857837\"></li>\n<li>@EnableWebMvc + WebMvcConfigurer —— @Bean  可以全面接管SpringMVC，所有规则全部自己重新配置； 实现定制和扩展功能</li>\n<li><ul>\n<li>原理</li>\n<li>1、WebMvcAutoConfiguration  默认的SpringMVC的自动配置功能类。静态资源、欢迎页…..</li>\n</ul>\n</li>\n<li><ul>\n<li>2、一旦使用 @EnableWebMvc，会 @Import(DelegatingWebMvcConfiguration.<strong>class</strong>)</li>\n<li>3、<strong>DelegatingWebMvcConfiguration</strong> 的 作用，只保证SpringMVC<strong>最基本</strong>的使用</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>把所有系统中的 WebMvcConfigurer s 拿过来。所有功能的定制都是这些 WebMvcConfigurer s 合起来一起生效</li>\n<li>自动配置了一些非常底层的组件。<strong>RequestMappingHandlerMapping</strong>、这些组件依赖的组件都是从容器中获取</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li><strong>public class</strong> DelegatingWebMvcConfiguration <strong>extends</strong> <strong>WebMvcConfigurationSupport</strong>【有】</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li>4、<strong>WebMvcAutoConfiguration</strong> 里面的配置要能生效 必须：  【无】@ConditionalOn&#x3D;&#x3D;Missing&#x3D;&#x3D;Bean(<strong>WebMvcConfigurationSupport</strong>.<strong>class</strong>)</li>\n<li>5、@EnableWebMvc  导致了 <strong>WebMvcAutoConfiguration  没有生效。</strong>【全面接管】</li>\n</ul>\n</li>\n<li>… …</li>\n</ul>\n<h2 id=\"2、原理分析-x3D-x3D-套路-x3D-x3D\"><a href=\"#2、原理分析-x3D-x3D-套路-x3D-x3D\" class=\"headerlink\" title=\"2、原理分析&#x3D;&#x3D;套路&#x3D;&#x3D;\"></a>2、原理分析&#x3D;&#x3D;套路&#x3D;&#x3D;</h2><p><strong>&#x3D;&#x3D;场景starter&#x3D;&#x3D; - xxxxAutoConfiguration - @Bean…导入xxx组件 - 绑定xxxProperties – &#x3D;&#x3D;绑定配置文件项&#x3D;&#x3D;</strong> </p>\n<h1 id=\"06、数据访问\"><a href=\"#06、数据访问\" class=\"headerlink\" title=\"06、数据访问\"></a>06、数据访问</h1><h1 id=\"1、SQL\"><a href=\"#1、SQL\" class=\"headerlink\" title=\"1、SQL\"></a>1、SQL</h1><h2 id=\"1、数据源的自动配置-HikariDataSource\"><a href=\"#1、数据源的自动配置-HikariDataSource\" class=\"headerlink\" title=\"1、数据源的自动配置-HikariDataSource\"></a>1、数据源的自动配置-<strong>HikariDataSource</strong></h2><h3 id=\"1、导入JDBC场景\"><a href=\"#1、导入JDBC场景\" class=\"headerlink\" title=\"1、导入JDBC场景\"></a>1、导入JDBC场景</h3><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-data-jdbc&lt;&#x2F;artifactId&gt;\n&lt;&#x2F;dependency&gt;\n</code></pre>\n\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1354552/1606366100317-5e0199fa-6709-4d32-bce3-bb262e2e5e6a.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_20,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<p>数据库驱动？</p>\n<p>为什么导入JDBC场景，官方不导入驱动？官方不知道我们接下要操作什么数据库。</p>\n<p>数据库版本和驱动版本对应</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">默认版本：&lt;mysql.version&gt;8.0.22&lt;&#x2F;mysql.version&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;\n&lt;!--            &lt;version&gt;5.1.49&lt;&#x2F;version&gt;--&gt;\n        &lt;&#x2F;dependency&gt;\n想要修改版本\n1、直接依赖引入具体版本（maven的就近依赖原则）\n2、重新声明版本（maven的属性的就近优先原则）\n    &lt;properties&gt;\n        &lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;\n        &lt;mysql.version&gt;5.1.49&lt;&#x2F;mysql.version&gt;\n    &lt;&#x2F;properties&gt;</code></pre>\n\n<h3 id=\"Mysql5-5命令行修改密码-5-5初始无密码，直接Enter\"><a href=\"#Mysql5-5命令行修改密码-5-5初始无密码，直接Enter\" class=\"headerlink\" title=\"Mysql5.5命令行修改密码 5.5初始无密码，直接Enter\"></a><a href=\"https://www.cnblogs.com/oukunqing/p/5753445.html\">Mysql5.5命令行修改密码</a> 5.5初始无密码，直接Enter</h3><p>mysql -uroot -p</p>\n<p>use mysql;</p>\n<p>update user set password&#x3D;password(“123456”) where user&#x3D;”root”;</p>\n<p>flush privileges;</p>\n<p>quit</p>\n<p>5.7后随机默认密码在&#x2F;data .err 里</p>\n<p>sqlyog</p>\n<h3 id=\"2、分析自动配置\"><a href=\"#2、分析自动配置\" class=\"headerlink\" title=\"2、分析自动配置\"></a>2、分析自动配置</h3><h4 id=\"1、自动配置的类\"><a href=\"#1、自动配置的类\" class=\"headerlink\" title=\"1、自动配置的类\"></a>1、自动配置的类</h4><ul>\n<li><p>DataSourceAutoConfiguration ： 数据源的自动配置</p>\n</li>\n<li><ul>\n<li>修改数据源相关的配置：<strong>spring.datasource</strong></li>\n<li><strong>数据库连接池的配置，是自己容器中没有DataSource才自动配置的</strong></li>\n</ul>\n</li>\n<li><ul>\n<li>底层配置好的连接池是：<strong>HikariDataSource</strong></li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Configuration(proxyBeanMethods &#x3D; false)\n@Conditional(PooledDataSourceCondition.class)\n@ConditionalOnMissingBean(&#123; DataSource.class, XADataSource.class &#125;)\n@Import(&#123; DataSourceConfiguration.Hikari.class, DataSourceConfiguration.Tomcat.class,\n\t\tDataSourceConfiguration.Dbcp2.class, DataSourceConfiguration.OracleUcp.class,\n\t\tDataSourceConfiguration.Generic.class, DataSourceJmxConfiguration.class &#125;)\nprotected static class PooledDataSourceConfiguration</code></pre>\n\n\n\n<ul>\n<li><p>DataSourceTransactionManagerAutoConfiguration： 事务管理器的自动配置</p>\n</li>\n<li><p>JdbcTemplateAutoConfiguration： <strong>JdbcTemplate的自动配置，可以来对数据库进行crud</strong></p>\n</li>\n<li><ul>\n<li>可以修改这个配置项@ConfigurationProperties(prefix &#x3D; <strong>“spring.jdbc”</strong>) 来修改JdbcTemplate</li>\n<li>@Bean@Primary    JdbcTemplate；容器中有这个组件</li>\n</ul>\n</li>\n<li><p>JndiDataSourceAutoConfiguration： jndi的自动配置</p>\n</li>\n<li><p>XADataSourceAutoConfiguration： 分布式事务相关的</p>\n</li>\n</ul>\n<h3 id=\"3、修改配置项\"><a href=\"#3、修改配置项\" class=\"headerlink\" title=\"3、修改配置项\"></a>3、修改配置项</h3><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">spring:\n  datasource:\n    url: jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;db_account\n    username: root\n    password: 123456\n    driver-class-name: com.mysql.jdbc.Driver</code></pre>\n\n\n\n\n\n<h3 id=\"4、测试\"><a href=\"#4、测试\" class=\"headerlink\" title=\"4、测试\"></a>4、测试</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Slf4j\n@SpringBootTest\nclass Boot05WebAdminApplicationTests &#123;\n\n    @Autowired\n    JdbcTemplate jdbcTemplate;\n\n\n    @Test\n    void contextLoads() &#123;\n\n&#x2F;&#x2F;        jdbcTemplate.queryForObject(&quot;select * from account_tbl&quot;)\n&#x2F;&#x2F;        jdbcTemplate.queryForList(&quot;select * from account_tbl&quot;,)\n        Long aLong &#x3D; jdbcTemplate.queryForObject(&quot;select count(*) from account_tbl&quot;, Long.class);\n        log.info(&quot;记录总数：&#123;&#125;&quot;,aLong);\n    &#125;\n\n&#125;</code></pre>\n\n<h2 id=\"2、使用Druid数据源\"><a href=\"#2、使用Druid数据源\" class=\"headerlink\" title=\"2、使用Druid数据源\"></a>2、使用Druid数据源</h2><h3 id=\"1、druid官方github地址\"><a href=\"#1、druid官方github地址\" class=\"headerlink\" title=\"1、druid官方github地址\"></a>1、druid官方github地址</h3><p><a href=\"https://github.com/alibaba/druid\">https://github.com/alibaba/druid</a></p>\n<p>整合第三方技术的两种方式</p>\n<ul>\n<li>自定义</li>\n<li>找starter</li>\n</ul>\n<h3 id=\"2、自定义方式\"><a href=\"#2、自定义方式\" class=\"headerlink\" title=\"2、自定义方式\"></a>2、自定义方式</h3><h4 id=\"1、创建数据源\"><a href=\"#1、创建数据源\" class=\"headerlink\" title=\"1、创建数据源\"></a>1、创建数据源</h4><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">        &lt;dependency&gt;\n            &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;druid&lt;&#x2F;artifactId&gt;\n            &lt;version&gt;1.1.17&lt;&#x2F;version&gt;\n        &lt;&#x2F;dependency&gt;\n\n&lt;bean id&#x3D;&quot;dataSource&quot; class&#x3D;&quot;com.alibaba.druid.pool.DruidDataSource&quot;\n\t\tdestroy-method&#x3D;&quot;close&quot;&gt;\n\t\t&lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;$&#123;jdbc.url&#125;&quot; &#x2F;&gt;\n\t\t&lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;$&#123;jdbc.username&#125;&quot; &#x2F;&gt;\n\t\t&lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;$&#123;jdbc.password&#125;&quot; &#x2F;&gt;\n\t\t&lt;property name&#x3D;&quot;maxActive&quot; value&#x3D;&quot;20&quot; &#x2F;&gt;\n\t\t&lt;property name&#x3D;&quot;initialSize&quot; value&#x3D;&quot;1&quot; &#x2F;&gt;\n\t\t&lt;property name&#x3D;&quot;maxWait&quot; value&#x3D;&quot;60000&quot; &#x2F;&gt;\n\t\t&lt;property name&#x3D;&quot;minIdle&quot; value&#x3D;&quot;1&quot; &#x2F;&gt;\n\t\t&lt;property name&#x3D;&quot;timeBetweenEvictionRunsMillis&quot; value&#x3D;&quot;60000&quot; &#x2F;&gt;\n\t\t&lt;property name&#x3D;&quot;minEvictableIdleTimeMillis&quot; value&#x3D;&quot;300000&quot; &#x2F;&gt;\n\t\t&lt;property name&#x3D;&quot;testWhileIdle&quot; value&#x3D;&quot;true&quot; &#x2F;&gt;\n\t\t&lt;property name&#x3D;&quot;testOnBorrow&quot; value&#x3D;&quot;false&quot; &#x2F;&gt;\n\t\t&lt;property name&#x3D;&quot;testOnReturn&quot; value&#x3D;&quot;false&quot; &#x2F;&gt;\n\t\t&lt;property name&#x3D;&quot;poolPreparedStatements&quot; value&#x3D;&quot;true&quot; &#x2F;&gt;\n\t\t&lt;property name&#x3D;&quot;maxOpenPreparedStatements&quot; value&#x3D;&quot;20&quot; &#x2F;&gt;</code></pre>\n\n\n\n<h4 id=\"2、StatViewServlet\"><a href=\"#2、StatViewServlet\" class=\"headerlink\" title=\"2、StatViewServlet\"></a>2、StatViewServlet</h4><p>StatViewServlet的用途包括：</p>\n<ul>\n<li>提供监控信息展示的html页面</li>\n<li>提供监控信息的JSON API</li>\n</ul>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;servlet&gt;\n\t&lt;servlet-name&gt;DruidStatView&lt;&#x2F;servlet-name&gt;\n\t&lt;servlet-class&gt;com.alibaba.druid.support.http.StatViewServlet&lt;&#x2F;servlet-class&gt;\n&lt;&#x2F;servlet&gt;\n&lt;servlet-mapping&gt;\n\t&lt;servlet-name&gt;DruidStatView&lt;&#x2F;servlet-name&gt;\n\t&lt;url-pattern&gt;&#x2F;druid&#x2F;*&lt;&#x2F;url-pattern&gt;\n&lt;&#x2F;servlet-mapping&gt;</code></pre>\n\n\n\n<h4 id=\"3、StatFilter\"><a href=\"#3、StatFilter\" class=\"headerlink\" title=\"3、StatFilter\"></a>3、StatFilter</h4><p>用于统计监控信息；如SQL监控、URI监控</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">需要给数据源中配置如下属性；可以允许多个filter，多个用，分割；如：\n\n&lt;property name&#x3D;&quot;filters&quot; value&#x3D;&quot;stat,slf4j&quot; &#x2F;&gt;</code></pre>\n\n<p>系统中所有filter：</p>\n<table>\n<thead>\n<tr>\n<th>别名</th>\n<th>Filter类名</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>default</td>\n<td>com.alibaba.druid.filter.stat.StatFilter</td>\n</tr>\n<tr>\n<td>stat</td>\n<td>com.alibaba.druid.filter.stat.StatFilter</td>\n</tr>\n<tr>\n<td>mergeStat</td>\n<td>com.alibaba.druid.filter.stat.MergeStatFilter</td>\n</tr>\n<tr>\n<td>encoding</td>\n<td>com.alibaba.druid.filter.encoding.EncodingConvertFilter</td>\n</tr>\n<tr>\n<td>log4j</td>\n<td>com.alibaba.druid.filter.logging.Log4jFilter</td>\n</tr>\n<tr>\n<td>log4j2</td>\n<td>com.alibaba.druid.filter.logging.Log4j2Filter</td>\n</tr>\n<tr>\n<td>slf4j</td>\n<td>com.alibaba.druid.filter.logging.Slf4jLogFilter</td>\n</tr>\n<tr>\n<td>commonlogging</td>\n<td>com.alibaba.druid.filter.logging.CommonsLogFilter</td>\n</tr>\n</tbody></table>\n<p><strong>慢SQL记录配置</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;bean id&#x3D;&quot;stat-filter&quot; class&#x3D;&quot;com.alibaba.druid.filter.stat.StatFilter&quot;&gt;\n    &lt;property name&#x3D;&quot;slowSqlMillis&quot; value&#x3D;&quot;10000&quot; &#x2F;&gt;\n    &lt;property name&#x3D;&quot;logSlowSql&quot; value&#x3D;&quot;true&quot; &#x2F;&gt;\n&lt;&#x2F;bean&gt;\n\n使用 slowSqlMillis 定义慢SQL的时长</code></pre>\n\n<h3 id=\"3、使用官方starter方式\"><a href=\"#3、使用官方starter方式\" class=\"headerlink\" title=\"3、使用官方starter方式\"></a>3、使用官方starter方式</h3><h4 id=\"1、引入druid-starter\"><a href=\"#1、引入druid-starter\" class=\"headerlink\" title=\"1、引入druid-starter\"></a>1、引入druid-starter</h4><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependency&gt;\n    &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;druid-spring-boot-starter&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;1.1.17&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n\n\n<h4 id=\"2、分析自动配置-1\"><a href=\"#2、分析自动配置-1\" class=\"headerlink\" title=\"2、分析自动配置\"></a>2、分析自动配置</h4><ul>\n<li><p>扩展配置项 <strong>spring.datasource.druid</strong></p>\n</li>\n<li><p>DruidSpringAopConfiguration.<strong>class</strong>,   监控SpringBean的；配置项：<strong>spring.datasource.druid.aop-patterns</strong></p>\n</li>\n<li><p>DruidStatViewServletConfiguration.<strong>class</strong>, 监控页的配置：<strong>spring.datasource.druid.stat-view-servlet；默认开启</strong></p>\n</li>\n<li><p>DruidWebStatFilterConfiguration.<strong>class</strong>, web监控配置；<strong>spring.datasource.druid.web-stat-filter；默认开启</strong></p>\n</li>\n<li><p>DruidFilterConfiguration.<strong>class</strong>}) 所有Druid自己filter的配置</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">private static final String FILTER_STAT_PREFIX &#x3D; &quot;spring.datasource.druid.filter.stat&quot;;\nprivate static final String FILTER_CONFIG_PREFIX &#x3D; &quot;spring.datasource.druid.filter.config&quot;;\nprivate static final String FILTER_ENCODING_PREFIX &#x3D; &quot;spring.datasource.druid.filter.encoding&quot;;\nprivate static final String FILTER_SLF4J_PREFIX &#x3D; &quot;spring.datasource.druid.filter.slf4j&quot;;\nprivate static final String FILTER_LOG4J_PREFIX &#x3D; &quot;spring.datasource.druid.filter.log4j&quot;;\nprivate static final String FILTER_LOG4J2_PREFIX &#x3D; &quot;spring.datasource.druid.filter.log4j2&quot;;\nprivate static final String FILTER_COMMONS_LOG_PREFIX &#x3D; &quot;spring.datasource.druid.filter.commons-log&quot;;\nprivate static final String FILTER_WALL_PREFIX &#x3D; &quot;spring.datasource.druid.filter.wall&quot;;</code></pre>\n\n\n\n<h4 id=\"3、配置示例\"><a href=\"#3、配置示例\" class=\"headerlink\" title=\"3、配置示例\"></a>3、配置示例</h4><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">spring:\n  datasource:\n    url: jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;db_account\n    username: root\n    password: 123456\n    driver-class-name: com.mysql.jdbc.Driver\n\n    druid:\n      aop-patterns: com.atguigu.admin.*  #监控SpringBean\n      filters: stat,wall     # 底层开启功能，stat（sql监控），wall（防火墙）\n\n      stat-view-servlet:   # 配置监控页功能\n        enabled: true\n        login-username: admin\n        login-password: admin\n        resetEnable: false\n\n      web-stat-filter:  # 监控web\n        enabled: true\n        urlPattern: &#x2F;*\n        exclusions: &#39;*.js,*.gif,*.jpg,*.png,*.css,*.ico,&#x2F;druid&#x2F;*&#39;\n\n\n      filter:\n        stat:    # 对上面filters里面的stat的详细配置\n          slow-sql-millis: 1000\n          logSlowSql: true\n          enabled: true\n        wall:\n          enabled: true\n          config:\n            drop-table-allow: false</code></pre>\n\n<p>SpringBoot配置示例</p>\n<p><a href=\"https://github.com/alibaba/druid/tree/master/druid-spring-boot-starter\">https://github.com/alibaba/druid/tree/master/druid-spring-boot-starter</a></p>\n<p>配置项列表<a href=\"https://github.com/alibaba/druid/wiki/DruidDataSource%E9%85%8D%E7%BD%AE%E5%B1%9E%E6%80%A7%E5%88%97%E8%A1%A8\">https://github.com/alibaba/druid/wiki/DruidDataSource%E9%85%8D%E7%BD%AE%E5%B1%9E%E6%80%A7%E5%88%97%E8%A1%A8</a></p>\n<h2 id=\"3、整合MyBatis操作\"><a href=\"#3、整合MyBatis操作\" class=\"headerlink\" title=\"3、整合MyBatis操作\"></a>3、整合MyBatis操作</h2><p><a href=\"https://github.com/mybatis\">https://github.com/mybatis</a></p>\n<p>starter</p>\n<p>SpringBoot官方的Starter：spring-boot-starter-*</p>\n<p>第三方的： *-spring-boot-starter</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependency&gt;\n    &lt;groupId&gt;org.mybatis.spring.boot&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;mybatis-spring-boot-starter&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;2.1.4&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1354552/1606704096118-53001250-a04a-4210-80ee-6de6a370be2e.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_20,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<h3 id=\"1、配置模式\"><a href=\"#1、配置模式\" class=\"headerlink\" title=\"1、配置模式\"></a>1、配置模式</h3><ul>\n<li><p>全局配置文件</p>\n</li>\n<li><p>SqlSessionFactory: 自动配置好了</p>\n</li>\n<li><p>SqlSession：自动配置了 <strong>SqlSessionTemplate 组合了SqlSession</strong></p>\n</li>\n<li><p>@Import(<strong>AutoConfiguredMapperScannerRegistrar</strong>.<strong>class</strong>）；</p>\n</li>\n<li><p>Mapper： 只要我们写的操作MyBatis的接口标准了 <strong>@Mapper 就会被自动扫描进来</strong></p>\n</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@EnableConfigurationProperties(MybatisProperties.class) ： MyBatis配置项绑定类。\n@AutoConfigureAfter(&#123; DataSourceAutoConfiguration.class, MybatisLanguageDriverAutoConfiguration.class &#125;)\npublic class MybatisAutoConfiguration&#123;&#125;\n\n@ConfigurationProperties(prefix &#x3D; &quot;mybatis&quot;)\npublic class MybatisProperties</code></pre>\n\n<p>可以修改配置文件中 mybatis 开始的所有；</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"># 配置mybatis规则\nmybatis:\n  config-location: classpath:mybatis&#x2F;mybatis-config.xml  #全局配置文件位置\n  mapper-locations: classpath:mybatis&#x2F;mapper&#x2F;*.xml  #sql映射文件位置\n  \nMapper接口---&gt;绑定Xml\n&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;\n&lt;!DOCTYPE mapper\n        PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Mapper 3.0&#x2F;&#x2F;EN&quot;\n        &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-mapper.dtd&quot;&gt;\n&lt;mapper namespace&#x3D;&quot;com.atguigu.admin.mapper.AccountMapper&quot;&gt;\n&lt;!--    public Account getAcct(Long id); --&gt;\n    &lt;select id&#x3D;&quot;getAcct&quot; resultType&#x3D;&quot;com.atguigu.admin.bean.Account&quot;&gt;\n        select * from  account_tbl where  id&#x3D;#&#123;id&#125;\n    &lt;&#x2F;select&gt;\n&lt;&#x2F;mapper&gt;</code></pre>\n\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211021153258859.png\" alt=\"image-20211021153258859\"></p>\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211021153327577.png\" alt=\"image-20211021153327577\"></p>\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211021153404626.png\" alt=\"image-20211021153404626\"></p>\n<p>配置 <strong>private</strong> Configuration <strong>configuration</strong>; mybatis.<strong>configuration下面的所有，就是相当于改mybatis全局配置文件中的值</strong></p>\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211021153624830.png\" alt=\"image-20211021153624830\"></p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"># 配置mybatis规则\nmybatis:\n#  config-location: classpath:mybatis&#x2F;mybatis-config.xml\n  mapper-locations: classpath:mybatis&#x2F;mapper&#x2F;*.xml\n  configuration:\n    map-underscore-to-camel-case: true\n    \n 可以不写xml全局配置文件，所有全局配置文件的配置都放在configuration配置项中即可</code></pre>\n\n\n\n\n\n<ul>\n<li><p>导入mybatis官方starter</p>\n</li>\n<li><p>编写mapper接口。标准@Mapper注解</p>\n</li>\n<li><p>编写sql映射文件并绑定mapper接口</p>\n</li>\n<li><p>在application.yaml中指定Mapper配置文件的位置，以及指定全局配置文件的信息 （建议；<strong>配置在mybatis.configuration</strong>）</p>\n</li>\n</ul>\n<h3 id=\"2、注解模式\"><a href=\"#2、注解模式\" class=\"headerlink\" title=\"2、注解模式\"></a>2、注解模式</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Mapper\npublic interface CityMapper &#123;\n\n    @Select(&quot;select * from city where id&#x3D;#&#123;id&#125;&quot;)\n    public City getById(Long id);\n\n    public void insert(City city);\n\n&#125;</code></pre>\n\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211021155046506.png\" alt=\"image-20211021155046506\"></p>\n<h3 id=\"3、混合模式\"><a href=\"#3、混合模式\" class=\"headerlink\" title=\"3、混合模式\"></a>3、混合模式</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Mapper\npublic interface CityMapper &#123;\n\n    @Select(&quot;select * from city where id&#x3D;#&#123;id&#125;&quot;)\n    public City getById(Long id);\n\n    public void insert(City city);\n\n&#125;</code></pre>\n\n<p>cityMapper.xml</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;\n&lt;!DOCTYPE mapper\n        PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Mapper 3.0&#x2F;&#x2F;EN&quot;\n        &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-mapper.dtd&quot;&gt;\n&lt;mapper namespace&#x3D;&quot;com.alex.admin.mapper.CityMapper&quot;&gt;\n\n&lt;!--    public void insert(City city);--&gt;\n    &lt;insert id&#x3D;&quot;insert&quot; useGeneratedKeys&#x3D;&quot;true&quot; keyProperty&#x3D;&quot;id&quot;&gt;\n        insert into  city(&#96;name&#96;,&#96;state&#96;,&#96;country&#96;) values(#&#123;name&#125;,#&#123;state&#125;,#&#123;country&#125;)\n    &lt;&#x2F;insert&gt;\n\n&lt;&#x2F;mapper&gt;</code></pre>\n\n<p>改为写Mapper：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Mapper\npublic interface CityMapper &#123;\n\n    @Select(&quot;select * from city where id&#x3D;#&#123;id&#125;&quot;)\n    public City getById(Long id);\n\n\n    @Insert(&quot;insert into  city(&#96;name&#96;,&#96;state&#96;,&#96;country&#96;) values(#&#123;name&#125;,#&#123;state&#125;,#&#123;country&#125;)&quot;)\n    @Options(useGeneratedKeys &#x3D; true,keyProperty &#x3D; &quot;id&quot;)\n    public void insert(City city);\n\n&#125;</code></pre>\n\n\n\n<p>登录,copy  JSESSIONID    或放行&#x2F;city</p>\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211021155632084.png\" alt=\"image-20211021155632084\"></p>\n<p><strong>最佳实战：</strong></p>\n<ul>\n<li><p>引入mybatis-starter</p>\n</li>\n<li><p><strong>配置application.yaml中，指定mapper-location位置即可</strong></p>\n</li>\n<li><p>编写Mapper接口并标注@Mapper注解</p>\n</li>\n<li><p>简单方法直接注解方式</p>\n</li>\n<li><p>复杂方法编写mapper.xml进行绑定映射</p>\n</li>\n<li><p><em>主程序@MapperScan(“com.atguigu.admin.mapper”) 简化，其他的接口就可以不用标注@Mapper注解</em></p>\n</li>\n</ul>\n<h2 id=\"4、整合-MyBatis-Plus-完成CRUD\"><a href=\"#4、整合-MyBatis-Plus-完成CRUD\" class=\"headerlink\" title=\"4、整合 MyBatis-Plus 完成CRUD\"></a>4、整合 MyBatis-Plus 完成CRUD</h2><h3 id=\"1、什么是MyBatis-Plus\"><a href=\"#1、什么是MyBatis-Plus\" class=\"headerlink\" title=\"1、什么是MyBatis-Plus\"></a>1、什么是MyBatis-Plus</h3><p><a href=\"https://github.com/baomidou/mybatis-plus\">MyBatis-Plus</a>（简称 MP）是一个 <a href=\"http://www.mybatis.org/mybatis-3/\">MyBatis</a> 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p>\n<p><a href=\"https://baomidou.com/\">mybatis plus 官网</a></p>\n<p>建议安装 <strong>MybatisX</strong> 插件 </p>\n<h3 id=\"2、整合MyBatis-Plus\"><a href=\"#2、整合MyBatis-Plus\" class=\"headerlink\" title=\"2、整合MyBatis-Plus\"></a>2、整合MyBatis-Plus</h3><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependency&gt;\n    &lt;groupId&gt;com.baomidou&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;mybatis-plus-boot-starter&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;3.4.1&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<p>自动配置</p>\n<ul>\n<li><p>MybatisPlusAutoConfiguration 配置类，MybatisPlusProperties 配置项绑定。**&#x3D;&#x3D;mybatis-plus：&#x3D;&#x3D;xxx 就是对**<strong>mybatis-plus的定制</strong></p>\n</li>\n<li><p><strong>SqlSessionFactory 自动配置好。底层是容器中默认的数据源</strong></p>\n</li>\n<li><p>*<em>mapperLocations 自动配置好的。有默认值。classpath*:&#x2F;mapper&#x2F;*</em>&#x2F;*.xml；任意包的类路径下的所有mapper文件夹下任意路径下的所有xml都是sql映射文件。  &#x3D;&#x3D;建议以后sql映射文件，放在 mapper下&#x3D;&#x3D;</p>\n</li>\n<li><p><strong>容器中也自动配置好了</strong> <strong>SqlSessionTemplate</strong></p>\n</li>\n<li><p><strong>@Mapper 标注的接口也会被自动扫描；建议直接</strong> &#x3D;&#x3D;@MapperScan(“com.atguigu.admin.mapper”)&#x3D;&#x3D;批量扫描就行</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@AllArgsConstructor\n@NoArgsConstructor\n@Data\n@TableName(&quot;user_tbl&quot;)\npublic class User &#123;\n\n    &#x2F;**\n     * 所有属性都应该在数据库中\n     *&#x2F;\n    @TableField(exist &#x3D; false)  &#x2F;&#x2F;当前属性表中不存在\n    private String userName;\n    @TableField(exist &#x3D; false)\n    private String password;\n\n\n    &#x2F;&#x2F;以下是数据库字段\n    private Long id;\n    private String name;\n    private Integer age;\n    private String email;\n\n\n&#125;</code></pre>\n\n<p><strong>优点：</strong></p>\n<ul>\n<li>只需要我们的Mapper继承 <strong>BaseMapper</strong> 就可以拥有crud能力</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">public interface UserMapper extends BaseMapper&lt;User&gt; &#123;</code></pre>\n\n\n\n\n\n<h3 id=\"3、CRUD功能\"><a href=\"#3、CRUD功能\" class=\"headerlink\" title=\"3、CRUD功能\"></a>3、CRUD功能</h3><p>dynamic_table.html        ctrl+alt+L:格式化</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">    @GetMapping(&quot;&#x2F;user&#x2F;delete&#x2F;&#123;id&#125;&quot;)\n    public String deleteUser(@PathVariable(&quot;id&quot;) Long id,\n                             @RequestParam(value &#x3D; &quot;pn&quot;,defaultValue &#x3D; &quot;1&quot;)Integer pn,\n                             RedirectAttributes ra)&#123;\n\n        userService.removeById(id);\n\n        ra.addAttribute(&quot;pn&quot;,pn);\n        return &quot;redirect:&#x2F;dynamic_table&quot;;\n    &#125;\n\n\n    @GetMapping(&quot;&#x2F;dynamic_table&quot;)\n    public String dynamic_table(@RequestParam(value&#x3D;&quot;pn&quot;,defaultValue &#x3D; &quot;1&quot;) Integer pn,Model model)&#123;\n        &#x2F;&#x2F;表格内容的遍历\n&#x2F;&#x2F;        response.sendError\n&#x2F;&#x2F;     List&lt;User&gt; users &#x3D; Arrays.asList(new User(&quot;zhangsan&quot;, &quot;123456&quot;),\n&#x2F;&#x2F;                new User(&quot;lisi&quot;, &quot;123444&quot;),\n&#x2F;&#x2F;                new User(&quot;haha&quot;, &quot;aaaaa&quot;),\n&#x2F;&#x2F;                new User(&quot;hehe &quot;, &quot;aaddd&quot;));\n&#x2F;&#x2F;        model.addAttribute(&quot;users&quot;,users);\n&#x2F;&#x2F;\n&#x2F;&#x2F;        if(users.size()&gt;3)&#123;\n&#x2F;&#x2F;            throw new UserTooManyException();\n&#x2F;&#x2F;        &#125;\n        &#x2F;&#x2F;从数据库中查出user表中的用户进行展示\n\n        &#x2F;&#x2F;构造分页参数\n        Page&lt;User&gt; page &#x3D; new Page&lt;&gt;(pn, 2);\n        &#x2F;&#x2F;调用page进行分页\n        Page&lt;User&gt; userPage &#x3D; userService.page(page, null);\n\n\n&#x2F;&#x2F;        userPage.getRecords()\n&#x2F;&#x2F;        userPage.getCurrent()\n&#x2F;&#x2F;        userPage.getPages()\n\n\n        model.addAttribute(&quot;users&quot;,userPage);\n\n        return &quot;table&#x2F;dynamic_table&quot;;\n    &#125;</code></pre>\n\n\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Service\npublic class UserServiceImpl extends ServiceImpl&lt;UserMapper,User&gt; implements UserService &#123;\n\n\n&#125;\n\npublic interface UserService extends IService&lt;User&gt; &#123;\n\n&#125;</code></pre>\n\n<h4 id=\"分页插件\"><a href=\"#分页插件\" class=\"headerlink\" title=\"分页插件\"></a>分页插件</h4><p><img src=\"http://cache.itzy8.top/springboot2/image-20211021172253314.png\" alt=\"image-20211021172253314\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Configuration\npublic class MyBatisConfig &#123;\n\n\n    &#x2F;**\n     * MybatisPlusInterceptor\n     * @return\n     *&#x2F;\n    @Bean\n    public MybatisPlusInterceptor paginationInterceptor() &#123;\n        MybatisPlusInterceptor mybatisPlusInterceptor &#x3D; new MybatisPlusInterceptor();\n        &#x2F;&#x2F; 设置请求的页面大于最大页后操作， true调回到首页，false 继续请求  默认false\n        &#x2F;&#x2F; paginationInterceptor.setOverflow(false);\n        &#x2F;&#x2F; 设置最大单页限制数量，默认 500 条，-1 不受限制\n        &#x2F;&#x2F; paginationInterceptor.setLimit(500);\n        &#x2F;&#x2F; 开启 count 的 join 优化,只针对部分 left join\n\n        &#x2F;&#x2F;这是分页拦截器\n        PaginationInnerInterceptor paginationInnerInterceptor &#x3D; new PaginationInnerInterceptor();\n        paginationInnerInterceptor.setOverflow(true);\n        paginationInnerInterceptor.setMaxLimit(500L);\n        mybatisPlusInterceptor.addInnerInterceptor(paginationInnerInterceptor);\n\n        return mybatisPlusInterceptor;\n    &#125;\n&#125;\n\n</code></pre>\n\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211021172843336.png\" alt=\"image-20211021172843336\"></p>\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211021174241510.png\" alt=\"image-20211021174241510\"></p>\n<p>dynamic_table.html 动态分页实现：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;table class&#x3D;&quot;display table table-bordered table-striped&quot; id&#x3D;&quot;dynamic-table&quot;&gt;\n                                    &lt;thead&gt;\n                                    &lt;tr&gt;\n                                        &lt;th&gt;#&lt;&#x2F;th&gt;\n                                        &lt;th&gt;name&lt;&#x2F;th&gt;\n                                        &lt;th&gt;age&lt;&#x2F;th&gt;\n                                        &lt;th&gt;email&lt;&#x2F;th&gt;\n                                        &lt;th&gt;操作&lt;&#x2F;th&gt;\n                                    &lt;&#x2F;tr&gt;\n                                    &lt;&#x2F;thead&gt;\n                                    &lt;tbody&gt;\n                                    &lt;tr class&#x3D;&quot;gradeX&quot; th:each&#x3D;&quot;user,stat: $&#123;users.records&#125;&quot;&gt;\n                                        &lt;td th:text&#x3D;&quot;$&#123;stat.count&#125;&quot;&gt;&lt;&#x2F;td&gt;\n\n                                        &lt;td th:text&#x3D;&quot;$&#123;user.id&#125;&quot;&gt;&lt;&#x2F;td&gt;\n                                        &lt;td&gt;[[$&#123;user.name&#125;]]&lt;&#x2F;td&gt;\n                                        &lt;td th:text&#x3D;&quot;$&#123;user.age&#125;&quot;&gt;Win 95+&lt;&#x2F;td&gt;\n                                        &lt;td th:text&#x3D;&quot;$&#123;user.email&#125;&quot;&gt;4&lt;&#x2F;td&gt;\n                                        &lt;td&gt;\n                                            &lt;a th:href&#x3D;&quot;@&#123;&#x2F;user&#x2F;delete&#x2F;&#123;id&#125;(id&#x3D;$&#123;user.id&#125;,pn&#x3D;$&#123;users.current&#125;)&#125;&quot;\n                                               class&#x3D;&quot;btn btn-danger btn-sm&quot; type&#x3D;&quot;button&quot;&gt;删除&lt;&#x2F;a&gt;\n                                        &lt;&#x2F;td&gt;\n                                    &lt;&#x2F;tr&gt;\n                                    &lt;&#x2F;tfoot&gt;\n                                &lt;&#x2F;table&gt;\n\n\n\n\n\n&lt;div class&#x3D;&quot;row-fluid&quot;&gt;\n    &lt;div class&#x3D;&quot;span6&quot;&gt;\n        &lt;div class&#x3D;&quot;dataTables_info&quot; id&#x3D;&quot;hidden-table-info_info&quot;&gt;\n            当前第[[$&#123;users.current&#125;]]页  总计 [[$&#123;users.pages&#125;]]页  共[[$&#123;users.total&#125;]]条记录\n        &lt;&#x2F;div&gt;\n    &lt;&#x2F;div&gt;\n    &lt;div class&#x3D;&quot;span6&quot;&gt;\n        &lt;div class&#x3D;&quot;dataTables_paginate paging_bootstrap pagination&quot;&gt;\n            &lt;ul&gt;\n                &lt;li class&#x3D;&quot;prev disabled&quot;&gt;&lt;a href&#x3D;&quot;#&quot;&gt;← 前一页&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;\n                &lt;li th:class&#x3D;&quot;$&#123;num &#x3D;&#x3D; users.current?&#39;active&#39;:&#39;&#39;&#125;&quot; th:each&#x3D;&quot;num:$&#123;#numbers.sequence(1,users.pages)&#125;&quot; &gt;\n                    &lt;a th:href&#x3D;&quot;@&#123;&#x2F;dynamic_table(pn&#x3D;$&#123;num&#125;)&#125;&quot;&gt;[[$&#123;num&#125;]]&lt;&#x2F;a&gt;\n                &lt;&#x2F;li&gt;\n                &lt;li class&#x3D;&quot;next disabled&quot;&gt;&lt;a href&#x3D;&quot;#&quot;&gt;下一页 → &lt;&#x2F;a&gt;&lt;&#x2F;li&gt;\n            &lt;&#x2F;ul&gt;\n        &lt;&#x2F;div&gt;\n    &lt;&#x2F;div&gt;\n&lt;&#x2F;div&gt;\n\n&lt;!--common scripts for all pages--&gt;\n&lt;!--&lt;script src&#x3D;&quot;js&#x2F;scripts.js&quot;&gt;&lt;&#x2F;script&gt;--&gt;</code></pre>\n\n\n\n<p>&#x3D;&#x3D;作业：”修改 添加“按钮 及功能实现~&#x3D;&#x3D;</p>\n<h1 id=\"2、NoSQL\"><a href=\"#2、NoSQL\" class=\"headerlink\" title=\"2、NoSQL\"></a>2、NoSQL</h1><p>Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、<strong>缓存</strong>和消息中间件。 它支持多种类型的数据结构，如 <a href=\"http://www.redis.cn/topics/data-types-intro.html#strings\">字符串（strings）</a>， <a href=\"http://www.redis.cn/topics/data-types-intro.html#hashes\">散列（hashes）</a>， <a href=\"http://www.redis.cn/topics/data-types-intro.html#lists\">列表（lists）</a>， <a href=\"http://www.redis.cn/topics/data-types-intro.html#sets\">集合（sets）</a>， <a href=\"http://www.redis.cn/topics/data-types-intro.html#sorted-sets\">有序集合（sorted sets）</a> 与范围查询， <a href=\"http://www.redis.cn/topics/data-types-intro.html#bitmaps\">bitmaps</a>， <a href=\"http://www.redis.cn/topics/data-types-intro.html#hyperloglogs\">hyperloglogs</a> 和 <a href=\"http://www.redis.cn/commands/geoadd.html\">地理空间（geospatial）</a> 索引半径查询。 Redis 内置了 <a href=\"http://www.redis.cn/topics/replication.html\">复制（replication）</a>，<a href=\"http://www.redis.cn/commands/eval.html\">LUA脚本（Lua scripting）</a>， <a href=\"http://www.redis.cn/topics/lru-cache.html\">LRU驱动事件（LRU eviction）</a>，<a href=\"http://www.redis.cn/topics/transactions.html\">事务（transactions）</a> 和不同级别的 <a href=\"http://www.redis.cn/topics/persistence.html\">磁盘持久化（persistence）</a>， 并通过 <a href=\"http://www.redis.cn/topics/sentinel.html\">Redis哨兵（Sentinel）</a>和自动 <a href=\"http://www.redis.cn/topics/cluster-tutorial.html\">分区（Cluster）</a>提供高可用性（high availability）。</p>\n<h2 id=\"1、Redis自动配置\"><a href=\"#1、Redis自动配置\" class=\"headerlink\" title=\"1、Redis自动配置\"></a>1、Redis自动配置</h2><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;&#x2F;artifactId&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1354552/1606745732785-17d1227a-75b9-4f00-a3f1-7fc4137b5113.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_17,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<p>自动配置：</p>\n<ul>\n<li><p>RedisAutoConfiguration 自动配置类。RedisProperties 属性类 –&gt; <strong>spring.redis.xxx是对redis的配置</strong></p>\n</li>\n<li><p>连接工厂是准备好的。<strong>Lettuce</strong>ConnectionConfiguration、<strong>Jedis</strong>ConnectionConfiguration</p>\n</li>\n<li><p><strong>自动注入了RedisTemplate</strong>&lt;**Object**, **Object**&gt; ： xxxTemplate；</p>\n</li>\n<li><p><strong>自动注入了StringRedisTemplate；k：v都是String</strong></p>\n</li>\n<li><p><strong>key：value</strong></p>\n</li>\n<li><p><strong>底层只要我们使用</strong> <strong>StringRedisTemplate、****RedisTemplate就可以操作redis</strong></p>\n</li>\n</ul>\n<p><strong>redis环境搭建</strong></p>\n<p><strong>1、阿里云按量付费redis。经典网络</strong></p>\n<p><strong>2、申请redis的公网连接地址</strong></p>\n<p><strong>3、修改白名单  允许0.0.0.0&#x2F;0 访问</strong></p>\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211021185005583.png\" alt=\"image-20211021185005583\"></p>\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211021185147614.png\" alt=\"image-20211021185147614\"></p>\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211021185331939.png\" alt=\"image-20211021185331939\"></p>\n<p><img src=\"http://cache.itzy8.top/springboot2/image-20211021185500904.png\" alt=\"image-20211021185500904\"></p>\n<p>用完释放！！！！</p>\n<p><a href=\"https://www.cnblogs.com/yunqing/p/10605934.html\">https://www.cnblogs.com/yunqing/p/10605934.html</a></p>\n<p>redis-server redis.windows.conf</p>\n<p>redis-server –service-install redis.windows-service.conf –loglevel verbose</p>\n<p>开启服务：redis-server –service-start</p>\n<p>停止服务：redis-server –service-stop</p>\n<p>redis-cli.exe -h 127.0.0.1 -p 6379</p>\n<p>get set del auth </p>\n<p>requirepass</p>\n<p><a href=\"https://www.cnblogs.com/liyan492/p/9858548.html\">https://www.cnblogs.com/liyan492/p/9858548.html</a></p>\n<p>概念：</p>\n<p>　　Jedis：是Redis的Java实现客户端，提供了比较全面的Redis命令的支持，</p>\n<p>　　Redisson：实现了分布式和可扩展的Java数据结构。</p>\n<p>　　<em>Lettuce：高级Redis客户端，用于线程安全同步，异步和响应使用，支持集群，Sentinel，管道和编码器。</em></p>\n<p><em>优点：</em></p>\n<p>　　<em>Jedis：比较全面的提供了Redis的操作特性</em></p>\n<p>　　<em>Redisson：促使使用者对Redis的关注分离，提供很多分布式相关操作服务，例如，分布式锁，分布式集合，可通过Redis支持延迟队列</em></p>\n<p>　　<em>Lettuce：主要在一些分布式缓存框架上使用比较多</em></p>\n<p><em>可伸缩：</em></p>\n<p>Jedis：使用阻塞的I&#x2F;O，且其方法调用都是同步的，程序流需要等到sockets处理完I&#x2F;O才能执行，不支持异步。Jedis客户端实例不是线程安全的，所以需要通过连接池来使用Jedis。</p>\n<p>Redisson：基于Netty框架的事件驱动的通信层，其方法调用是异步的。Redisson的API是线程安全的，所以可以操作单个Redisson连接来完成各种操作</p>\n<p><em>Lettuce：基于Netty框架的事件驱动的通信层，其方法调用是异步的。Lettuce的API是线程安全的，所以可以操作单个Lettuce连接来完成各种操作</em></p>\n<p>结论：</p>\n<p><em>建议使用：Jedis + Redisson</em></p>\n<h2 id=\"2、RedisTemplate与Lettuce\"><a href=\"#2、RedisTemplate与Lettuce\" class=\"headerlink\" title=\"2、RedisTemplate与Lettuce\"></a>2、RedisTemplate与Lettuce</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Test\nvoid testRedis()&#123;\n    ValueOperations&lt;String, String&gt; operations &#x3D; redisTemplate.opsForValue();\n\n    operations.set(&quot;hello&quot;,&quot;world&quot;);\n\n    String hello &#x3D; operations.get(&quot;hello&quot;);\n    System.out.println(hello);\n&#125;</code></pre>\n\n\n\n\n\n\n\n<h2 id=\"3、切换至jedis\"><a href=\"#3、切换至jedis\" class=\"headerlink\" title=\"3、切换至jedis\"></a>3、切换至jedis</h2><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-data-redis&lt;&#x2F;artifactId&gt;\n        &lt;&#x2F;dependency&gt;\n\n&lt;!--        导入jedis--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;redis.clients&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;jedis&lt;&#x2F;artifactId&gt;\n        &lt;&#x2F;dependency&gt;\nspring:\n  redis:\n      host: r-bp1nc7reqesxisgxpipd.redis.rds.aliyuncs.com\n      port: 6379\n      password: lfy:Lfy123456\n      client-type: jedis\n      jedis:\n        pool:\n          max-active: 10</code></pre>\n\n\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Configuration\npublic class AdminWebConfig implements WebMvcConfigurer&#123;\n\n\n    &#x2F;**\n     * Filter、Interceptor 几乎拥有相同的功能？\n     * 1、Filter是【Servlet定义的原生组件】。好处，脱离Spring应用也能使用\n     * 2、Interceptor是【Spring定义的接口。可以使用Spring的自动装配等功能】\n     *\n     *&#x2F;\n    @Autowired\n    RedisUrlCountInterceptor redisUrlCountInterceptor;\n\n    &#x2F;**\n     * 定义静态资源行为\n     * @param registry\n     *&#x2F;\n&#x2F;&#x2F;    @Override\n&#x2F;&#x2F;    public void addResourceHandlers(ResourceHandlerRegistry registry) &#123;\n&#x2F;&#x2F;        &#x2F;**\n&#x2F;&#x2F;         * 访问  &#x2F;aa&#x2F;** 所有请求都去 classpath:&#x2F;static&#x2F; 下面进行匹配\n&#x2F;&#x2F;         *&#x2F;\n&#x2F;&#x2F;        registry.addResourceHandler(&quot;&#x2F;aa&#x2F;**&quot;)\n&#x2F;&#x2F;                .addResourceLocations(&quot;classpath:&#x2F;static&#x2F;&quot;); &#x2F;&#x2F;前缀 与 路径目录\n&#x2F;&#x2F;    &#125;\n\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) &#123;\n&#x2F;&#x2F;        registry.addInterceptor(new LoginInterceptor())\n&#x2F;&#x2F;                .addPathPatterns(&quot;&#x2F;**&quot;)  &#x2F;&#x2F;所有请求都被拦截包括静态资源\n&#x2F;&#x2F;                .excludePathPatterns(&quot;&#x2F;&quot;,&quot;&#x2F;login&quot;,&quot;&#x2F;css&#x2F;**&quot;,&quot;&#x2F;fonts&#x2F;**&quot;,&quot;&#x2F;images&#x2F;**&quot;,\n&#x2F;&#x2F;                        &quot;&#x2F;js&#x2F;**&quot;,&quot;&#x2F;aa&#x2F;**&quot;,&quot;&#x2F;sql&quot;); &#x2F;&#x2F;放行的请求\n\n        registry.addInterceptor(redisUrlCountInterceptor)\n                .addPathPatterns(&quot;&#x2F;**&quot;)\n                .excludePathPatterns(&quot;&#x2F;&quot;,&quot;&#x2F;login&quot;,&quot;&#x2F;css&#x2F;**&quot;,&quot;&#x2F;fonts&#x2F;**&quot;,&quot;&#x2F;images&#x2F;**&quot;,\n                        &quot;&#x2F;js&#x2F;**&quot;,&quot;&#x2F;aa&#x2F;**&quot;);\n    &#125;\n\n\n\n\n\n\n\n\n\t&#x2F;**\n     * 去main页面\n     * @return\n     *&#x2F;\n    @GetMapping(&quot;&#x2F;main.html&quot;)\n    public String mainPage(HttpSession session, Model model)&#123;\n\n        log.info(&quot;当前方法是：&#123;&#125;&quot;, &quot;mainPage&quot;);\n        &#x2F;&#x2F;是否登录，  拦截器，过滤器\n&#x2F;&#x2F;        Object loginUser &#x3D; session.getAttribute(&quot;loginUser&quot;);\n&#x2F;&#x2F;        if(loginUser !&#x3D; null)&#123;\n&#x2F;&#x2F;            return &quot;main&quot;;\n&#x2F;&#x2F;        &#125; else &#123;\n&#x2F;&#x2F;            model.addAttribute(&quot;msg&quot;,&quot;请重新登录&quot;);&#x2F;&#x2F;转发回login页\n&#x2F;&#x2F;            &#x2F;&#x2F;回到登录页面\n&#x2F;&#x2F;            return &quot;login&quot;;\n&#x2F;&#x2F;        &#125;\n\n\n        ValueOperations&lt;String, String&gt; opsForValue &#x3D;\n                redisTemplate.opsForValue();\n\n        String s &#x3D; opsForValue.get(&quot;&#x2F;main.html&quot;);\n        String s1 &#x3D; opsForValue.get(&quot;&#x2F;sql&quot;);\n\n\n        model.addAttribute(&quot;mainCount&quot;,s);\n        model.addAttribute(&quot;sqlCount&quot;,s1);\n\n        return &quot;main&quot;;\n\n    &#125;\n    \n    \n\n\n\n\n@Component\npublic class RedisUrlCountInterceptor implements HandlerInterceptor &#123;\n\n    @Autowired\n    StringRedisTemplate redisTemplate;\n\n\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;\n        String uri &#x3D; request.getRequestURI();\n\n        &#x2F;&#x2F;默认每次访问当前uri就会计数+1\n        redisTemplate.opsForValue().increment(uri);\n\n        return true;\n    &#125;\n&#125;</code></pre>\n\n\n\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!--statistics start--&gt;\n&lt;div class&#x3D;&quot;row state-overview&quot;&gt;\n    &lt;div class&#x3D;&quot;col-md-6 col-xs-12 col-sm-6&quot;&gt;\n        &lt;div class&#x3D;&quot;panel purple&quot;&gt;\n            &lt;div class&#x3D;&quot;symbol&quot;&gt;\n                &lt;i class&#x3D;&quot;fa fa-gavel&quot;&gt;&lt;&#x2F;i&gt;\n            &lt;&#x2F;div&gt;\n            &lt;div class&#x3D;&quot;state-value&quot;&gt;\n                &lt;div class&#x3D;&quot;value&quot; th:text&#x3D;&quot;$&#123;mainCount&#125;&quot;&gt;230&lt;&#x2F;div&gt;\n                &lt;div class&#x3D;&quot;title&quot;&gt;&#x2F;main.html&lt;&#x2F;div&gt;\n            &lt;&#x2F;div&gt;\n        &lt;&#x2F;div&gt;\n    &lt;&#x2F;div&gt;\n    &lt;div class&#x3D;&quot;col-md-6 col-xs-12 col-sm-6&quot;&gt;\n        &lt;div class&#x3D;&quot;panel red&quot;&gt;\n            &lt;div class&#x3D;&quot;symbol&quot;&gt;\n                &lt;i class&#x3D;&quot;fa fa-tags&quot;&gt;&lt;&#x2F;i&gt;\n            &lt;&#x2F;div&gt;\n            &lt;div class&#x3D;&quot;state-value&quot;&gt;\n                &lt;div class&#x3D;&quot;value&quot; th:text&#x3D;&quot;$&#123;sqlCount&#125;&quot;&gt;3490&lt;&#x2F;div&gt;\n                &lt;div class&#x3D;&quot;title&quot;&gt;&#x2F;sql&lt;&#x2F;div&gt;\n            &lt;&#x2F;div&gt;\n        &lt;&#x2F;div&gt;\n    &lt;&#x2F;div&gt;\n&lt;&#x2F;div&gt;\n</code></pre>\n\n\n\n\n\n<h1 id=\"07、单元测试\"><a href=\"#07、单元测试\" class=\"headerlink\" title=\"07、单元测试\"></a>07、单元测试</h1><h1 id=\"1、JUnit5-的变化\"><a href=\"#1、JUnit5-的变化\" class=\"headerlink\" title=\"1、JUnit5 的变化\"></a>1、JUnit5 的变化</h1><p><strong>Spring Boot 2.2.0 版本开始引入 JUnit 5 作为单元测试默认库</strong></p>\n<p>作为最新版本的JUnit框架，JUnit5与之前版本的Junit框架有很大的不同。由三个不同子项目的几个不同模块组成。</p>\n<p><strong>JUnit 5 &#x3D; JUnit Platform + JUnit Jupiter + JUnit Vintage</strong></p>\n<p><strong>JUnit Platform</strong>: Junit Platform是在JVM上启动测试框架的基础，不仅支持Junit自制的测试引擎，其他测试引擎也都可以接入。</p>\n<p><strong>JUnit Jupiter</strong>: JUnit Jupiter提供了JUnit5的新的编程模型，是JUnit5新特性的核心。内部 包含了一个<strong>测试引擎</strong>，用于在Junit Platform上运行。</p>\n<p><strong>JUnit Vintage</strong>: 由于JUint已经发展多年，为了照顾老的项目，JUnit Vintage提供了兼容JUnit4.x,Junit3.x的测试引擎。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1354552/1606796395719-eb57ab48-ae44-45e5-8d2e-c4d507aff49a.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_19,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<p>注意：</p>\n<p><strong>SpringBoot 2.4 以上版本移除了默认对</strong> <strong>Vintage 的依赖。如果需要兼容junit4需要自行引入（不能使用junit4的功能 @Test****）</strong></p>\n<p><strong>JUnit 5’s Vintage Engine Removed from</strong> <code>**spring-boot-starter-test,如果需要继续兼容junit4需要自行引入vintage**</code></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependency&gt;\n    &lt;groupId&gt;org.junit.vintage&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;junit-vintage-engine&lt;&#x2F;artifactId&gt;\n    &lt;scope&gt;test&lt;&#x2F;scope&gt;\n    &lt;exclusions&gt;\n        &lt;exclusion&gt;\n            &lt;groupId&gt;org.hamcrest&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;hamcrest-core&lt;&#x2F;artifactId&gt;\n        &lt;&#x2F;exclusion&gt;\n    &lt;&#x2F;exclusions&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n\n\n\n\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1354552/1606797616337-e73010e9-9cac-496d-a177-64b677af5a3d.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_18,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependency&gt;\n  &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n  &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;\n  &lt;scope&gt;test&lt;&#x2F;scope&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<p>现在版本：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@SpringBootTest\nclass Boot05WebAdminApplicationTests &#123;\n\n\n    @Test\n    void contextLoads() &#123;\n\n    &#125;\n&#125;</code></pre>\n\n\n\n\n\n<p>以前：</p>\n<p>@SpringBootTest + @RunWith(SpringTest.class)</p>\n<p>SpringBoot整合Junit以后。</p>\n<ul>\n<li>编写测试方法：@Test标注（注意需要使用junit5版本的注解）</li>\n<li>Junit类具有Spring的功能，@Autowired、比如&#x3D;&#x3D;@Transactional 标注测试insert方法，测试完成后自动回滚&#x3D;&#x3D;</li>\n</ul>\n<h1 id=\"2、JUnit5常用注解-x3D-x3D-P72…待看-x3D-x3D\"><a href=\"#2、JUnit5常用注解-x3D-x3D-P72…待看-x3D-x3D\" class=\"headerlink\" title=\"2、JUnit5常用注解[&#x3D;&#x3D;P72…待看~&#x3D;&#x3D;]\"></a>2、JUnit5常用注解[&#x3D;&#x3D;P72…待看~&#x3D;&#x3D;]</h1><p>P72:<a href=\"https://www.bilibili.com/video/BV19K4y1L7MT?p=72&amp;spm_id_from=pageDriver\">https://www.bilibili.com/video/BV19K4y1L7MT?p=72&amp;spm_id_from=pageDriver</a></p>\n<p>JUnit5的注解与JUnit4的注解有所变化</p>\n<p><a href=\"https://junit.org/junit5/docs/current/user-guide/#writing-tests-annotations\">https://junit.org/junit5/docs/current/user-guide/#writing-tests-annotations</a></p>\n<ul>\n<li><p>**@Test :**表示方法是测试方法。但是与JUnit4的@Test不同，他的职责非常单一不能声明任何属性，拓展的测试将会由Jupiter提供额外测试</p>\n</li>\n<li><p>**@ParameterizedTest :**表示方法是参数化测试，下方会有详细介绍</p>\n</li>\n<li><p>**@RepeatedTest :**表示方法可重复执行，下方会有详细介绍</p>\n</li>\n<li><p>**@DisplayName :**为测试类或者测试方法设置展示名称</p>\n</li>\n<li><p>**@BeforeEach :**表示在每个单元测试之前执行</p>\n</li>\n<li><p>**@AfterEach :**表示在每个单元测试之后执行</p>\n</li>\n<li><p>**@BeforeAll :**表示在所有单元测试之前执行</p>\n</li>\n<li><p>**@AfterAll :**表示在所有单元测试之后执行</p>\n</li>\n<li><p>**@Tag :**表示单元测试类别，类似于JUnit4中的@Categories</p>\n</li>\n<li><p>**@Disabled :**表示测试类或测试方法不执行，类似于JUnit4中的@Ignore</p>\n</li>\n<li><p>**@Timeout :**表示测试方法运行如果超过了指定时间将会返回错误</p>\n</li>\n<li><p>**@ExtendWith :**为测试类或测试方法提供扩展类引用</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import org.junit.jupiter.api.Test; &#x2F;&#x2F;注意这里使用的是jupiter的Test注解！！\n\n\npublic class TestDemo &#123;\n\n  @Test\n  @DisplayName(&quot;第一次测试&quot;)\n  public void firstTest() &#123;\n      System.out.println(&quot;hello world&quot;);\n  &#125;</code></pre>\n\n\n\n<h1 id=\"3、断言（assertions）\"><a href=\"#3、断言（assertions）\" class=\"headerlink\" title=\"3、断言（assertions）\"></a>3、断言（assertions）</h1><p>断言（assertions）是测试方法中的核心部分，用来对测试需要满足的条件进行验证。<strong>这些断言方法都是 org.junit.jupiter.api.Assertions 的静态方法</strong>。JUnit 5 内置的断言可以分成如下几个类别：</p>\n<p><strong>检查业务逻辑返回的数据是否合理。</strong></p>\n<p><strong>所有的测试运行结束以后，会有一个详细的测试报告；</strong></p>\n<h2 id=\"1、简单断言\"><a href=\"#1、简单断言\" class=\"headerlink\" title=\"1、简单断言\"></a>1、简单断言</h2><p>用来对单个值进行简单的验证。如：</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>assertEquals</td>\n<td>判断两个对象或两个原始类型是否相等</td>\n</tr>\n<tr>\n<td>assertNotEquals</td>\n<td>判断两个对象或两个原始类型是否不相等</td>\n</tr>\n<tr>\n<td>assertSame</td>\n<td>判断两个对象引用是否指向同一个对象</td>\n</tr>\n<tr>\n<td>assertNotSame</td>\n<td>判断两个对象引用是否指向不同的对象</td>\n</tr>\n<tr>\n<td>assertTrue</td>\n<td>判断给定的布尔值是否为 true</td>\n</tr>\n<tr>\n<td>assertFalse</td>\n<td>判断给定的布尔值是否为 false</td>\n</tr>\n<tr>\n<td>assertNull</td>\n<td>判断给定的对象引用是否为 null</td>\n</tr>\n<tr>\n<td>assertNotNull</td>\n<td>判断给定的对象引用是否不为 null</td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Test\n@DisplayName(&quot;simple assertion&quot;)\npublic void simple() &#123;\n     assertEquals(3, 1 + 2, &quot;simple math&quot;);\n     assertNotEquals(3, 1 + 1);\n\n     assertNotSame(new Object(), new Object());\n     Object obj &#x3D; new Object();\n     assertSame(obj, obj);\n\n     assertFalse(1 &gt; 2);\n     assertTrue(1 &lt; 2);\n\n     assertNull(null);\n     assertNotNull(new Object());\n&#125;</code></pre>\n\n\n\n<h2 id=\"2、数组断言\"><a href=\"#2、数组断言\" class=\"headerlink\" title=\"2、数组断言\"></a>2、数组断言</h2><p>通过 assertArrayEquals 方法来判断两个对象或原始类型的数组是否相等</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Test\n@DisplayName(&quot;array assertion&quot;)\npublic void array() &#123;\n assertArrayEquals(new int[]&#123;1, 2&#125;, new int[] &#123;1, 2&#125;);\n&#125;</code></pre>\n\n\n\n<h2 id=\"3、组合断言\"><a href=\"#3、组合断言\" class=\"headerlink\" title=\"3、组合断言\"></a>3、组合断言</h2><p>assertAll 方法接受多个 org.junit.jupiter.api.Executable 函数式接口的实例作为要验证的断言，可以通过 lambda 表达式很容易的提供这些断言</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Test\n@DisplayName(&quot;assert all&quot;)\npublic void all() &#123;\n assertAll(&quot;Math&quot;,\n    () -&gt; assertEquals(2, 1 + 1),\n    () -&gt; assertTrue(1 &gt; 0)\n );\n&#125;</code></pre>\n\n\n\n<h2 id=\"4、异常断言\"><a href=\"#4、异常断言\" class=\"headerlink\" title=\"4、异常断言\"></a>4、异常断言</h2><p>在JUnit4时期，想要测试方法的异常情况时，需要用**@Rule<strong>注解的ExpectedException变量还是比较麻烦的。而JUnit5提供了一种新的断言方式</strong>Assertions.assertThrows()** ,配合函数式编程就可以进行使用。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Test\n@DisplayName(&quot;异常测试&quot;)\npublic void exceptionTest() &#123;\n    ArithmeticException exception &#x3D; Assertions.assertThrows(\n           &#x2F;&#x2F;扔出断言异常\n            ArithmeticException.class, () -&gt; System.out.println(1 % 0));\n\n&#125;</code></pre>\n\n\n\n<h2 id=\"5、超时断言\"><a href=\"#5、超时断言\" class=\"headerlink\" title=\"5、超时断言\"></a>5、超时断言</h2><p>Junit5还提供了<strong>Assertions.assertTimeout()</strong> 为测试方法设置了超时时间</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Test\n@DisplayName(&quot;超时测试&quot;)\npublic void timeoutTest() &#123;\n    &#x2F;&#x2F;如果测试方法时间超过1s将会异常\n    Assertions.assertTimeout(Duration.ofMillis(1000), () -&gt; Thread.sleep(500));\n&#125;</code></pre>\n\n\n\n<h2 id=\"6、快速失败\"><a href=\"#6、快速失败\" class=\"headerlink\" title=\"6、快速失败\"></a>6、快速失败</h2><p>通过 fail 方法直接使得测试失败</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Test\n@DisplayName(&quot;fail&quot;)\npublic void shouldFail() &#123;\n fail(&quot;This should fail&quot;);\n&#125;</code></pre>\n\n\n\n<h1 id=\"4、前置条件（assumptions）\"><a href=\"#4、前置条件（assumptions）\" class=\"headerlink\" title=\"4、前置条件（assumptions）\"></a>4、前置条件（assumptions）</h1><p>JUnit 5 中的前置条件（<strong>assumptions【假设】</strong>）类似于断言，不同之处在于<strong>不满足的断言会使得测试方法失败</strong>，而不满足的<strong>前置条件只会使得测试方法的执行终止</strong>。前置条件可以看成是测试方法执行的前提，当该前提不满足时，就没有继续执行的必要。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@DisplayName(&quot;前置条件&quot;)\npublic class AssumptionsTest &#123;\n private final String environment &#x3D; &quot;DEV&quot;;\n \n @Test\n @DisplayName(&quot;simple&quot;)\n public void simpleAssume() &#123;\n    assumeTrue(Objects.equals(this.environment, &quot;DEV&quot;));\n    assumeFalse(() -&gt; Objects.equals(this.environment, &quot;PROD&quot;));\n &#125;\n \n @Test\n @DisplayName(&quot;assume then do&quot;)\n public void assumeThenDo() &#123;\n    assumingThat(\n       Objects.equals(this.environment, &quot;DEV&quot;),\n       () -&gt; System.out.println(&quot;In DEV&quot;)\n    );\n &#125;\n&#125;</code></pre>\n\n<p>assumeTrue 和 assumFalse 确保给定的条件为 true 或 false，不满足条件会使得测试执行终止。assumingThat 的参数是表示条件的布尔值和对应的 Executable 接口的实现对象。只有条件满足时，Executable 对象才会被执行；当条件不满足时，测试执行并不会终止。</p>\n<h1 id=\"5、嵌套测试\"><a href=\"#5、嵌套测试\" class=\"headerlink\" title=\"5、嵌套测试\"></a>5、嵌套测试</h1><p>JUnit 5 可以通过 Java 中的内部类和@Nested 注解实现嵌套测试，从而可以更好的把相关的测试方法组织在一起。在内部类中可以使用@BeforeEach 和@AfterEach 注解，而且嵌套的层次没有限制。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@DisplayName(&quot;A stack&quot;)\nclass TestingAStackDemo &#123;\n\n    Stack&lt;Object&gt; stack;\n\n    @Test\n    @DisplayName(&quot;is instantiated with new Stack()&quot;)\n    void isInstantiatedWithNew() &#123;\n        new Stack&lt;&gt;();\n    &#125;\n\n    @Nested\n    @DisplayName(&quot;when new&quot;)\n    class WhenNew &#123;\n\n        @BeforeEach\n        void createNewStack() &#123;\n            stack &#x3D; new Stack&lt;&gt;();\n        &#125;\n\n        @Test\n        @DisplayName(&quot;is empty&quot;)\n        void isEmpty() &#123;\n            assertTrue(stack.isEmpty());\n        &#125;\n\n        @Test\n        @DisplayName(&quot;throws EmptyStackException when popped&quot;)\n        void throwsExceptionWhenPopped() &#123;\n            assertThrows(EmptyStackException.class, stack::pop);\n        &#125;\n\n        @Test\n        @DisplayName(&quot;throws EmptyStackException when peeked&quot;)\n        void throwsExceptionWhenPeeked() &#123;\n            assertThrows(EmptyStackException.class, stack::peek);\n        &#125;\n\n        @Nested\n        @DisplayName(&quot;after pushing an element&quot;)\n        class AfterPushing &#123;\n\n            String anElement &#x3D; &quot;an element&quot;;\n\n            @BeforeEach\n            void pushAnElement() &#123;\n                stack.push(anElement);\n            &#125;\n\n            @Test\n            @DisplayName(&quot;it is no longer empty&quot;)\n            void isNotEmpty() &#123;\n                assertFalse(stack.isEmpty());\n            &#125;\n\n            @Test\n            @DisplayName(&quot;returns the element when popped and is empty&quot;)\n            void returnElementWhenPopped() &#123;\n                assertEquals(anElement, stack.pop());\n                assertTrue(stack.isEmpty());\n            &#125;\n\n            @Test\n            @DisplayName(&quot;returns the element when peeked but remains not empty&quot;)\n            void returnElementWhenPeeked() &#123;\n                assertEquals(anElement, stack.peek());\n                assertFalse(stack.isEmpty());\n            &#125;\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n\n\n<h1 id=\"6、参数化测试\"><a href=\"#6、参数化测试\" class=\"headerlink\" title=\"6、参数化测试\"></a>6、参数化测试</h1><p>参数化测试是JUnit5很重要的一个新特性，它使得用不同的参数多次运行测试成为了可能，也为我们的单元测试带来许多便利。</p>\n<p>利用**@ValueSource**等注解，指定入参，我们将可以使用不同的参数进行多次单元测试，而不需要每新增一个参数就新增一个单元测试，省去了很多冗余代码。</p>\n<p><strong>@ValueSource</strong>: 为参数化测试指定入参来源，支持八大基础类以及String类型,Class类型</p>\n<p><strong>@NullSource</strong>: 表示为参数化测试提供一个null的入参</p>\n<p><strong>@EnumSource</strong>: 表示为参数化测试提供一个枚举入参</p>\n<p><strong>@CsvFileSource</strong>：表示读取指定CSV文件内容作为参数化测试入参</p>\n<p><strong>@MethodSource</strong>：表示读取指定方法的返回值作为参数化测试入参(注意方法返回需要是一个流)</p>\n<p>当然如果参数化测试仅仅只能做到指定普通的入参还达不到让我觉得惊艳的地步。让我真正感到他的强大之处的地方在于他可以支持外部的各类入参。如:CSV,YML,JSON 文件甚至方法的返回值也可以作为入参。只需要去实现<strong>ArgumentsProvider</strong>接口，任何外部文件都可以作为它的入参。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@ParameterizedTest\n@ValueSource(strings &#x3D; &#123;&quot;one&quot;, &quot;two&quot;, &quot;three&quot;&#125;)\n@DisplayName(&quot;参数化测试1&quot;)\npublic void parameterizedTest1(String string) &#123;\n    System.out.println(string);\n    Assertions.assertTrue(StringUtils.isNotBlank(string));\n&#125;\n\n\n@ParameterizedTest\n@MethodSource(&quot;method&quot;)    &#x2F;&#x2F;指定方法名\n@DisplayName(&quot;方法来源参数&quot;)\npublic void testWithExplicitLocalMethodSource(String name) &#123;\n    System.out.println(name);\n    Assertions.assertNotNull(name);\n&#125;\n\nstatic Stream&lt;String&gt; method() &#123;\n    return Stream.of(&quot;apple&quot;, &quot;banana&quot;);\n&#125;</code></pre>\n\n\n\n<h1 id=\"7、迁移指南\"><a href=\"#7、迁移指南\" class=\"headerlink\" title=\"7、迁移指南\"></a>7、迁移指南</h1><p>在进行迁移的时候需要注意如下的变化：</p>\n<ul>\n<li><p>注解在 org.junit.jupiter.api 包中，断言在 org.junit.jupiter.api.Assertions 类中，前置条件在 org.junit.jupiter.api.Assumptions 类中。</p>\n</li>\n<li><p>把@Before 和@After 替换成@BeforeEach 和@AfterEach。</p>\n</li>\n<li><p>把@BeforeClass 和@AfterClass 替换成@BeforeAll 和@AfterAll。</p>\n</li>\n<li><p>把@Ignore 替换成@Disabled。</p>\n</li>\n<li><p>把@Category 替换成@Tag。</p>\n</li>\n<li><p>把@RunWith、@Rule 和@ClassRule 替换成@ExtendWith。</p>\n</li>\n</ul>\n<h1 id=\"08、指标监控\"><a href=\"#08、指标监控\" class=\"headerlink\" title=\"08、指标监控\"></a>08、指标监控</h1><h1 id=\"1、SpringBoot-Actuator\"><a href=\"#1、SpringBoot-Actuator\" class=\"headerlink\" title=\"1、SpringBoot Actuator\"></a>1、SpringBoot Actuator</h1><h2 id=\"1、简介\"><a href=\"#1、简介\" class=\"headerlink\" title=\"1、简介\"></a>1、简介</h2><p>未来每一个微服务在云上部署以后，我们都需要对其进行监控、追踪、审计、控制等。SpringBoot就抽取了Actuator场景，使得我们每个微服务快速引用即可获得生产级别的应用监控、审计等功能。</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-actuator&lt;&#x2F;artifactId&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1354552/1606886483335-697ee1c1-2f69-43ab-bddc-3a038382319c.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_19,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<h2 id=\"2、1-x与2-x的不同\"><a href=\"#2、1-x与2-x的不同\" class=\"headerlink\" title=\"2、1.x与2.x的不同\"></a>2、1.x与2.x的不同</h2><p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1354552/1606884394162-ac7f2d8e-7abb-44df-9998-fb0f2705f238.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_30,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<h2 id=\"3、如何使用\"><a href=\"#3、如何使用\" class=\"headerlink\" title=\"3、如何使用\"></a>3、如何使用</h2><ul>\n<li><p>引入场景</p>\n</li>\n<li><p>访问 <a href=\"http://localhost:8080/actuator/\">http://localhost:8080/actuator/</a>**</p>\n</li>\n<li><p>暴露所有监控信息为HTTP</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">management:\n  endpoints:\n    enabled-by-default: true #暴露所有端点信息\n    web:\n      exposure:\n        include: &#39;*&#39;  #以web方式暴露</code></pre>\n\n<ul>\n<li>测试</li>\n</ul>\n<p><a href=\"http://localhost:8080/actuator/beans\">http://localhost:8080/actuator/beans</a></p>\n<p><a href=\"http://localhost:8080/actuator/configprops\">http://localhost:8080/actuator/configprops</a></p>\n<p><a href=\"http://localhost:8080/actuator/metrics\">http://localhost:8080/actuator/metrics</a></p>\n<p><a href=\"http://localhost:8080/actuator/metrics/jvm.gc.pause\">http://localhost:8080/actuator/metrics/jvm.gc.pause</a></p>\n<p><a href=\"http://localhost:8080/actuator/metrics\">http://localhost:8080/actuator/</a>endpointName&#x2F;detailPath<br>。。。。。。</p>\n<h2 id=\"4、可视化\"><a href=\"#4、可视化\" class=\"headerlink\" title=\"4、可视化\"></a>4、可视化</h2><p><a href=\"https://github.com/codecentric/spring-boot-admin\">https://github.com/codecentric/spring-boot-admin</a></p>\n<h1 id=\"2、Actuator-Endpoint\"><a href=\"#2、Actuator-Endpoint\" class=\"headerlink\" title=\"2、Actuator Endpoint\"></a>2、Actuator Endpoint</h1><h2 id=\"1、最常使用的端点\"><a href=\"#1、最常使用的端点\" class=\"headerlink\" title=\"1、最常使用的端点\"></a>1、最常使用的端点</h2><table>\n<thead>\n<tr>\n<th>ID</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>auditevents</code></td>\n<td>暴露当前应用程序的审核事件信息。需要一个<code>AuditEventRepository组件</code>。</td>\n</tr>\n<tr>\n<td><code>beans</code></td>\n<td>显示应用程序中所有Spring Bean的完整列表。</td>\n</tr>\n<tr>\n<td><code>caches</code></td>\n<td>暴露可用的缓存。</td>\n</tr>\n<tr>\n<td><code>conditions</code></td>\n<td>显示自动配置的所有条件信息，包括匹配或不匹配的原因。</td>\n</tr>\n<tr>\n<td><code>configprops</code></td>\n<td>显示所有<code>@ConfigurationProperties</code>。</td>\n</tr>\n<tr>\n<td><code>env</code></td>\n<td>暴露Spring的属性<code>ConfigurableEnvironment</code></td>\n</tr>\n<tr>\n<td><code>flyway</code></td>\n<td>显示已应用的所有Flyway数据库迁移。 需要一个或多个<code>Flyway</code>组件。</td>\n</tr>\n<tr>\n<td><code>health</code></td>\n<td>显示应用程序运行状况信息。</td>\n</tr>\n<tr>\n<td><code>httptrace</code></td>\n<td>显示HTTP跟踪信息（默认情况下，最近100个HTTP请求-响应）。需要一个<code>HttpTraceRepository</code>组件。</td>\n</tr>\n<tr>\n<td><code>info</code></td>\n<td>显示应用程序信息。</td>\n</tr>\n<tr>\n<td><code>integrationgraph</code></td>\n<td>显示Spring <code>integrationgraph</code> 。需要依赖<code>spring-integration-core</code>。</td>\n</tr>\n<tr>\n<td><code>loggers</code></td>\n<td>显示和修改应用程序中日志的配置。</td>\n</tr>\n<tr>\n<td><code>liquibase</code></td>\n<td>显示已应用的所有Liquibase数据库迁移。需要一个或多个<code>Liquibase</code>组件。</td>\n</tr>\n<tr>\n<td><code>metrics</code></td>\n<td>显示当前应用程序的“指标”信息。</td>\n</tr>\n<tr>\n<td><code>mappings</code></td>\n<td>显示所有<code>@RequestMapping</code>路径列表。</td>\n</tr>\n<tr>\n<td><code>scheduledtasks</code></td>\n<td>显示应用程序中的计划任务。</td>\n</tr>\n<tr>\n<td><code>sessions</code></td>\n<td>允许从Spring Session支持的会话存储中检索和删除用户会话。需要使用Spring Session的基于Servlet的Web应用程序。</td>\n</tr>\n<tr>\n<td><code>shutdown</code></td>\n<td>使应用程序正常关闭。默认禁用。</td>\n</tr>\n<tr>\n<td><code>startup</code></td>\n<td>显示由<code>ApplicationStartup</code>收集的启动步骤数据。需要使用<code>SpringApplication</code>进行配置<code>BufferingApplicationStartup</code>。</td>\n</tr>\n<tr>\n<td><code>threaddump</code></td>\n<td>执行线程转储。</td>\n</tr>\n</tbody></table>\n<p>如果您的应用程序是Web应用程序（Spring MVC，Spring WebFlux或Jersey），则可以使用以下附加端点：</p>\n<table>\n<thead>\n<tr>\n<th>ID</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>heapdump</code></td>\n<td>返回<code>hprof</code>堆转储文件。</td>\n</tr>\n<tr>\n<td><code>jolokia</code></td>\n<td>通过HTTP暴露JMX bean（需要引入Jolokia，不适用于WebFlux）。需要引入依赖<code>jolokia-core</code>。</td>\n</tr>\n<tr>\n<td><code>logfile</code></td>\n<td>返回日志文件的内容（如果已设置<code>logging.file.name</code>或<code>logging.file.path</code>属性）。支持使用HTTP<code>Range</code>标头来检索部分日志文件的内容。</td>\n</tr>\n<tr>\n<td><code>prometheus</code></td>\n<td>以Prometheus服务器可以抓取的格式公开指标。需要依赖<code>micrometer-registry-prometheus</code>。</td>\n</tr>\n</tbody></table>\n<p>最常用的Endpoint</p>\n<ul>\n<li><p><strong>Health：监控状况</strong></p>\n</li>\n<li><p><strong>Metrics：运行时指标</strong></p>\n</li>\n<li><p><strong>Loggers：日志记录</strong></p>\n</li>\n</ul>\n<h2 id=\"2、Health-Endpoint\"><a href=\"#2、Health-Endpoint\" class=\"headerlink\" title=\"2、Health Endpoint\"></a>2、Health Endpoint</h2><p>健康检查端点，我们一般用于在云平台，平台会定时的检查应用的健康状况，我们就需要Health Endpoint可以为平台返回当前应用的一系列组件健康状况的集合。</p>\n<p>重要的几点：</p>\n<ul>\n<li><p>health endpoint返回的结果，应该是一系列健康检查后的一个汇总报告</p>\n</li>\n<li><p>很多的健康检查默认已经自动配置好了，比如：数据库、redis等</p>\n</li>\n<li><p>可以很容易的添加自定义的健康检查机制</p>\n</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1354552/1606908975702-4f9a3208-15ca-4a78-9f76-939ef986db7e.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_12,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<h2 id=\"3、Metrics-Endpoint\"><a href=\"#3、Metrics-Endpoint\" class=\"headerlink\" title=\"3、Metrics Endpoint\"></a>3、Metrics Endpoint</h2><p>提供详细的、层级的、空间指标信息，这些信息可以被pull（主动推送）或者push（被动获取）方式得到；</p>\n<ul>\n<li><p>通过Metrics对接多种监控系统</p>\n</li>\n<li><p>简化核心Metrics开发</p>\n</li>\n<li><p>添加自定义Metrics或者扩展已有Metrics</p>\n</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1354552/1606909073222-c6e77ca3-4b1c-4f38-a1c6-8614dec4f7bc.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_16,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<h2 id=\"4、管理Endpoints\"><a href=\"#4、管理Endpoints\" class=\"headerlink\" title=\"4、管理Endpoints\"></a>4、管理Endpoints</h2><h3 id=\"1、开启与禁用Endpoints\"><a href=\"#1、开启与禁用Endpoints\" class=\"headerlink\" title=\"1、开启与禁用Endpoints\"></a>1、开启与禁用Endpoints</h3><ul>\n<li>默认所有的Endpoint除过shutdown都是开启的。</li>\n<li>需要开启或者禁用某个Endpoint。配置模式为  <strong>management.endpoint.<strong><strong><endpointName></strong></strong>.enabled &#x3D; true</strong></li>\n</ul>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">management:\n  endpoint:\n    beans:\n      enabled: true</code></pre>\n\n<ul>\n<li>或者禁用所有的Endpoint然后手动开启指定的Endpoint</li>\n</ul>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">management:\n  endpoints:\n    enabled-by-default: false\n  endpoint:\n    beans:\n      enabled: true\n    health:\n      enabled: true</code></pre>\n\n\n\n\n\n<h3 id=\"2、暴露Endpoints\"><a href=\"#2、暴露Endpoints\" class=\"headerlink\" title=\"2、暴露Endpoints\"></a>2、暴露Endpoints</h3><p>支持的暴露方式</p>\n<ul>\n<li>HTTP：默认只暴露<strong>health</strong>和<strong>info</strong> Endpoint</li>\n<li><strong>JMX</strong>：默认&#x3D;&#x3D;暴露所有Endpoint&#x3D;&#x3D;</li>\n<li>cmd  jconsole  都能看！</li>\n<li><img src=\"http://cache.itzy8.top/springboot2/image-20211021210445458.png\" alt=\"image-20211021210445458\"></li>\n<li>除过health和info，剩下的Endpoint都应该进行保护访问。如果引入SpringSecurity，则会默认配置安全访问规则</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>ID</th>\n<th>JMX</th>\n<th>Web</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>auditevents</code></td>\n<td>Yes</td>\n<td>No</td>\n</tr>\n<tr>\n<td><code>beans</code></td>\n<td>Yes</td>\n<td>No</td>\n</tr>\n<tr>\n<td><code>caches</code></td>\n<td>Yes</td>\n<td>No</td>\n</tr>\n<tr>\n<td><code>conditions</code></td>\n<td>Yes</td>\n<td>No</td>\n</tr>\n<tr>\n<td><code>configprops</code></td>\n<td>Yes</td>\n<td>No</td>\n</tr>\n<tr>\n<td><code>env</code></td>\n<td>Yes</td>\n<td>No</td>\n</tr>\n<tr>\n<td><code>flyway</code></td>\n<td>Yes</td>\n<td>No</td>\n</tr>\n<tr>\n<td><code>health</code></td>\n<td>Yes</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td><code>heapdump</code></td>\n<td>N&#x2F;A</td>\n<td>No</td>\n</tr>\n<tr>\n<td><code>httptrace</code></td>\n<td>Yes</td>\n<td>No</td>\n</tr>\n<tr>\n<td><code>info</code></td>\n<td>Yes</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td><code>integrationgraph</code></td>\n<td>Yes</td>\n<td>No</td>\n</tr>\n<tr>\n<td><code>jolokia</code></td>\n<td>N&#x2F;A</td>\n<td>No</td>\n</tr>\n<tr>\n<td><code>logfile</code></td>\n<td>N&#x2F;A</td>\n<td>No</td>\n</tr>\n<tr>\n<td><code>loggers</code></td>\n<td>Yes</td>\n<td>No</td>\n</tr>\n<tr>\n<td><code>liquibase</code></td>\n<td>Yes</td>\n<td>No</td>\n</tr>\n<tr>\n<td><code>metrics</code></td>\n<td>Yes</td>\n<td>No</td>\n</tr>\n<tr>\n<td><code>mappings</code></td>\n<td>Yes</td>\n<td>No</td>\n</tr>\n<tr>\n<td><code>prometheus</code></td>\n<td>N&#x2F;A</td>\n<td>No</td>\n</tr>\n<tr>\n<td><code>scheduledtasks</code></td>\n<td>Yes</td>\n<td>No</td>\n</tr>\n<tr>\n<td><code>sessions</code></td>\n<td>Yes</td>\n<td>No</td>\n</tr>\n<tr>\n<td><code>shutdown</code></td>\n<td>Yes</td>\n<td>No</td>\n</tr>\n<tr>\n<td><code>startup</code></td>\n<td>Yes</td>\n<td>No</td>\n</tr>\n<tr>\n<td><code>threaddump</code></td>\n<td>Yes</td>\n<td>No</td>\n</tr>\n</tbody></table>\n<h1 id=\"3、定制-Endpoint\"><a href=\"#3、定制-Endpoint\" class=\"headerlink\" title=\"3、定制 Endpoint\"></a>3、定制 Endpoint</h1><h2 id=\"1、定制-Health-信息\"><a href=\"#1、定制-Health-信息\" class=\"headerlink\" title=\"1、定制 Health 信息\"></a>1、定制 Health 信息</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import org.springframework.boot.actuate.health.Health;\nimport org.springframework.boot.actuate.health.HealthIndicator;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class MyHealthIndicator implements HealthIndicator &#123;\n\n    @Override\n    public Health health() &#123;\n        int errorCode &#x3D; check(); &#x2F;&#x2F; perform some specific health check\n        if (errorCode !&#x3D; 0) &#123;\n            return Health.down().withDetail(&quot;Error Code&quot;, errorCode).build();\n        &#125;\n        return Health.up().build();\n    &#125;\n\n&#125;\n\n构建Health\nHealth build &#x3D; Health.down()\n                .withDetail(&quot;msg&quot;, &quot;error service&quot;)\n                .withDetail(&quot;code&quot;, &quot;500&quot;)\n                .withException(new RuntimeException())\n                .build();\nmanagement:\n    health:\n      enabled: true\n      show-details: always #总是显示详细信息。可显示每个模块的状态信息</code></pre>\n\n\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Component\npublic class MyComHealthIndicator extends AbstractHealthIndicator &#123;\n\n    &#x2F;**\n     * 真实的检查方法\n     * @param builder\n     * @throws Exception\n     *&#x2F;\n    @Override\n    protected void doHealthCheck(Health.Builder builder) throws Exception &#123;\n        &#x2F;&#x2F;mongodb。  获取连接进行测试\n        Map&lt;String,Object&gt; map &#x3D; new HashMap&lt;&gt;();\n        &#x2F;&#x2F; 检查完成\n        if(1 &#x3D;&#x3D; 2)&#123;\n&#x2F;&#x2F;            builder.up(); &#x2F;&#x2F;健康\n            builder.status(Status.UP);\n            map.put(&quot;count&quot;,1);\n            map.put(&quot;ms&quot;,100);\n        &#125;else &#123;\n&#x2F;&#x2F;            builder.down();\n            builder.status(Status.OUT_OF_SERVICE);\n            map.put(&quot;err&quot;,&quot;连接超时&quot;);\n            map.put(&quot;ms&quot;,3000);\n        &#125;\n\n\n        builder.withDetail(&quot;code&quot;,100)\n                .withDetails(map);\n\n    &#125;\n&#125;</code></pre>\n\n\n\n<h3 id=\"-2\"><a href=\"#-2\" class=\"headerlink\" title=\"\"></a></h3><h2 id=\"2、定制info信息\"><a href=\"#2、定制info信息\" class=\"headerlink\" title=\"2、定制info信息\"></a>2、定制info信息</h2><p>常用两种方式</p>\n<h4 id=\"1、编写配置文件\"><a href=\"#1、编写配置文件\" class=\"headerlink\" title=\"1、编写配置文件\"></a>1、编写配置文件</h4><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">info:\n  appName: boot-admin\n  version: 2.0.1\n  mavenProjectName: @project.artifactId@  #使用@@可以获取maven的pom文件值\n  mavenProjectVersion: @project.version@</code></pre>\n\n<h4 id=\"2、编写InfoContributor\"><a href=\"#2、编写InfoContributor\" class=\"headerlink\" title=\"2、编写InfoContributor\"></a>2、编写InfoContributor</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import java.util.Collections;\n\nimport org.springframework.boot.actuate.info.Info;\nimport org.springframework.boot.actuate.info.InfoContributor;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class ExampleInfoContributor implements InfoContributor &#123;\n\n    @Override\n    public void contribute(Info.Builder builder) &#123;\n        builder.withDetail(&quot;example&quot;,\n                Collections.singletonMap(&quot;key&quot;, &quot;value&quot;));\n    &#125;\n\n&#125;</code></pre>\n\n\n\n\n\n<p><a href=\"http://localhost:8080/actuator/info\">http://localhost:8080/actuator/info</a> 会输出以上方式返回的所有info信息</p>\n<h2 id=\"3、定制Metrics信息\"><a href=\"#3、定制Metrics信息\" class=\"headerlink\" title=\"3、定制Metrics信息\"></a>3、定制Metrics信息</h2><h4 id=\"1、SpringBoot支持自动适配的Metrics\"><a href=\"#1、SpringBoot支持自动适配的Metrics\" class=\"headerlink\" title=\"1、SpringBoot支持自动适配的Metrics\"></a>1、SpringBoot支持自动适配的Metrics</h4><ul>\n<li><p>JVM metrics, report utilization of:</p>\n</li>\n<li><ul>\n<li>Various memory and buffer pools</li>\n<li>Statistics related to garbage collection</li>\n</ul>\n</li>\n<li><ul>\n<li>Threads utilization</li>\n<li>Number of classes loaded&#x2F;unloaded</li>\n</ul>\n</li>\n<li><p>CPU metrics</p>\n</li>\n<li><p>File descriptor metrics</p>\n</li>\n<li><p>Kafka consumer and producer metrics</p>\n</li>\n<li><p>Log4j2 metrics: record the number of events logged to Log4j2 at each level</p>\n</li>\n<li><p>Logback metrics: record the number of events logged to Logback at each level</p>\n</li>\n<li><p>Uptime metrics: report a gauge for uptime and a fixed gauge representing the application’s absolute start time</p>\n</li>\n<li><p>Tomcat metrics (<code>server.tomcat.mbeanregistry.enabled</code> must be set to <code>true</code> for all Tomcat metrics to be registered)</p>\n</li>\n<li><p><a href=\"https://docs.spring.io/spring-integration/docs/5.4.1/reference/html/system-management.html#micrometer-integration\">Spring Integration</a> metrics</p>\n</li>\n</ul>\n<h4 id=\"2、增加定制Metrics\"><a href=\"#2、增加定制Metrics\" class=\"headerlink\" title=\"2、增加定制Metrics\"></a>2、增加定制Metrics</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">class MyService&#123;\n    Counter counter;\n    public MyService(MeterRegistry meterRegistry)&#123;\n         counter &#x3D; meterRegistry.counter(&quot;myservice.method.running.counter&quot;);\n    &#125;\n\n    public void hello() &#123;\n        counter.increment();\n    &#125;\n&#125;\n\n\n&#x2F;&#x2F;也可以使用下面的方式\n@Bean\nMeterBinder queueSize(Queue queue) &#123;\n    return (registry) -&gt; Gauge.builder(&quot;queueSize&quot;, queue::size).register(registry);\n&#125;</code></pre>\n\n\n\n\n\n<h2 id=\"4、定制Endpoint\"><a href=\"#4、定制Endpoint\" class=\"headerlink\" title=\"4、定制Endpoint\"></a>4、定制Endpoint</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Component\n@Endpoint(id &#x3D; &quot;container&quot;)\npublic class DockerEndpoint &#123;\n\n\n    @ReadOperation\n    public Map getDockerInfo()&#123;\n        return Collections.singletonMap(&quot;info&quot;,&quot;docker started...&quot;);\n    &#125;\n\n    @WriteOperation\n    private void restartDocker()&#123;\n        System.out.println(&quot;docker restarted....&quot;);\n    &#125;\n\n&#125;</code></pre>\n\n<p>场景：开发<strong>ReadinessEndpoint</strong>来管理程序是否就绪，或者<strong>Liveness****Endpoint</strong>来管理程序是否存活；</p>\n<p>当然，这个也可以直接使用 <a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready-kubernetes-probes\">https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready-kubernetes-probes</a></p>\n<h1 id=\"09、原理解析\"><a href=\"#09、原理解析\" class=\"headerlink\" title=\"09、原理解析\"></a>09、原理解析</h1><h1 id=\"1、Profile功能\"><a href=\"#1、Profile功能\" class=\"headerlink\" title=\"1、Profile功能\"></a>1、Profile功能</h1><p>为了方便多环境适配，springboot简化了profile功能。</p>\n<h2 id=\"1、application-profile功能\"><a href=\"#1、application-profile功能\" class=\"headerlink\" title=\"1、application-profile功能\"></a>1、application-profile功能</h2><ul>\n<li><p>默认配置文件  application.yaml；任何时候都会加载</p>\n</li>\n<li><p>指定环境配置文件  application-{env}.yaml</p>\n</li>\n<li><p>激活指定环境</p>\n</li>\n<li><ul>\n<li>配置文件激活</li>\n<li>命令行激活：java -jar xxx.jar –<strong>spring.profiles.active&#x3D;prod  –person.name&#x3D;haha</strong></li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li><strong>修改配置文件的任意值，命令行优先</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>默认配置与环境配置同时生效</p>\n</li>\n<li><p>同名配置项，profile配置优先</p>\n</li>\n</ul>\n<h2 id=\"2、-Profile条件装配功能\"><a href=\"#2、-Profile条件装配功能\" class=\"headerlink\" title=\"2、@Profile条件装配功能\"></a>2、@Profile条件装配功能</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Configuration(proxyBeanMethods &#x3D; false)\n@Profile(&quot;production&quot;)\npublic class ProductionConfiguration &#123;\n\n    &#x2F;&#x2F; ...\n\n&#125;</code></pre>\n\n<h2 id=\"3、profile分组\"><a href=\"#3、profile分组\" class=\"headerlink\" title=\"3、profile分组\"></a>3、profile分组</h2><pre class=\"line-numbers language-plain\" data-language=\"plain\"><code class=\"language-plain\">spring.profiles.group.production[0]&#x3D;proddb\nspring.profiles.group.production[1]&#x3D;prodmq\n\n使用：--spring.profiles.active&#x3D;production  激活</code></pre>\n\n\n\n\n\n<h1 id=\"2、外部化配置\"><a href=\"#2、外部化配置\" class=\"headerlink\" title=\"2、外部化配置\"></a>2、外部化配置</h1><p><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-external-config\">https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-external-config</a></p>\n<h2 id=\"-3\"><a href=\"#-3\" class=\"headerlink\" title=\"\"></a></h2><ol>\n<li><p>Default properties (specified by setting <code>SpringApplication.setDefaultProperties</code>).</p>\n</li>\n<li><p><code>@PropertySource</code> annotations on your <code>@Configuration</code> classes. Please note that such property sources are not added to the <code>Environment</code> until the application context is being refreshed. This is too late to configure certain properties such as <code>logging.*</code> and <code>spring.main.*</code> which are read before refresh begins.</p>\n</li>\n<li><p><strong>Config data (such as</strong> <code>**application.properties**</code> <strong>files)</strong></p>\n</li>\n<li><p>A <code>RandomValuePropertySource</code> that has properties only in <code>random.*</code>.</p>\n</li>\n<li><p>OS environment variables.</p>\n</li>\n<li><p>Java System properties (<code>System.getProperties()</code>).</p>\n</li>\n<li><p>JNDI attributes from <code>java:comp/env</code>.</p>\n</li>\n<li><p><code>ServletContext</code> init parameters.</p>\n</li>\n<li><p><code>ServletConfig</code> init parameters.</p>\n</li>\n<li><p>Properties from <code>SPRING_APPLICATION_JSON</code> (inline JSON embedded in an environment variable or system property).</p>\n</li>\n<li><p>Command line arguments.</p>\n</li>\n<li><p><code>properties</code> attribute on your tests. Available on <code>@SpringBootTest</code> and the <a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-testing-spring-boot-applications-testing-autoconfigured-tests\">test annotations for testing a particular slice of your application</a>.</p>\n</li>\n<li><p><code>@TestPropertySource</code> annotations on your tests.</p>\n</li>\n<li><p><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-devtools-globalsettings\">Devtools global settings properties</a> in the <code>$HOME/.config/spring-boot</code> directory when devtools is active.</p>\n</li>\n</ol>\n<h2 id=\"1、外部配置源\"><a href=\"#1、外部配置源\" class=\"headerlink\" title=\"1、外部配置源\"></a>1、外部配置源</h2><p>常用：<strong>Java属性文件</strong>、<strong>YAML文件</strong>、<strong>环境变量</strong>、<strong>命令行参数</strong>；</p>\n<h2 id=\"2、配置文件查找位置\"><a href=\"#2、配置文件查找位置\" class=\"headerlink\" title=\"2、配置文件查找位置\"></a>2、配置文件查找位置</h2><p>(1) classpath 根路径</p>\n<p>(2) classpath 根路径下config目录</p>\n<p>(3) jar包当前目录</p>\n<p>(4) jar包当前目录的config目录</p>\n<p>(5) &#x2F;config子目录的直接子目录</p>\n<h2 id=\"3、配置文件加载顺序：\"><a href=\"#3、配置文件加载顺序：\" class=\"headerlink\" title=\"3、配置文件加载顺序：\"></a>3、配置文件加载顺序：</h2><ol>\n<li><p>　当前jar包内部的application.properties和application.yml</p>\n</li>\n<li><p>　当前jar包内部的application-{profile}.properties 和 application-{profile}.yml</p>\n</li>\n<li><p>　引用的外部jar包的application.properties和application.yml</p>\n</li>\n<li><p>　引用的外部jar包的application-{profile}.properties 和 application-{profile}.yml</p>\n</li>\n</ol>\n<h2 id=\"4、指定环境优先，外部优先，后面的可以覆盖前面的同名配置项\"><a href=\"#4、指定环境优先，外部优先，后面的可以覆盖前面的同名配置项\" class=\"headerlink\" title=\"4、指定环境优先，外部优先，后面的可以覆盖前面的同名配置项\"></a>4、指定环境优先，外部优先，后面的可以覆盖前面的同名配置项</h2><h1 id=\"3、自定义starter\"><a href=\"#3、自定义starter\" class=\"headerlink\" title=\"3、自定义starter\"></a>3、自定义starter</h1><h2 id=\"1、starter启动原理\"><a href=\"#1、starter启动原理\" class=\"headerlink\" title=\"1、starter启动原理\"></a>1、starter启动原理</h2><ul>\n<li>starter-pom引入 autoconfigurer 包</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1354552/1606995919308-b2c7ccaa-e720-4cc5-9801-2e170b3102e1.png\" alt=\"img\"></p>\n<ul>\n<li><p>autoconfigure包中配置使用 <strong>META-INF&#x2F;spring.factories</strong> 中 <strong>EnableAutoConfiguration 的值，使得项目启动加载指定的自动配置类</strong></p>\n</li>\n<li><p><strong>编写自动配置类 xxxAutoConfiguration -&gt; xxxxProperties</strong></p>\n</li>\n<li><ul>\n<li><strong>@Configuration</strong></li>\n<li><strong>@Conditional</strong></li>\n</ul>\n</li>\n<li><ul>\n<li><strong>@EnableConfigurationProperties</strong></li>\n<li><strong>@Bean</strong></li>\n</ul>\n</li>\n<li><ul>\n<li>……</li>\n</ul>\n</li>\n</ul>\n<p><strong>引入starter</strong> <strong>— xxxAutoConfiguration — 容器中放入组件 —- 绑定xxxProperties —-</strong> <strong>配置项</strong></p>\n<h2 id=\"2、自定义starter\"><a href=\"#2、自定义starter\" class=\"headerlink\" title=\"2、自定义starter\"></a>2、自定义starter</h2><p><strong>atguigu-hello-spring-boot-starter（启动器）</strong></p>\n<p><strong>atguigu-hello-spring-boot-starter-autoconfigure（自动配置包）</strong></p>\n<h1 id=\"4、SpringBoot原理\"><a href=\"#4、SpringBoot原理\" class=\"headerlink\" title=\"4、SpringBoot原理\"></a>4、SpringBoot原理</h1><p>Spring原理【<a href=\"https://www.bilibili.com/video/BV1gW411W7wy?p=1\">Spring注解</a>】、<strong>SpringMVC</strong>原理、<strong>自动配置原理</strong>、SpringBoot原理</p>\n<h2 id=\"1、SpringBoot启动过程\"><a href=\"#1、SpringBoot启动过程\" class=\"headerlink\" title=\"1、SpringBoot启动过程\"></a>1、SpringBoot启动过程</h2><ul>\n<li><p>创建 <strong>SpringApplication</strong></p>\n</li>\n<li><ul>\n<li>保存一些信息。</li>\n<li>判定当前应用的类型。ClassUtils。Servlet</li>\n</ul>\n</li>\n<li><ul>\n<li><strong>bootstrappers****：初始启动引导器（</strong>List<Bootstrapper><strong>）：去spring.factories文件中找</strong> org.springframework.boot.<strong>Bootstrapper</strong></li>\n<li>找 <strong>ApplicationContextInitializer</strong>；去<strong>spring.factories****找</strong> <strong>ApplicationContextInitializer</strong></li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>List&lt;ApplicationContextInitializer&lt;?&gt;&gt; <strong>initializers</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li><strong>找</strong> <strong>ApplicationListener  ；应用监听器。</strong>去<strong>spring.factories****找</strong> <strong>ApplicationListener</strong></li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>List&lt;ApplicationListener&lt;?&gt;&gt; <strong>listeners</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>运行 <strong>SpringApplication</strong></p>\n</li>\n<li><ul>\n<li><strong>StopWatch</strong></li>\n<li><strong>记录应用的启动时间</strong></li>\n</ul>\n</li>\n<li><ul>\n<li><strong>创建引导上下文（Context环境）****createBootstrapContext()</strong></li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>获取到所有之前的 <strong>bootstrappers 挨个执行</strong> intitialize() 来完成对引导启动器上下文环境设置</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li>让当前应用进入<strong>headless</strong>模式。<strong>java.awt.headless</strong></li>\n<li><strong>获取所有</strong> <strong>RunListener****（运行监听器）【为了方便所有Listener进行事件感知】</strong></li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>getSpringFactoriesInstances 去<strong>spring.factories****找</strong> <strong>SpringApplicationRunListener</strong>.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li>遍历 <strong>SpringApplicationRunListener 调用 starting 方法；</strong></li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li><strong>相当于通知所有感兴趣系统正在启动过程的人，项目正在 starting。</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li>保存命令行参数；ApplicationArguments</li>\n<li>准备环境 prepareEnvironment（）;</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>返回或者创建基础环境信息对象。<strong>StandardServletEnvironment</strong></li>\n<li><strong>配置环境信息对象。</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li><ul>\n<li><strong>读取所有的配置源的配置属性值。</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>绑定环境信息</li>\n<li>监听器调用 listener.environmentPrepared()；通知所有的监听器当前环境准备完成</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li>创建IOC容器（createApplicationContext（））</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>根据项目类型（Servlet）创建容器，</li>\n<li>当前会创建 <strong>AnnotationConfigServletWebServerApplicationContext</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li><strong>准备ApplicationContext IOC容器的基本信息</strong>  <strong>prepareContext()</strong></li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>保存环境信息</li>\n<li>IOC容器的后置处理流程。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>应用初始化器；applyInitializers；</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li><ul>\n<li>遍历所有的 <strong>ApplicationContextInitializer 。调用</strong> <strong>initialize.。来对ioc容器进行初始化扩展功能</strong></li>\n<li>遍历所有的 listener 调用 <strong>contextPrepared。EventPublishRunListenr；通知所有的监听器contextPrepared</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li><strong>所有的监听器 调用</strong> <strong>contextLoaded。通知所有的监听器</strong> <strong>contextLoaded；</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li><strong>刷新IOC容器。</strong>refreshContext</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>创建容器中的所有组件（Spring注解）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li>容器刷新完成后工作？afterRefresh</li>\n<li>所有监听 器 调用 listeners.<strong>started</strong>(context); <strong>通知所有的监听器</strong> <strong>started</strong></li>\n</ul>\n</li>\n<li><ul>\n<li><strong>调用所有runners；</strong>callRunners()</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li><strong>获取容器中的</strong> <strong>ApplicationRunner</strong> </li>\n<li><strong>获取容器中的</strong>  <strong>CommandLineRunner</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li><strong>合并所有runner并且按照@Order进行排序</strong></li>\n<li><strong>遍历所有的runner。调用 run</strong> <strong>方法</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li><strong>如果以上有异常，</strong></li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li><strong>调用Listener 的 failed</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li><strong>调用所有监听器的 running 方法</strong>  listeners.running(context); <strong>通知所有的监听器</strong> <strong>running</strong> </li>\n<li><strong>running如果有问题。继续通知 failed 。调用所有 Listener 的 failed；通知所有的监听器 failed</strong></li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public interface Bootstrapper &#123;\n\n\t&#x2F;**\n\t * Initialize the given &#123;@link BootstrapRegistry&#125; with any required registrations.\n\t * @param registry the registry to initialize\n\t *&#x2F;\n\tvoid intitialize(BootstrapRegistry registry);\n\n&#125;</code></pre>\n\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1354552/1607005958877-bf152e3e-4d2d-42b6-a08c-ceef9870f3b6.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_18,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1354552/1607004823889-8373cea4-6305-40c1-af3b-921b071a28a8.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_20,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1354552/1607006112013-6ed5c0a0-3e02-4bf1-bdb7-423e0a0b3f3c.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_18,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@FunctionalInterface\npublic interface ApplicationRunner &#123;\n\n\t&#x2F;**\n\t * Callback used to run the bean.\n\t * @param args incoming application arguments\n\t * @throws Exception on error\n\t *&#x2F;\n\tvoid run(ApplicationArguments args) throws Exception;\n\n&#125;\n@FunctionalInterface\npublic interface CommandLineRunner &#123;\n\n\t&#x2F;**\n\t * Callback used to run the bean.\n\t * @param args incoming main method arguments\n\t * @throws Exception on error\n\t *&#x2F;\n\tvoid run(String... args) throws Exception;\n\n&#125;</code></pre>\n\n<h2 id=\"-4\"><a href=\"#-4\" class=\"headerlink\" title=\"\"></a></h2><h2 id=\"2、Application-Events-and-Listeners\"><a href=\"#2、Application-Events-and-Listeners\" class=\"headerlink\" title=\"2、Application Events and Listeners\"></a>2、Application Events and Listeners</h2><p><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-application-events-and-listeners\">https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-application-events-and-listeners</a></p>\n<p><strong>ApplicationContextInitializer</strong></p>\n<p><strong>ApplicationListener</strong></p>\n<p><strong>SpringApplicationRunListener</strong></p>\n<h2 id=\"3、ApplicationRunner-与-CommandLineRunner\"><a href=\"#3、ApplicationRunner-与-CommandLineRunner\" class=\"headerlink\" title=\"3、ApplicationRunner 与 CommandLineRunner\"></a>3、ApplicationRunner 与 CommandLineRunner</h2><h1 id=\"第一季：SpringBoot2核心技术-场景整合\"><a href=\"#第一季：SpringBoot2核心技术-场景整合\" class=\"headerlink\" title=\"第一季：SpringBoot2核心技术-场景整合\"></a><strong>第一季：SpringBoot2核心技术-场景整合</strong></h1>","text":"[TOC] idea：ctrl+alt+v 快速引进变量，自动补全函数返回值 &#x3D;&#x3D;win+shift+s&#x3D;&#x3D;：windows截屏工具快捷键！！！ 第一季：SpringBoot2核心技术-基础入门01、背景Faas：函数式服务 Serverl...","link":"","photos":[],"count_time":{"symbolsCount":"177k","symbolsTime":"2:41"},"categories":[{"name":"SpringBoot2","slug":"SpringBoot2","count":1,"path":"api/categories/SpringBoot2.json"}],"tags":[{"name":"SpringBoot2","slug":"SpringBoot2","count":1,"path":"api/tags/SpringBoot2.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%80%E5%AD%A3%EF%BC%9ASpringBoot2%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8\"><span class=\"toc-text\">第一季：SpringBoot2核心技术-基础入门</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#01%E3%80%81%E8%83%8C%E6%99%AF\"><span class=\"toc-text\">01、背景</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%86%E5%B8%83%E5%BC%8F%E7%9A%84%E5%9B%B0%E9%9A%BE\"><span class=\"toc-text\">分布式的困难</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%8A%E4%BA%91%E7%9A%84%E5%9B%B0%E9%9A%BE\"><span class=\"toc-text\">上云的困难</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#02%E3%80%81%E5%85%A5%E9%97%A8%E3%80%90%E5%AE%98%E7%BD%91%E6%96%87%E6%A1%A3%E3%80%91\"><span class=\"toc-text\">02、入门【官网文档】</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#03%E3%80%81%E4%BA%86%E8%A7%A3%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86%EF%BC%81%EF%BC%81%EF%BC%81\"><span class=\"toc-text\">03、了解自动配置原理！！！</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1%E3%80%81SpringBoot%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">1、SpringBoot特点</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-1%E3%80%81%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">1.1、依赖管理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-2%E3%80%81%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">1.2、自动配置</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2%E3%80%81%E5%AE%B9%E5%99%A8%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">2、容器功能</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-1%E3%80%81%E7%BB%84%E4%BB%B6%E6%B7%BB%E5%8A%A0\"><span class=\"toc-text\">2.1、组件添加</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81-Configuration\"><span class=\"toc-text\">1、@Configuration</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81-Bean%E3%80%81-Component%E3%80%81-Controller%E3%80%81-Service%E3%80%81-Repository\"><span class=\"toc-text\">2、@Bean、@Component、@Controller、@Service、@Repository</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3%E3%80%81-ComponentScan%E3%80%81-Import\"><span class=\"toc-text\">3、@ComponentScan、@Import</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4%E3%80%81-Conditional\"><span class=\"toc-text\">4、@Conditional</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-2%E3%80%81%E5%8E%9F%E7%94%9F%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%BC%95%E5%85%A5\"><span class=\"toc-text\">2.2、原生配置文件引入</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81-ImportResource\"><span class=\"toc-text\">1、@ImportResource</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-3%E3%80%81%E9%85%8D%E7%BD%AE%E7%BB%91%E5%AE%9A\"><span class=\"toc-text\">2.3、配置绑定</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3%E3%80%81%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86%E5%85%A5%E9%97%A8\"><span class=\"toc-text\">3、自动配置原理入门</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-1%E3%80%81%E5%BC%95%E5%AF%BC%E5%8A%A0%E8%BD%BD%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E7%B1%BB\"><span class=\"toc-text\">3.1、引导加载自动配置类</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81-SpringBootConfiguration\"><span class=\"toc-text\">1、@SpringBootConfiguration</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81-ComponentScan\"><span class=\"toc-text\">2、@ComponentScan</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3%E3%80%81-EnableAutoConfiguration\"><span class=\"toc-text\">3、@EnableAutoConfiguration</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1%E3%80%81-AutoConfigurationPackage\"><span class=\"toc-text\">1、@AutoConfigurationPackage</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2%E3%80%81-Import-AutoConfigurationImportSelector-class\"><span class=\"toc-text\">2、@Import(AutoConfigurationImportSelector.class)</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-2%E3%80%81%E6%8C%89%E9%9C%80%E5%BC%80%E5%90%AF%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E9%A1%B9\"><span class=\"toc-text\">3.2、按需开启自动配置项</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-3%E3%80%81%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">3.3、修改默认配置</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\"></span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#-1\"><span class=\"toc-text\"></span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-4%E3%80%81%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5\"><span class=\"toc-text\">3.4、最佳实践</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#4%E3%80%81%E5%BC%80%E5%8F%91%E5%B0%8F%E6%8A%80%E5%B7%A7\"><span class=\"toc-text\">4、开发小技巧</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-1%E3%80%81Lombok\"><span class=\"toc-text\">4.1、Lombok</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-2%E3%80%81dev-tools-%E3%80%90ctrl-shift-F9-autorestart%E3%80%91\"><span class=\"toc-text\">4.2、dev-tools 【ctrl(+shift)+F9 autorestart】</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-3%E3%80%81Spring-Initailizr%EF%BC%88%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96%E5%90%91%E5%AF%BC%EF%BC%89\"><span class=\"toc-text\">4.3、Spring Initailizr（项目初始化向导）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0%E3%80%81%E9%80%89%E6%8B%A9%E6%88%91%E4%BB%AC%E9%9C%80%E8%A6%81%E7%9A%84%E5%BC%80%E5%8F%91%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">0、选择我们需要的开发场景</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81%E8%87%AA%E5%8A%A8%E4%BE%9D%E8%B5%96%E5%BC%95%E5%85%A5\"><span class=\"toc-text\">1、自动依赖引入</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81%E8%87%AA%E5%8A%A8%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">2、自动创建项目结构</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3%E3%80%81%E8%87%AA%E5%8A%A8%E7%BC%96%E5%86%99%E5%A5%BD%E4%B8%BB%E9%85%8D%E7%BD%AE%E7%B1%BB\"><span class=\"toc-text\">3、自动编写好主配置类</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%80%E5%AD%A3%EF%BC%9ASpringBoot2%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E6%A0%B8%E5%BF%83%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">第一季：SpringBoot2核心技术-核心功能</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#04%E3%80%81%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">04、配置文件</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1%E3%80%81%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">1、文件类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-1%E3%80%81properties\"><span class=\"toc-text\">1.1、properties</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-2%E3%80%81yaml\"><span class=\"toc-text\">1.2、yaml</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2-1%E3%80%81%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">1.2.1、简介</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2-2%E3%80%81%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">1.2.2、基本语法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2-3%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">1.2.3、数据类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2-4%E3%80%81%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">1.2.4、示例</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2%E3%80%81%E9%85%8D%E7%BD%AE%E6%8F%90%E7%A4%BA\"><span class=\"toc-text\">2、配置提示</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#05%E3%80%81Web%E5%BC%80%E5%8F%91\"><span class=\"toc-text\">05、Web开发</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1%E3%80%81SpringMVC%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E6%A6%82%E8%A7%88\"><span class=\"toc-text\">1、SpringMVC自动配置概览</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2%E3%80%81%E7%AE%80%E5%8D%95%E5%8A%9F%E8%83%BD%E5%88%86%E6%9E%90\"><span class=\"toc-text\">2、简单功能分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-1%E3%80%81%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE\"><span class=\"toc-text\">2.1、静态资源访问</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E7%9B%AE%E5%BD%95\"><span class=\"toc-text\">1、静态资源目录</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81%E9%9D%99%E6%80%81%E3%80%90%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE%E5%89%8D%E7%BC%80%E3%80%91\"><span class=\"toc-text\">2、静态【资源访问前缀】</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3%E3%80%81webjars\"><span class=\"toc-text\">3、webjars</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-2%E3%80%81%E6%AC%A2%E8%BF%8E%E9%A1%B5%E6%94%AF%E6%8C%81\"><span class=\"toc-text\">2.2、欢迎页支持</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-3%E3%80%81%E8%87%AA%E5%AE%9A%E4%B9%89-Favicon\"><span class=\"toc-text\">2.3、自定义 Favicon</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-4%E3%80%81%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">2.4、静态资源配置原理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1%E3%80%81%E9%85%8D%E7%BD%AE%E7%B1%BB%E5%8F%AA%E6%9C%89%E4%B8%80%E4%B8%AA%E6%9C%89%E5%8F%82%E6%9E%84%E9%80%A0%E5%99%A8%EF%BC%9A%E6%89%80%E6%9C%89%E5%8F%82%E6%95%B0%E7%9A%84%E5%80%BC%E9%83%BD%E4%BC%9A%E4%BB%8E%E5%AE%B9%E5%99%A8%E4%B8%AD%E7%A1%AE%E5%AE%9A\"><span class=\"toc-text\">1、配置类只有一个有参构造器：所有参数的值都会从容器中确定</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2%E3%80%81%E8%B5%84%E6%BA%90%E5%A4%84%E7%90%86%E7%9A%84%E9%BB%98%E8%AE%A4%E8%A7%84%E5%88%99\"><span class=\"toc-text\">2、资源处理的默认规则</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3%E3%80%81%E6%AC%A2%E8%BF%8E%E9%A1%B5%E7%9A%84%E5%A4%84%E7%90%86%E8%A7%84%E5%88%99\"><span class=\"toc-text\">3、欢迎页的处理规则</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4%E3%80%81favicon\"><span class=\"toc-text\">4、favicon</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3%E3%80%81%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E5%A4%84%E7%90%86%E3%80%90-x3D-x3D-%EF%BC%81%E9%87%8D%E8%A6%81%EF%BC%81-x3D-x3D-%E3%80%91\"><span class=\"toc-text\">3、请求参数处理【&#x3D;&#x3D;！重要！&#x3D;&#x3D;】</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0%E3%80%81%E8%AF%B7%E6%B1%82%E6%98%A0%E5%B0%84-RequestMapping\"><span class=\"toc-text\">0、请求映射  @RequestMapping</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81rest%E4%BD%BF%E7%94%A8%E4%B8%8E%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">1、rest使用与原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81%E8%AF%B7%E6%B1%82%E6%98%A0%E5%B0%84%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">2、请求映射原理</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%EF%BC%81%EF%BC%81%EF%BC%81%E5%BE%85%E5%A1%AB%E5%9D%91ing-%E8%87%AA%E5%AE%9A%E4%B9%89-HandlerMapping\"><span class=\"toc-text\">！！！待填坑ing~~[自定义 HandlerMapping]</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81%E6%99%AE%E9%80%9A%E5%8F%82%E6%95%B0%E4%B8%8E%E5%9F%BA%E6%9C%AC%E6%B3%A8%E8%A7%A3%E3%80%90-x3D-x3D-%EF%BC%81%E9%87%8D%E8%A6%81%EF%BC%81-x3D-x3D-%E3%80%91\"><span class=\"toc-text\">1、普通参数与基本注解【&#x3D;&#x3D;！重要！&#x3D;&#x3D;】</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-1%E3%80%81%E6%B3%A8%E8%A7%A3%EF%BC%9A\"><span class=\"toc-text\">1.1、注解：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2%E3%80%81Servlet-API%EF%BC%9A\"><span class=\"toc-text\">1.2、Servlet API：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-3%E3%80%81%E5%A4%8D%E6%9D%82%E5%8F%82%E6%95%B0%EF%BC%9A\"><span class=\"toc-text\">1.3、复杂参数：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-4%E3%80%81%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AF%B9%E8%B1%A1%E5%8F%82%E6%95%B0%EF%BC%9A%E8%A1%A8%E5%8D%95post%E2%80%93-gt-json%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">1.4、自定义对象参数：表单post–&gt;json对象</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81POJO%E5%B0%81%E8%A3%85%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">2、POJO封装过程</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3%E3%80%81%E5%8F%82%E6%95%B0%E5%A4%84%E7%90%86%E3%80%90%E5%8E%9F%E7%90%86%E3%80%91\"><span class=\"toc-text\">3、参数处理【原理】</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81HandlerAdapter\"><span class=\"toc-text\">1、HandlerAdapter</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81%E6%89%A7%E8%A1%8C%E7%9B%AE%E6%A0%87%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">2、执行目标方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3%E3%80%81%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90%E5%99%A8-HandlerMethodArgumentResolver\"><span class=\"toc-text\">3、参数解析器-HandlerMethodArgumentResolver</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4%E3%80%81%E8%BF%94%E5%9B%9E%E5%80%BC%E5%A4%84%E7%90%86%E5%99%A8\"><span class=\"toc-text\">4、返回值处理器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5%E3%80%81%E5%A6%82%E4%BD%95%E7%A1%AE%E5%AE%9A%E7%9B%AE%E6%A0%87%E6%96%B9%E6%B3%95%E6%AF%8F%E4%B8%80%E4%B8%AA%E5%8F%82%E6%95%B0%E7%9A%84%E5%80%BC\"><span class=\"toc-text\">5、如何确定目标方法每一个参数的值</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-1%E3%80%81%E6%8C%A8%E4%B8%AA%E5%88%A4%E6%96%AD%E6%89%80%E6%9C%89%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90%E5%99%A8%E9%82%A3%E4%B8%AA%E6%94%AF%E6%8C%81%E8%A7%A3%E6%9E%90%E8%BF%99%E4%B8%AA%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">5.1、挨个判断所有参数解析器那个支持解析这个参数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-2%E3%80%81%E8%A7%A3%E6%9E%90%E8%BF%99%E4%B8%AA%E5%8F%82%E6%95%B0%E7%9A%84%E5%80%BC\"><span class=\"toc-text\">5.2、解析这个参数的值</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-3%E3%80%81%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B%E5%8F%82%E6%95%B0-%E5%B0%81%E8%A3%85POJO\"><span class=\"toc-text\">5.3、自定义类型参数 封装POJO</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89-Converter%EF%BC%81%EF%BC%81%EF%BC%81%EF%BC%81%EF%BC%81\"><span class=\"toc-text\">自定义 Converter！！！！！</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6%E3%80%81%E7%9B%AE%E6%A0%87%E6%96%B9%E6%B3%95%E6%89%A7%E8%A1%8C%E5%AE%8C%E6%88%90\"><span class=\"toc-text\">6、目标方法执行完成</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7%E3%80%81%E5%A4%84%E7%90%86%E6%B4%BE%E5%8F%91%E7%BB%93%E6%9E%9C\"><span class=\"toc-text\">7、处理派发结果</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#4%E3%80%81%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94%E4%B8%8E%E5%86%85%E5%AE%B9%E5%8D%8F%E5%95%86\"><span class=\"toc-text\">4、数据响应与内容协商</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81%E5%93%8D%E5%BA%94JSON\"><span class=\"toc-text\">1、响应JSON</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-1%E3%80%81jackson-jar-ResponseBody\"><span class=\"toc-text\">1.1、jackson.jar+@ResponseBody</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1%E3%80%81%E8%BF%94%E5%9B%9E%E5%80%BC%E8%A7%A3%E6%9E%90%E5%99%A8\"><span class=\"toc-text\">1、返回值解析器</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2%E3%80%81%E8%BF%94%E5%9B%9E%E5%80%BC%E8%A7%A3%E6%9E%90%E5%99%A8%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">2、返回值解析器原理</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2%E3%80%81SpringMVC%E5%88%B0%E5%BA%95%E6%94%AF%E6%8C%81%E5%93%AA%E4%BA%9B%E8%BF%94%E5%9B%9E%E5%80%BC\"><span class=\"toc-text\">1.2、SpringMVC到底支持哪些返回值</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-3%E3%80%81HTTPMessageConverter%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">1.3、HTTPMessageConverter原理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1%E3%80%81MessageConverter%E8%A7%84%E8%8C%83\"><span class=\"toc-text\">1、MessageConverter规范</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2%E3%80%81%E9%BB%98%E8%AE%A4%E7%9A%84MessageConverter\"><span class=\"toc-text\">2、默认的MessageConverter</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81%E5%86%85%E5%AE%B9%E5%8D%8F%E5%95%86\"><span class=\"toc-text\">2、内容协商</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81%E5%BC%95%E5%85%A5xml%E4%BE%9D%E8%B5%96\"><span class=\"toc-text\">1、引入xml依赖</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81postman%E5%88%86%E5%88%AB%E6%B5%8B%E8%AF%95%E8%BF%94%E5%9B%9Ejson%E5%92%8Cxml\"><span class=\"toc-text\">2、postman分别测试返回json和xml</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3%E3%80%81%E5%BC%80%E5%90%AF%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8F%82%E6%95%B0%E6%96%B9%E5%BC%8F%E5%86%85%E5%AE%B9%E5%8D%8F%E5%95%86%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">3、开启浏览器参数方式内容协商功能</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4%E3%80%81%E5%86%85%E5%AE%B9%E5%8D%8F%E5%95%86%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">4、内容协商原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5%E3%80%81%E8%87%AA%E5%AE%9A%E4%B9%89-MessageConverter%EF%BC%81%EF%BC%81%EF%BC%81%EF%BC%81%EF%BC%81%EF%BC%81\"><span class=\"toc-text\">5、自定义 MessageConverter！！！！！！</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#5%E3%80%81%E8%A7%86%E5%9B%BE%E8%A7%A3%E6%9E%90%E4%B8%8E%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E\"><span class=\"toc-text\">5、视图解析与模板引擎</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81%E8%A7%86%E5%9B%BE%E8%A7%A3%E6%9E%90\"><span class=\"toc-text\">1、视图解析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81%E8%A7%86%E5%9B%BE%E8%A7%A3%E6%9E%90%E5%8E%9F%E7%90%86%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">1、视图解析原理流程</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E-Thymeleaf%EF%BC%88%E6%80%A7%E8%83%BD%E4%B8%8D%E9%AB%98-%E4%B8%8D%E8%83%BD%E9%AB%98%E5%B9%B6%E5%8F%91%EF%BC%89\"><span class=\"toc-text\">2、模板引擎-Thymeleaf（性能不高 不能高并发）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81thymeleaf%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">1、thymeleaf简介</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">2、基本语法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1%E3%80%81%E8%A1%A8%E8%BE%BE%E5%BC%8F\"><span class=\"toc-text\">1、表达式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2%E3%80%81%E5%AD%97%E9%9D%A2%E9%87%8F\"><span class=\"toc-text\">2、字面量</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3%E3%80%81%E6%96%87%E6%9C%AC%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">3、文本操作</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4%E3%80%81%E6%95%B0%E5%AD%A6%E8%BF%90%E7%AE%97\"><span class=\"toc-text\">4、数学运算</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5%E3%80%81%E5%B8%83%E5%B0%94%E8%BF%90%E7%AE%97\"><span class=\"toc-text\">5、布尔运算</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6%E3%80%81%E6%AF%94%E8%BE%83%E8%BF%90%E7%AE%97\"><span class=\"toc-text\">6、比较运算</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7%E3%80%81%E6%9D%A1%E4%BB%B6%E8%BF%90%E7%AE%97\"><span class=\"toc-text\">7、条件运算</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#8%E3%80%81%E7%89%B9%E6%AE%8A%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">8、特殊操作</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3%E3%80%81%E8%AE%BE%E7%BD%AE%E5%B1%9E%E6%80%A7%E5%80%BC-th-attr\"><span class=\"toc-text\">3、设置属性值-th:attr</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4%E3%80%81%E8%BF%AD%E4%BB%A3\"><span class=\"toc-text\">4、迭代</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5%E3%80%81%E6%9D%A1%E4%BB%B6%E8%BF%90%E7%AE%97\"><span class=\"toc-text\">5、条件运算</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6%E3%80%81%E5%B1%9E%E6%80%A7%E4%BC%98%E5%85%88%E7%BA%A7\"><span class=\"toc-text\">6、属性优先级</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3%E3%80%81thymeleaf%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">3、thymeleaf使用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1%E3%80%81%E5%BC%95%E5%85%A5Starter\"><span class=\"toc-text\">1、引入Starter</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2%E3%80%81%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%A5%BD%E4%BA%86thymeleaf\"><span class=\"toc-text\">2、自动配置好了thymeleaf</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3%E3%80%81%E9%A1%B5%E9%9D%A2%E5%BC%80%E5%8F%91%E3%80%90%E5%88%9D%E4%BD%93%E9%AA%8C-%E5%B0%8F%E8%AF%95%E7%89%9B%E5%88%80-%E3%80%91-%E5%9F%9F%E4%B8%AD-th-%E8%A6%81%E4%BF%AE%E6%94%B9%E7%9A%84%E5%B1%9E%E6%80%A7-x3D-%E2%80%9D%E2%80%9D\"><span class=\"toc-text\">3、页面开发【初体验 小试牛刀~】                域中$  th:要修改的属性&#x3D;””</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4%E3%80%81%E6%9E%84%E5%BB%BA%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F-boot-05-web-admin\"><span class=\"toc-text\">4、构建后台管理系统   boot-05-web-admin</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81%E9%A1%B9%E7%9B%AE%E5%88%9B%E5%BB%BA\"><span class=\"toc-text\">1、项目创建</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E5%A4%84%E7%90%86\"><span class=\"toc-text\">2、静态资源处理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3%E3%80%81%E8%B7%AF%E5%BE%84%E6%9E%84%E5%BB%BA\"><span class=\"toc-text\">3、路径构建</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4%E3%80%81%E6%A8%A1%E6%9D%BF%E6%8A%BD%E5%8F%96%EF%BC%888%E3%80%81-Template-Layout%EF%BC%89\"><span class=\"toc-text\">4、模板抽取（8、 Template Layout）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5%E3%80%81%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC\"><span class=\"toc-text\">5、页面跳转</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6%E3%80%81%E6%95%B0%E6%8D%AE%E6%B8%B2%E6%9F%93-%E8%A1%A8%E6%A0%BC%E5%86%85%E5%AE%B9\"><span class=\"toc-text\">6、数据渲染[表格内容]</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%B7%A8%E5%9F%9FCORS%E2%80%A6%E2%80%A6ing\"><span class=\"toc-text\">[!]跨域CORS……ing</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#6%E3%80%81%E6%8B%A6%E6%88%AA%E5%99%A8\"><span class=\"toc-text\">6、拦截器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81HandlerInterceptor-%E6%8E%A5%E5%8F%A3-Ctrl-F12\"><span class=\"toc-text\">1、HandlerInterceptor 接口 (Ctrl+F12)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81%E9%85%8D%E7%BD%AE%E6%8B%A6%E6%88%AA%E5%99%A8\"><span class=\"toc-text\">2、配置拦截器</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3%E3%80%81%E6%8B%A6%E6%88%AA%E5%99%A8%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">3、拦截器原理</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#7%E3%80%81%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0\"><span class=\"toc-text\">7、文件上传</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81%E9%A1%B5%E9%9D%A2%E8%A1%A8%E5%8D%95\"><span class=\"toc-text\">1、页面表单</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">2、文件上传代码</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3%E3%80%81%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">3、自动配置原理</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#8%E3%80%81%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86-7-1-11-Error-Handling\"><span class=\"toc-text\">8、异常处理(7.1.11.Error Handling)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86\"><span class=\"toc-text\">1、错误处理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1%E3%80%81%E9%BB%98%E8%AE%A4%E8%A7%84%E5%88%99\"><span class=\"toc-text\">1、默认规则</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3%E3%80%81%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">3、异常处理自动配置原理</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81%E4%BD%BF%E7%94%A8RegistrationBean-%E6%8E%A8%E8%8D%90\"><span class=\"toc-text\">2、使用RegistrationBean(推荐)</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#10%E3%80%81%E5%B5%8C%E5%85%A5%E5%BC%8FServlet%E5%AE%B9%E5%99%A8-7-4-3\"><span class=\"toc-text\">10、嵌入式Servlet容器(7.4.3)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81%E5%88%87%E6%8D%A2%E5%B5%8C%E5%85%A5%E5%BC%8FServlet%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">1、切换嵌入式Servlet容器</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81%E5%AE%9A%E5%88%B6Servlet%E5%AE%B9%E5%99%A8-7-4-4\"><span class=\"toc-text\">2、定制Servlet容器 7.4.4</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#11%E3%80%81%E5%AE%9A%E5%88%B6%E5%8C%96%E5%8E%9F%E7%90%86%E3%80%90-x3D-x3D-Boot%E7%B2%BE%E9%AB%93%EF%BC%81-x3D-x3D-%E3%80%91\"><span class=\"toc-text\">11、定制化原理【&#x3D;&#x3D;Boot精髓！&#x3D;&#x3D;】</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81%E5%AE%9A%E5%88%B6%E5%8C%96%E7%9A%84%E5%B8%B8%E8%A7%81%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">1、定制化的常见方式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90-x3D-x3D-%E5%A5%97%E8%B7%AF-x3D-x3D\"><span class=\"toc-text\">2、原理分析&#x3D;&#x3D;套路&#x3D;&#x3D;</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#06%E3%80%81%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE\"><span class=\"toc-text\">06、数据访问</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1%E3%80%81SQL\"><span class=\"toc-text\">1、SQL</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81%E6%95%B0%E6%8D%AE%E6%BA%90%E7%9A%84%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE-HikariDataSource\"><span class=\"toc-text\">1、数据源的自动配置-HikariDataSource</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81%E5%AF%BC%E5%85%A5JDBC%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">1、导入JDBC场景</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Mysql5-5%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%81-5-5%E5%88%9D%E5%A7%8B%E6%97%A0%E5%AF%86%E7%A0%81%EF%BC%8C%E7%9B%B4%E6%8E%A5Enter\"><span class=\"toc-text\">Mysql5.5命令行修改密码 5.5初始无密码，直接Enter</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81%E5%88%86%E6%9E%90%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">2、分析自动配置</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1%E3%80%81%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E7%9A%84%E7%B1%BB\"><span class=\"toc-text\">1、自动配置的类</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3%E3%80%81%E4%BF%AE%E6%94%B9%E9%85%8D%E7%BD%AE%E9%A1%B9\"><span class=\"toc-text\">3、修改配置项</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4%E3%80%81%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">4、测试</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81%E4%BD%BF%E7%94%A8Druid%E6%95%B0%E6%8D%AE%E6%BA%90\"><span class=\"toc-text\">2、使用Druid数据源</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81druid%E5%AE%98%E6%96%B9github%E5%9C%B0%E5%9D%80\"><span class=\"toc-text\">1、druid官方github地址</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">2、自定义方式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1%E3%80%81%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E6%BA%90\"><span class=\"toc-text\">1、创建数据源</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2%E3%80%81StatViewServlet\"><span class=\"toc-text\">2、StatViewServlet</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3%E3%80%81StatFilter\"><span class=\"toc-text\">3、StatFilter</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3%E3%80%81%E4%BD%BF%E7%94%A8%E5%AE%98%E6%96%B9starter%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">3、使用官方starter方式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1%E3%80%81%E5%BC%95%E5%85%A5druid-starter\"><span class=\"toc-text\">1、引入druid-starter</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2%E3%80%81%E5%88%86%E6%9E%90%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE-1\"><span class=\"toc-text\">2、分析自动配置</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3%E3%80%81%E9%85%8D%E7%BD%AE%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">3、配置示例</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3%E3%80%81%E6%95%B4%E5%90%88MyBatis%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">3、整合MyBatis操作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81%E9%85%8D%E7%BD%AE%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">1、配置模式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81%E6%B3%A8%E8%A7%A3%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">2、注解模式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3%E3%80%81%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">3、混合模式</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4%E3%80%81%E6%95%B4%E5%90%88-MyBatis-Plus-%E5%AE%8C%E6%88%90CRUD\"><span class=\"toc-text\">4、整合 MyBatis-Plus 完成CRUD</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AFMyBatis-Plus\"><span class=\"toc-text\">1、什么是MyBatis-Plus</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81%E6%95%B4%E5%90%88MyBatis-Plus\"><span class=\"toc-text\">2、整合MyBatis-Plus</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3%E3%80%81CRUD%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">3、CRUD功能</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6\"><span class=\"toc-text\">分页插件</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2%E3%80%81NoSQL\"><span class=\"toc-text\">2、NoSQL</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81Redis%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">1、Redis自动配置</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81RedisTemplate%E4%B8%8ELettuce\"><span class=\"toc-text\">2、RedisTemplate与Lettuce</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3%E3%80%81%E5%88%87%E6%8D%A2%E8%87%B3jedis\"><span class=\"toc-text\">3、切换至jedis</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#07%E3%80%81%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">07、单元测试</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1%E3%80%81JUnit5-%E7%9A%84%E5%8F%98%E5%8C%96\"><span class=\"toc-text\">1、JUnit5 的变化</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2%E3%80%81JUnit5%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3-x3D-x3D-P72%E2%80%A6%E5%BE%85%E7%9C%8B-x3D-x3D\"><span class=\"toc-text\">2、JUnit5常用注解[&#x3D;&#x3D;P72…待看~&#x3D;&#x3D;]</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3%E3%80%81%E6%96%AD%E8%A8%80%EF%BC%88assertions%EF%BC%89\"><span class=\"toc-text\">3、断言（assertions）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81%E7%AE%80%E5%8D%95%E6%96%AD%E8%A8%80\"><span class=\"toc-text\">1、简单断言</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81%E6%95%B0%E7%BB%84%E6%96%AD%E8%A8%80\"><span class=\"toc-text\">2、数组断言</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3%E3%80%81%E7%BB%84%E5%90%88%E6%96%AD%E8%A8%80\"><span class=\"toc-text\">3、组合断言</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4%E3%80%81%E5%BC%82%E5%B8%B8%E6%96%AD%E8%A8%80\"><span class=\"toc-text\">4、异常断言</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5%E3%80%81%E8%B6%85%E6%97%B6%E6%96%AD%E8%A8%80\"><span class=\"toc-text\">5、超时断言</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6%E3%80%81%E5%BF%AB%E9%80%9F%E5%A4%B1%E8%B4%A5\"><span class=\"toc-text\">6、快速失败</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#4%E3%80%81%E5%89%8D%E7%BD%AE%E6%9D%A1%E4%BB%B6%EF%BC%88assumptions%EF%BC%89\"><span class=\"toc-text\">4、前置条件（assumptions）</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#5%E3%80%81%E5%B5%8C%E5%A5%97%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">5、嵌套测试</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#6%E3%80%81%E5%8F%82%E6%95%B0%E5%8C%96%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">6、参数化测试</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#7%E3%80%81%E8%BF%81%E7%A7%BB%E6%8C%87%E5%8D%97\"><span class=\"toc-text\">7、迁移指南</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#08%E3%80%81%E6%8C%87%E6%A0%87%E7%9B%91%E6%8E%A7\"><span class=\"toc-text\">08、指标监控</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1%E3%80%81SpringBoot-Actuator\"><span class=\"toc-text\">1、SpringBoot Actuator</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">1、简介</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%811-x%E4%B8%8E2-x%E7%9A%84%E4%B8%8D%E5%90%8C\"><span class=\"toc-text\">2、1.x与2.x的不同</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3%E3%80%81%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">3、如何使用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4%E3%80%81%E5%8F%AF%E8%A7%86%E5%8C%96\"><span class=\"toc-text\">4、可视化</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2%E3%80%81Actuator-Endpoint\"><span class=\"toc-text\">2、Actuator Endpoint</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81%E6%9C%80%E5%B8%B8%E4%BD%BF%E7%94%A8%E7%9A%84%E7%AB%AF%E7%82%B9\"><span class=\"toc-text\">1、最常使用的端点</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81Health-Endpoint\"><span class=\"toc-text\">2、Health Endpoint</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3%E3%80%81Metrics-Endpoint\"><span class=\"toc-text\">3、Metrics Endpoint</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4%E3%80%81%E7%AE%A1%E7%90%86Endpoints\"><span class=\"toc-text\">4、管理Endpoints</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81%E5%BC%80%E5%90%AF%E4%B8%8E%E7%A6%81%E7%94%A8Endpoints\"><span class=\"toc-text\">1、开启与禁用Endpoints</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81%E6%9A%B4%E9%9C%B2Endpoints\"><span class=\"toc-text\">2、暴露Endpoints</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3%E3%80%81%E5%AE%9A%E5%88%B6-Endpoint\"><span class=\"toc-text\">3、定制 Endpoint</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81%E5%AE%9A%E5%88%B6-Health-%E4%BF%A1%E6%81%AF\"><span class=\"toc-text\">1、定制 Health 信息</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#-2\"><span class=\"toc-text\"></span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81%E5%AE%9A%E5%88%B6info%E4%BF%A1%E6%81%AF\"><span class=\"toc-text\">2、定制info信息</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1%E3%80%81%E7%BC%96%E5%86%99%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">1、编写配置文件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2%E3%80%81%E7%BC%96%E5%86%99InfoContributor\"><span class=\"toc-text\">2、编写InfoContributor</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3%E3%80%81%E5%AE%9A%E5%88%B6Metrics%E4%BF%A1%E6%81%AF\"><span class=\"toc-text\">3、定制Metrics信息</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1%E3%80%81SpringBoot%E6%94%AF%E6%8C%81%E8%87%AA%E5%8A%A8%E9%80%82%E9%85%8D%E7%9A%84Metrics\"><span class=\"toc-text\">1、SpringBoot支持自动适配的Metrics</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2%E3%80%81%E5%A2%9E%E5%8A%A0%E5%AE%9A%E5%88%B6Metrics\"><span class=\"toc-text\">2、增加定制Metrics</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4%E3%80%81%E5%AE%9A%E5%88%B6Endpoint\"><span class=\"toc-text\">4、定制Endpoint</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#09%E3%80%81%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90\"><span class=\"toc-text\">09、原理解析</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1%E3%80%81Profile%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">1、Profile功能</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81application-profile%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">1、application-profile功能</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81-Profile%E6%9D%A1%E4%BB%B6%E8%A3%85%E9%85%8D%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">2、@Profile条件装配功能</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3%E3%80%81profile%E5%88%86%E7%BB%84\"><span class=\"toc-text\">3、profile分组</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2%E3%80%81%E5%A4%96%E9%83%A8%E5%8C%96%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">2、外部化配置</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#-3\"><span class=\"toc-text\"></span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81%E5%A4%96%E9%83%A8%E9%85%8D%E7%BD%AE%E6%BA%90\"><span class=\"toc-text\">1、外部配置源</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%9F%A5%E6%89%BE%E4%BD%8D%E7%BD%AE\"><span class=\"toc-text\">2、配置文件查找位置</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3%E3%80%81%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%8A%A0%E8%BD%BD%E9%A1%BA%E5%BA%8F%EF%BC%9A\"><span class=\"toc-text\">3、配置文件加载顺序：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4%E3%80%81%E6%8C%87%E5%AE%9A%E7%8E%AF%E5%A2%83%E4%BC%98%E5%85%88%EF%BC%8C%E5%A4%96%E9%83%A8%E4%BC%98%E5%85%88%EF%BC%8C%E5%90%8E%E9%9D%A2%E7%9A%84%E5%8F%AF%E4%BB%A5%E8%A6%86%E7%9B%96%E5%89%8D%E9%9D%A2%E7%9A%84%E5%90%8C%E5%90%8D%E9%85%8D%E7%BD%AE%E9%A1%B9\"><span class=\"toc-text\">4、指定环境优先，外部优先，后面的可以覆盖前面的同名配置项</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3%E3%80%81%E8%87%AA%E5%AE%9A%E4%B9%89starter\"><span class=\"toc-text\">3、自定义starter</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81starter%E5%90%AF%E5%8A%A8%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">1、starter启动原理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81%E8%87%AA%E5%AE%9A%E4%B9%89starter\"><span class=\"toc-text\">2、自定义starter</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#4%E3%80%81SpringBoot%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">4、SpringBoot原理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81SpringBoot%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">1、SpringBoot启动过程</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#-4\"><span class=\"toc-text\"></span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81Application-Events-and-Listeners\"><span class=\"toc-text\">2、Application Events and Listeners</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3%E3%80%81ApplicationRunner-%E4%B8%8E-CommandLineRunner\"><span class=\"toc-text\">3、ApplicationRunner 与 CommandLineRunner</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%80%E5%AD%A3%EF%BC%9ASpringBoot2%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E5%9C%BA%E6%99%AF%E6%95%B4%E5%90%88\"><span class=\"toc-text\">第一季：SpringBoot2核心技术-场景整合</span></a></li></ol>","author":{"name":"CodingSeed","slug":"blog-author","avatar":"http://cache.itzy8.top/img/a.jpg","link":"/","description":"","socials":{"github":"https://github.com/codingseed","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Leetcode1-500","uid":"ab2eededdd25843ff0dfd005b352f815","slug":"Leetcode1-500","date":"2021-08-16T13:41:20.000Z","updated":"2022-08-22T10:05:11.593Z","comments":true,"path":"api/articles/Leetcode1-500.json","keywords":null,"cover":"http://browser9.qhimg.com/bdm/960_593_0/t01039b44f7c7ca5ca3.jpg","text":"1.两数之和 找sum的2个idx:2sum (枚举Si,find之前是否存在target-Si [hash表 O(1)search])平衡树：map O(logn) –&gt; hash表：unordered_map O(1):target-Si hash[val] &#x3D...","link":"","photos":[],"count_time":{"symbolsCount":"447k","symbolsTime":"6:46"},"categories":[{"name":"算法","slug":"算法","count":3,"path":"api/categories/算法.json"}],"tags":[{"name":"算法","slug":"算法","count":3,"path":"api/tags/算法.json"}],"author":{"name":"CodingSeed","slug":"blog-author","avatar":"http://cache.itzy8.top/img/a.jpg","link":"/","description":"","socials":{"github":"https://github.com/codingseed","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"kof97逆向","uid":"6f87183d1eab90b4f00ad401576c1de7","slug":"kof97逆向","date":"2021-02-17T12:24:13.000Z","updated":"2022-08-22T08:54:49.524Z","comments":true,"path":"api/articles/kof97逆向.json","keywords":null,"cover":"http://browser9.qhimg.com/bdm/960_593_0/t019f442db069339645.jpg","text":"1Hack rom 教程https://cloud.tencent.com/developer/article/1176843kof97http://www.winkawaks.org/roms/neogeo/index.htm F5存档F7读档 neogeo:debug dip...","link":"","photos":[],"count_time":{"symbolsCount":"8.1k","symbolsTime":"7 mins."},"categories":[{"name":"逆向","slug":"逆向","count":5,"path":"api/categories/逆向.json"}],"tags":[{"name":"游戏逆向","slug":"游戏逆向","count":1,"path":"api/tags/游戏逆向.json"}],"author":{"name":"CodingSeed","slug":"blog-author","avatar":"http://cache.itzy8.top/img/a.jpg","link":"/","description":"","socials":{"github":"https://github.com/codingseed","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false}}