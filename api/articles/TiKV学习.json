{"title":"TiKV学习","uid":"b4b469edf0864513cb59986e5c3c8faf","slug":"TiKV学习","date":"2021-12-17T03:10:40.000Z","updated":"2022-08-22T07:58:37.485Z","comments":true,"path":"api/articles/TiKV学习.json","keywords":null,"cover":"http://p7.qhimg.com/bdm/960_593_0/t0126965e612a7835ac.jpg","content":"<p>[TOC]</p>\n<h1 id=\"开源\"><a href=\"#开源\" class=\"headerlink\" title=\"开源\"></a>开源</h1><p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211119183420495.png\" alt=\"image-20211119183420495\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211119183453383.png\" alt=\"image-20211119183453383\"></p>\n<p>$ git config –global http.sslBackend “openssl”</p>\n<p>$ git config –global http.sslCAInfo “D:&#x2F;Software&#x2F;Program Files&#x2F;Git&#x2F;mingw64&#x2F;ssl&#x2F;cert.pem”</p>\n<p>git clone <a href=\"https://github.com/tidb-incubator/tinysql.git\">https://github.com/tidb-incubator/tinysql.git</a></p>\n<p>建议课外阅读材料 </p>\n<p>◦ ⾸推 TinyKV 中的 reading list <a href=\"https://github.com/tidb-incubator/tinykv/blob/course/doc/reading_list.md\">https://github.com/tidb-incubator/tinykv/blob/course/doc/reading_list.md</a> </p>\n<p>◦ PCTP 课程 TinyKV 学习营专版（稍晚附上链接） </p>\n<p>◦ TiKV 源码系列 <a href=\"https://pingcap.com/zh/search?keywords=TiKV%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%B3%BB%E5%88%97\">https://pingcap.com/zh/search?keywords=TiKV%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%B3%BB%E5%88%97</a></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211119162246592.png\" alt=\"image-20211119162246592\"></p>\n<p>SQL优化器</p>\n<p>统计信息–代价模型：最优执行计划</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211119162523649.png\" alt=\"image-20211119162523649\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211119162628135.png\" alt=\"image-20211119162628135\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211119162836122.png\" alt=\"image-20211119162836122\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211119163332243.png\" alt=\"image-20211119163332243\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211119163458400.png\" alt=\"image-20211119163458400\"></p>\n<p>tidb&#x2F;community:</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211119164228385.png\" alt=\"image-20211119164228385\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211119170024005.png\" alt=\"image-20211119170024005\"></p>\n<p>◦ TiKV 源码系列 <a href=\"https://pingcap.com/zh/search?keywords=TiKV%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%B3%BB%E5%88%97\">https://pingcap.com/zh/search?keywords=TiKV%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%B3%BB%E5%88%97</a></p>\n<p>TiDB源码阅读系列文章：</p>\n<p><a href=\"https://pingcap.com/zh/blog/?tag=TiDB%20%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB\">https://pingcap.com/zh/blog/?tag=TiDB%20%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB</a></p>\n<p>DDL：</p>\n<p><a href=\"https://pingcap.com/zh/blog/tidb-source-code-reading-17\">https://pingcap.com/zh/blog/tidb-source-code-reading-17</a></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211119170512070.png\" alt=\"image-20211119170512070\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211119170909851.png\" alt=\"image-20211119170909851\"></p>\n<p>mysql 改好了~</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211119171032411.png\" alt=\"image-20211119171032411\"></p>\n<p>linux个人英雄主义</p>\n<p>hadoop竞争</p>\n<p>大佬主持管理  公开招募（开源3.0）   带薪开源！</p>\n<p>TiDB—知乎底层          学习、写论文</p>\n<p>———-mobaik摩拜单车</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211119172006906.png\" alt=\"image-20211119172006906\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211119172056131.png\" alt=\"image-20211119172056131\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211119172127236.png\" alt=\"image-20211119172127236\"></p>\n<p>github流程</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211119172332748.png\" alt=\"image-20211119172332748\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211119172624597.png\" alt=\"image-20211119172624597\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211119172559022.png\" alt=\"image-20211119172559022\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211119173118427.png\" alt=\"image-20211119173118427\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211119173207040.png\" alt=\"image-20211119173207040\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211119173347306.png\" alt=\"image-20211119173347306\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211119173410786.png\" alt=\"image-20211119173410786\"></p>\n<p>。。。</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211119173703833.png\" alt=\"image-20211119173703833\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211119173758969.png\" alt=\"image-20211119173758969\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211119173831418.png\" alt=\"image-20211119173831418\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211119173848952.png\" alt=\"image-20211119173848952\"></p>\n<p>tidb CICD</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211119173940826.png\" alt=\"image-20211119173940826\"></p>\n<p>merge； contributor了</p>\n<p>开始学吧hhhhhhhhhhhh：</p>\n<p><a href=\"https://github.com/pingcap/talent-plan\">https://github.com/pingcap/talent-plan</a></p>\n<p>CNCF基金会 有钱-&gt;CUB  云原生 灵活</p>\n<p>chaos mesh 测试平台</p>\n<p><a href=\"https://www.codedump.info/post/20180921-raft/\">https://www.codedump.info/post/20180921-raft/</a></p>\n<p><a href=\"https://github.com/baidu/braft/blob/master/docs/cn/raft_protocol.md\">https://github.com/baidu/braft/blob/master/docs/cn/raft_protocol.md</a></p>\n<p><a href=\"https://github.com/roseduan/rosedb\">https://github.com/roseduan/rosedb</a></p>\n<p>可以在asktug（<a href=\"https://asktug.com)上/\">https://asktug.com）上</a> “学习与认证” 板块， Talent Plan 标签下提出、解答互助。<br>（注意标题下面选择“学习认证”、“Talent Plan”标签）</p>\n<p>⑤第一次分享课时间为11月17号晚上8:00到9:40，zoom会议连接：<a href=\"https://pingcap.zoom.us/j/99814310864\">https://pingcap.zoom.us/j/99814310864</a><br>zoom会议号：998 1431 0864</p>\n<p><a href=\"https://m.creatby.com/v2/manage/book/oa4occ/?from=singlemessage\">Talent Plan 分布式 KV 数据库编程线上学习营开营了 (creatby.com)</a></p>\n<p><a href=\"https://github.com/tidb-incubator/tinykv\">GitHub - tidb-incubator&#x2F;tinykv: A course to build distributed key-value service based on TiKV model</a></p>\n<p>他的设计和raft论文还有差别，我想知道他是哪里调用的tick，他这里把心跳和日志都分开了</p>\n<p>tick函数干嘛的，那个上面注释说是给逻辑时钟提前一个时间步，什么情况会调用tick啊</p>\n<p>raftworker里面</p>\n<p>etcd的raft module</p>\n<p>kv&#x2F;raftstore&#x2F;peer_msg_handler.go</p>\n<p>raft&#x2F;doc.go</p>\n<p>测试好评，raft层可以面向测试编程（不是</p>\n<p>hxdm,project1的意思是需要做这些事情吗？<br>需要填满kv&#x2F;storage&#x2F;standalone_storage&#x2F;standalone_storage.go和kv&#x2F;server&#x2F;raw_api.go，然后涉及到的api是util&#x2F;engine_util下面的api？ （这些api是包装的badger）</p>\n<p>一些涉及到cf的操作engine_util里面都提供了</p>\n<p>util&#x2F;engine_util下面的</p>\n<p><a href=\"https://www.codedump.info/post/20180922-etcd-raft/\">https://www.codedump.info/post/20180922-etcd-raft/</a></p>\n<p>翻译过raft作者的博士论文，相比ATC会议版多了不少细节的。大家感兴趣可以看看 <a href=\"https://github.com/LebronAl/raft-thesis-zh_cn\">https://github.com/LebronAl/raft-thesis-zh_cn</a></p>\n<p>谭新宇 你的github上6.824的lab笔记</p>\n<p>raft 的内容主要在博士论文上的前 6 章</p>\n<p>之前在研究tidb时想用c++来重新实现一遍tidb，然后写了一个golang to cpp的转换工具（基于AST来进行解析的）：<a href=\"https://github.com/awfeequdng/px_golang2cpp\">https://github.com/awfeequdng/px_golang2cpp</a></p>\n<p>你用go的库函数，就可以把go源码解析成ast，然后把这个 ast -&gt; cpp 难度就不是很大了。</p>\n<p>6.824Lab3：</p>\n<p><a href=\"https://pdos.csail.mit.edu/6.824/labs/lab-kvraft.html\">https://pdos.csail.mit.edu/6.824/labs/lab-kvraft.html</a></p>\n<p><a href=\"https://blog.csdn.net/weixin_43116322/category_11250854.html\">https://blog.csdn.net/weixin_43116322/category_11250854.html</a></p>\n<p>PDCA</p>\n<p><a href=\"https://learn.pingcap.com/learner/course/390002\">https://learn.pingcap.com/learner/course/390002</a><br>课程大纲</p>\n<h1 id=\"TiDB-数据库架构概述\"><a href=\"#TiDB-数据库架构概述\" class=\"headerlink\" title=\"TiDB 数据库架构概述\"></a>TiDB 数据库架构概述</h1><p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211115153938703.png\" alt=\"image-20211115153938703\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211115154005683.png\" alt=\"image-20211115154005683\"></p>\n<p>online DDL不会阻塞读写？？？</p>\n<p><a href=\"https://www.jb51.net/article/40359.htm\">https://www.jb51.net/article/40359.htm</a></p>\n<p><a href=\"https://www.jb51.net/article/89030.htm\">https://www.jb51.net/article/89030.htm</a></p>\n<p>DML（data manipulation language）：<br>它们是SELECT、UPDATE、INSERT、DELETE，就象它的名字一样，这4条命令是用来对数据库里的数据进行操作的语言<br>DDL（data definition language）：<br>DDL比DML要多，主要的命令有CREATE、ALTER、DROP等，DDL主要是用在定义或改变表（TABLE）的结构，数据类型，表之间的链接和约束等初始化工作上，他们大多在建立表时使用<br>DCL（Data Control Language）：<br>是数据库控制功能。是用来设置或更改数据库用户或角色权限的语句，包括（grant,deny,revoke等）语句。在默认状态下，只有sysadmin,dbcreator,db_owner或db_securityadmin等人员才有权力执行DCL</p>\n<p><a href=\"https://blog.csdn.net/q2878948/article/details/96430129\">https://blog.csdn.net/q2878948/article/details/96430129</a></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211115155224501.png\" alt=\"image-20211115155224501\"></p>\n<p>LSM tree（HBase存储引擎）的RocksDB引擎，WAL机制保证数据不丢持久化</p>\n<p>CFLock列簇</p>\n<p>+PD的全局TSO授时&#x3D;去中心化的2PC</p>\n<p>乐观悲观</p>\n<p>5.0后：2PC二阶异步提交</p>\n<p>提升性能-&gt;OLTP：高并发小SQL场景  降写入延迟</p>\n<p>3.多Raft</p>\n<p>region动态扩展</p>\n<p>PD调度将热点数据块向其他节点拆分</p>\n<p>4.MVCC-&gt;并发控制 隔离级别 分布式事务 数据快速恢复</p>\n<p>k+version，v</p>\n<p>history GC回收</p>\n<p>5.提前SQL计算：过滤 部分聚合 max min</p>\n<p>并行</p>\n<p><img src=\"https://img-blog.csdn.net/2018072122222525?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDE0Mjcx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\"></p>\n<p><a href=\"https://www.cnblogs.com/lingchen-liang/p/1069019.html\">https://www.cnblogs.com/lingchen-liang/p/1069019.html</a></p>\n<p>数据处理大致可以分成两大类：联机事务处理OLTP（on-line transaction processing）、联机分析处理OLAP（On-Line Analytical Processing）。OLTP是传统的关系型数据库的主要应用，主要是基本的、日常的事务处理，例如银行交易。OLAP是数据仓库系统的主要应用，支持复杂的分析操作，侧重决策支持，并且提供直观易懂的查询结果。</p>\n<ul>\n<li>OLTP：系统强调数据库内存效率，强调内存各种指标的命令率，强调绑定变量，强调并发操作；</li>\n<li>OLAP：系统则强调数据分析，强调SQL执行时长，强调磁盘I&#x2F;O，强调分区等。</li>\n</ul>\n<p>联机事务处理（OLTP,On-line Transaction Processing），数据量少，DML频繁，并行事务处理多，但是一般都很短。使用一般用途或事务处理模板。</p>\n<p>联机分析处理（OLAP,On-line Analytical Processing），数据量大，DML少。使用数据仓库模板；</p>\n<p>决策支持系统（DDS，Decision support system)，典型的操作是全表扫描，长查询，长事务，但是一般事务的个数很少，往往是一个事务独占系统。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/1518378/201904/1518378-20190411163255378-1847676271.jpg\" alt=\"img\"></p>\n<p>【OLTP：Cache  批量buffer降IO  绑定变量存结果 简化SQL 分批快速提交  热块：分布不均 反向索引 增加回滚段             </p>\n<p>​    OLAP：SQL优化  分区技术、MV技术、并行技术及位图索引】</p>\n<p>OLTP系统最容易出现瓶颈的地方就是CPU与磁盘子系统。</p>\n<p>（1）CPU出现瓶颈常表现在逻辑读总量与计算性函数或者是过程上，【逻辑读总量&#x3D;单个语句的逻辑读*执行次数】，设计的方法与优化的方法就是减少单个语句的逻辑读，或者是减少它们的执行次数。另外，一些计算型的函数，如自定义函数、decode等的频繁使用，也会消耗大量的CPU时间，造成系统的负载升高，正确的设计方法或者是优化方法，需要尽量避免计算过程，如【保存计算结果到统计表就是一个好的方法】。</p>\n<p>（2）磁盘子系统在OLTP环境中，它的承载能力一般取决于它的【IOPS处理能力】. 因为在OLTP环境中，磁盘物理读一般都是db file sequential read，也就是单块读，但是这个读的次数非常频繁。如果频繁到磁盘子系统都不能承载其IOPS的时候，就会出现大的性能问题。</p>\n<p>OLTP比较常用的设计与优化方式为【Cache技术与B-tree索引技术】，Cache决定了很多语句不需要从磁盘子系统获得数据，所以，<strong>Web cache与Oracle data buffer</strong>对OLTP系统是很重要的。</p>\n<p>另外，在索引使用方面，语句越<strong>简单</strong>越好，这样执行计划也稳定，而且一定要<strong>使用绑定变量，减少语句解析</strong>，</p>\n<p>【尽量减少表关联，尽量减少分布式事务，基本不使用分区技术、MV技术、并行技术及位图索引。因为并发量很高，批量更新时要分批快速提交，以避免阻塞的发生。】</p>\n<p>OLTP 系统是一个数据块变化非常频繁，SQL 语句提交非常<strong>频繁</strong>的系统。 </p>\n<p>对于数据块来说，应尽可能让数据块保存在<strong>内存当中</strong>，对于SQL来说，尽可能使用<strong>变量绑定</strong>技术来达到<strong>SQL重用</strong>，减少物理I&#x2F;O 和重复的SQL 解析，从而极大的改善数据库的性能。</p>\n<p>这里影响性能除了绑定变量，还有可能是<strong>热块（hot block）</strong>。 当一个块被多个用户同时读取时，Oracle 为了维护数据的一致性，需要使用Latch来串行化用户的操作。当一个用户获得了latch后，其他用户就只能等待，获取这个数据块的用户越多，等待就越明显。 这就是热块的问题。 这种热快可能是数据块，也可能是回滚端块。 </p>\n<p>对于数据块来讲，通常是<strong>数据库的数据分布不均匀导致</strong>，如果是索引的数据块，可以考虑<strong>创建反向索引来达到重新分布数据</strong>的目的，对于<strong>回滚段数据块，可以适当多增加几个回滚段</strong>来避免这种争用。</p>\n<p>OLAP，也叫联机分析处理（Online Analytical Processing）系统，有的时候也叫DSS决策支持系统，就是我们说的数据仓库。在这样的系统中，语句的执行量不是考核标准，因为一条语句的执行时间可能会非常长，读取的数据也非常多。所以，在这样的系统中，考核的标准往往是<strong>磁盘子系统的吞吐量（带宽），如能达到多少MB&#x2F;s的流量。</strong></p>\n<p>磁盘子系统的吞吐量则往往取决于磁盘的个数，这个时候，Cache基本是没有效果的，数据库的读写类型基本上是db file <strong>scattered read与direct path read&#x2F;write</strong>。应尽量采用<strong>个数比较多的磁盘以及比较大的带宽，如4Gb的光纤接口</strong>。</p>\n<p><strong>在OLAP系统中，常使用【分区技术、并行技术】。</strong></p>\n<p>分区技术在OLAP系统中的重要性主要体现在数据库管理上，比如<strong>数据库加载，可以通过分区交换的方式实现，备份可以通过备份分区表空间实现，删除数据可以通过分区进行删除</strong>，至于分区在性能上的影响，它可以使得一些大表的扫描变得很快（只扫描单个分区）。另外，如果分区结合并行的话，也可以使得整个表的扫描会变得很快。总之，<strong>分区主要的功能是管理上的方便性</strong>，它并不能绝对保证查询性能的提高，有时候分区会带来性能上的提高，有时候会降低。</p>\n<p>并行技术除了与分区技术结合外，在Oracle 10g中，与RAC结合实现多节点的同时扫描，效果也非常不错，可把一个任务，如select的全表扫描，平均地分派到多个RAC的节点上去。</p>\n<p>在OLAP系统中，不需要使用绑定（BIND）变量，因为整个系统的执行量很小，分析时间对于执行时间来说，可以忽略，而且可避免出现错误的执行计划。但是<strong>OLAP中可以大量使用位图索引，物化视图</strong>，对于大的事务，尽量<strong>寻求速度上的优化</strong>，没有必要像OLTP要求快速提交，甚至要刻意减慢执行的速度。</p>\n<p>绑定变量真正的用途是在OLTP系统中，这个系统通常有这样的特点，用户<strong>并发数很大</strong>，用户的<strong>请求十分密集</strong>，并且这些请求的<strong>SQL 大多数是可以重复使用</strong>的。</p>\n<p>对于OLAP系统来说，绝大多数时候数据库上运行着的是<strong>报表作业，执行基本上是聚合类的SQL 操作，比如group by，这时候，把优化器模式设置为all_rows是恰当的</strong>。 而对于一些<strong>分页操作比较多的网站类数据库，设置为first_rows会更好</strong>一些。 但【有时候对于OLAP 系统，我们又有分页的情况下，我们可以考虑在每条SQL 中用hint。 如：Select a.* from table a;】</p>\n<p><strong>分开设计与优化</strong></p>\n<p>在设计上要特别注意，如在高可用的OLTP环境中，不要盲目地把OLAP的技术拿过来用。</p>\n<p>如分区技术，假设<strong>不是大范围地使用分区关键字</strong>，而采用其它的字段作为where条件，那么，【如果是本地索引，将不得不扫描多个索引，而性能变得更为低下。如果是全局索引，又失去分区的意义。】</p>\n<p>并行技术也是如此，一般在<strong>完成大型任务时才使用</strong>，如在实际生活中，翻译一本书，可以先安排多个人，每个人翻译不同的章节，这样可以提高翻译速度。如果只是翻译一页书，也去分配不同的人翻译不同的行，再组合起来，就没必要了，因为在分配工作的时间里，一个人或许早就翻译完了。</p>\n<p><strong>位图索引</strong>也是一样，如果用在OLTP环境中，很容<strong>易造成阻塞与死锁</strong>。但是，在OLAP环境中，可能会因为其特有的特性，提高OLAP的查询速度。【MV也是基本一样，包括触发器等，在DML频繁的OLTP系统上，很容易成为瓶颈，甚至是Library Cache等待？？？】，而在OLAP环境上，则可能会因为使用恰当而提高查询速度。</p>\n<p>对于【OLAP系统，在内存上可优化的余地很小，增加CPU 处理速度和磁盘I&#x2F;O 速度】是最直接的提高数据库性能的方法，当然这也意味着系统成本的增加。</p>\n<p>比如我们要对几亿条或者几十亿条数据进行聚合处理，这种海量的数据，全部放在内存中操作是很难的，同时也没有必要，因为这些数据快很少重用，缓存起来也没有实际意义，而且还会造成物理I&#x2F;O相当大。 所以这种系统的瓶颈往往是磁盘I&#x2F;O上面的。</p>\n<p>对于【<strong>OLAP系统，SQL 的优化非常重要，因为它的数据量很大，做全表扫描和索引</strong>】对性能上来说差异是非常大的。</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211115164816539.png\" alt=\"image-20211115164816539\"></p>\n<p>  Namenode元数据存储  分配ID  授时  心跳ZK 监控面板</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211115165226220.png\" alt=\"image-20211115165226220\"></p>\n<p>Hive   最有名的列式存储引擎是Parquet和ORC</p>\n<p>kudu</p>\n<p>1.OLAP</p>\n<p>MPB MapReduce 并行计算</p>\n<p>2.deltaMain组件实时更新多版本读取</p>\n<p>learner角色</p>\n<p>3.TP AP分开</p>\n<p>&#x3D;&#x3D;4.【智能区分！！！】&#x3D;&#x3D;</p>\n<p>&#x2F;1. 【多选题】下列功能是由 TiKV 或 TiFlash 实现的为？（ 选 2 项 ）B、F</p>\n<p>A. 根据集群中 Region 的信息，发出调度指令  PD</p>\n<p>B. 对于 OLAP 和 OLTP 进行业务隔离</p>\n<p>C. 将关系型数据转化为 KV 存储进行持久化      TiDB Server</p>\n<p>D. 将 KV 存储转化为关系型数据返回给客户端  TiDB Server</p>\n<p>E. 配合 TiDB Server 生成事务的唯一 ID             PD</p>\n<p>F. 副本的高可用和一致性</p>\n<p>&#x2F;2. 【单选题】关于 TiKV 或 TiDB Server，下列说法不正确的是？C</p>\n<p> A. 数据被持久化在 TiKV 的 RocksDB 引擎中  </p>\n<p> B. 对于老版本数据的回收（GC），是由 TiDB Server 在 TiKV 上完成的  </p>\n<p> C. 两阶段提交的锁信息被持久化到 TiDB Server 中        TiKV</p>\n<p> D. Region 可以在多个 TiKV 节点上进行调度，但是需要 PD 节点发出调度指令 </p>\n<h1 id=\"TiDB-Server-架构原理简介\"><a href=\"#TiDB-Server-架构原理简介\" class=\"headerlink\" title=\"TiDB Server 架构原理简介\"></a>TiDB Server 架构原理简介</h1><p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211115175059705.png\" alt=\"image-20211115175059705\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211115170841802.png\" alt=\"image-20211115170841802\"></p>\n<p>SQL层：解析编译优化 执行计划分批执行 事务 Client用于交互STO时间戳等 onlineDDL    </p>\n<p>NoSQL转化  GC  cache</p>\n<p>无状态 LB</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211115171336702.png\" alt=\"image-20211115171336702\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211115171426743.png\" alt=\"image-20211115171426743\"></p>\n<p>token</p>\n<p>AST</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211115171551660.png\" alt=\"image-20211115171551660\"></p>\n<p>SQL合法性验证</p>\n<p>？？？？逻辑优化：列裁剪  maxmin消除 投影消除 谓词下推 子查询 外联变内联</p>\n<p>物理优化：依据数据分布大小行数统计信息看用哪个算子，走哪个索引还是全表扫描</p>\n<p>​                     优化表的连接&#x2F;读取方式 顺序排序</p>\n<p>“导游图”取数据</p>\n<p>【KV转化】</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211115172129176.png\" alt=\"image-20211115172129176\"></p>\n<p>聚簇表：主键做Key</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211115172334306.png\" alt=\"image-20211115172334306\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211115172351949.png\" alt=\"image-20211115172351949\"></p>\n<p>非聚簇表：生成唯一ID</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211115172959906.png\" alt=\"image-20211115172959906\"></p>\n<p>Node Region k-&gt;v</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211115173047489.png\" alt=\"image-20211115173047489\"></p>\n<p>DistSQL处理复杂SQL：范围查询 表联接 嵌套查询          拆为单表多Region操作的组合</p>\n<p>PointCat点查  等值查询  简单 单行：  走KV</p>\n<p>Row KV req   &#x2F;  过滤聚合投影</p>\n<p>获取TSO事务提交时间！</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211115173647866.png\" alt=\"image-20211115173647866\"></p>\n<p>&#x3D;&#x3D;online DDL？？？&#x3D;&#x3D;</p>\n<p>owner Server：取job执行    选举、任期。。。</p>\n<p>上任后同步schema缓存</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/60746830\">https://zhuanlan.zhihu.com/p/60746830</a></p>\n<h2 id=\"1-SQL语言共分为四大类：\"><a href=\"#1-SQL语言共分为四大类：\" class=\"headerlink\" title=\"1. SQL语言共分为四大类：\"></a>1. SQL语言共分为四大类：</h2><p>数据查询语言DQL，数据操纵语言DML，数据定义语言DDL，数据控制语言DCL</p>\n<p>1、数据定义语言DDL<br>数据定义语言DDL用来创建数据库中的各种对象—–表、视图、<br>—————————索引、同义词、聚簇等如：<br>&#x3D;&#x3D;<strong>CREATE</strong>&#x3D;&#x3D; TABLE&#x2F;VIEW&#x2F;INDEX&#x2F;SYN&#x2F;CLUSTER<br>————–表 —-视图- 索引- 同义词— 簇</p>\n<p>2.数据操纵语言DML主要有三种形式：</p>\n<p>–1) 插入：INSERT<br>–2) 更新：UPDATE<br>–3) 删除：DELETE数据查</p>\n<p>3.询语言DQL（data query language）基本结构<br>–1）选择：SELECT子句</p>\n<p>&#x2F;4. 数据控制语言DCL<br>数据控制语言DCL用来授予或回收访问数据库的某种特权，并控制数据库操纵事务发生的时间及效果，对数据库实行监视等。如：</p>\n<ol>\n<li>GRANT：授权。</li>\n<li>ROLLBACK [WORK] TO [SAVEPOINT]：回退到某一点。<br>—-回滚—ROLLBACK<br>—-回滚命令使数据库状态回到上次最后提交的状态。其格式为：<br>——SQL&gt;ROLLBACK;</li>\n<li>COMMIT [WORK]：提交。</li>\n</ol>\n<p>【KV持久化】</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211115174150117.png\" alt=\"image-20211115174150117\"></p>\n<p>MVCC：history data+时间戳</p>\n<p>version过多  定期清理</p>\n<p>safepoint&#x3D;10:00  保留10:00以后的</p>\n<p>保留GC lifetime&#x3D;10min 内的历史版本</p>\n<p>过期数据unlock，drop 、delete数据清除</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211115175022680.png\" alt=\"image-20211115175022680\"></p>\n<p>maxsize</p>\n<p>中断error &#x2F;记日志</p>\n<p>下列哪些模块直接与 TiDB 的事务处理有关？（ 选 2 项 ） A. KV 点查、D. Transaction</p>\n<p>关于关系型数据与 KV 的转化，下列说法不正确的是？ C</p>\n<p> A. 如果没有定义主键，key 中包含 RowID，Index ID 和 Table ID，都是 int64 类型  </p>\n<p> B. Table ID 在整个集群内唯一  </p>\n<p> C. 如果定义了主键，那么将使用主键作为 RowID  【聚簇表：tableID+PK主键   非聚簇表：可选！】</p>\n<p> D. 不需要为每张表指定主键 </p>\n<h1 id=\"TiKV-架构原理简介\"><a href=\"#TiKV-架构原理简介\" class=\"headerlink\" title=\"TiKV 架构原理简介\"></a>TiKV 架构原理简介</h1><p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211115183102919.png\" alt=\"image-20211115183102919\"></p>\n<h2 id=\"持久化\"><a href=\"#持久化\" class=\"headerlink\" title=\"持久化\"></a>持久化</h2><p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211115183136547.png\" alt=\"image-20211115183136547\"></p>\n<p>raft log</p>\n<p>CF:Column Family</p>\n<p>多raft group</p>\n<p>单节点纵向RW：rocksdb</p>\n<p>raft：多节点region副本 横向RW</p>\n<p>5.并行 计算project join maxmin</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211115183624743.png\" alt=\"image-20211115183624743\"></p>\n<p>单机KV map</p>\n<p>SSD</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211115183753236.png\" alt=\"image-20211115183753236\"></p>\n<p>合并 批量IO</p>\n<p>完全顺序写入，不会随机写或排序</p>\n<p>LSM Tree（HBase存储引擎）：MT iMT  SST文件</p>\n<p><a href=\"https://www.baidu.com/s?wd=HBase%20%E5%AD%98%E5%82%A8%20LSM&amp;rsv_spt=1&amp;rsv_iqid=0xeb03ecb20000002e&amp;issp=1&amp;f=8&amp;rsv_bp=1&amp;rsv_idx=2&amp;ie=utf-8&amp;tn=baiduhome_pg&amp;rsv_enter=1&amp;rsv_dl=tb&amp;rsv_sug3=17&amp;rsv_sug1=12&amp;rsv_sug7=100&amp;rsv_sug2=0&amp;rsv_btype=i&amp;inputT=14612&amp;rsv_sug4=14613\">https://www.baidu.com/s?wd=HBase%20%E5%AD%98%E5%82%A8%20LSM&amp;rsv_spt=1&amp;rsv_iqid=0xeb03ecb20000002e&amp;issp=1&amp;f=8&amp;rsv_bp=1&amp;rsv_idx=2&amp;ie=utf-8&amp;tn=baiduhome_pg&amp;rsv_enter=1&amp;rsv_dl=tb&amp;rsv_sug3=17&amp;rsv_sug1=12&amp;rsv_sug7=100&amp;rsv_sug2=0&amp;rsv_btype=i&amp;inputT=14612&amp;rsv_sug4=14613</a></p>\n<p>预写日志WAL：保证原子性 持久性</p>\n<p>故障恢复 Crash-safe：</p>\n<pre class=\"line-numbers language-undefined\" data-language=\"undefined\"><code class=\"language-undefined\">MySQL\n小黑板写满了怎么办？？？？：和人一样，小黑板在人流量多的时候会出现写满的时候\n（一般不会出现，redolog分配内存足够大），那么只能暂停一切写入操作，\n把小黑板的计算写入账本后才能继续写入，所以老板会先算完帐后再进行新的收账。\n但是这里我们就要聊到一个概念叫做crash-safe，也就是这里还有一个【专门计算的伙计\n，老板一边记录，这边有个小伙子计算并擦除掉计算好了的记录，并保存到账本上去，\n速度上肯定是老板写入要快的多，但是这样下来不至于导致整个黑板快速的写满，基本上就是\n老板一边写，伙计一边算，写满后，要停一段时间等伙计。】</code></pre>\n\n<p>sync_log&#x3D;true：fsync   不经过OS缓存，直接入盘</p>\n<p>跳表，搜索B+树来sort</p>\n<p>唯一MT的write-buffer-size到，转存入iMTs</p>\n<p>否则IO落盘写阻塞，有一个就刷磁盘</p>\n<p>iMT&#x3D;5后，触发write stall 自我保护，限流流控 写入速度变慢 log里有，可调高~</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211115185721994.png\" alt=\"image-20211115185721994\"></p>\n<p>4个level0&#x3D;iMT  compaction压缩 key排序 合并</p>\n<p>二分查找key</p>\n<p>1次磁盘IO 1次memIO：     优于B+树 3+次磁盘iO</p>\n<p>del W： 只入MT             对W友好</p>\n<p>查询比B+树慢一点</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211115190520358.png\" alt=\"image-20211115190520358\"></p>\n<p>最近最常读的data放入Block Cache</p>\n<p>永远把新数据读到MT，不用管老版本数据了</p>\n<p>文件key的min max区间判断，二分查找 + 【BloomFilter判断不在肯定不在】，判断在有误报率</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211115191208820.png\" alt=\"image-20211115191208820\"></p>\n<p>【&#x3D;&#x3D;<strong>数据分片(CF列簇)技术</strong>&#x3D;&#x3D;】</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211115191245504.png\" alt=\"image-20211115191245504\"></p>\n<p>没指定，都进入default列簇</p>\n<p>一类CF</p>\n<p>共享WAL不分列簇</p>\n<h2 id=\"分布式事务-MVCC\"><a href=\"#分布式事务-MVCC\" class=\"headerlink\" title=\"分布式事务  MVCC\"></a>分布式事务  MVCC</h2><p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211115191748519.png\" alt=\"image-20211115191748519\"></p>\n<p>破坏原子性</p>\n<p>percolator模型的2PC:改数据 加锁    ；   提交 解锁</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211115191713944.png\" alt=\"image-20211115191713944\"></p>\n<p>3类CF</p>\n<p>put&#x2F;delete &lt;key_startTs, v&gt;</p>\n<p>W写锁,pk行，k,ts,v</p>\n<p>Write: put&lt;k_commitTs, startTs&gt;    —-&gt;读Write已提交 拼3_100查询v</p>\n<p>Lock：D。。。锁被删除</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211115192913073.png\" alt=\"image-20211115192913073\"></p>\n<p>@1是指针，指向pk   事务中。。。</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211115194709431.png\" alt=\"image-20211115194709431\"></p>\n<p>【MVCC多版本并发控制】</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211115195637265.png\" alt=\"image-20211115195637265\"></p>\n<p>put delete新值追加      读最新commitTs的已提交记录</p>\n<p>支持【读取旧值      已提交的最新版本数据，不读事务中的现版本】即可</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211115200720351.png\" alt=\"image-20211115200720351\"></p>\n<p>已C：Default Write    R时从Write拼id+startTs去default找</p>\n<p>未C：Default Lock</p>\n<p>Default列簇：key（userID）升序 &amp;&amp; startTs降序：便于检索latest值</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211115202614409.png\" alt=\"image-20211115202614409\"></p>\n<p>2没锁：Candy</p>\n<p>1Jack、4Tony同理：有W无D 事务中，读旧值</p>\n<h2 id=\"Raft-分布式数据执行\"><a href=\"#Raft-分布式数据执行\" class=\"headerlink\" title=\"Raft   分布式数据执行\"></a>Raft   分布式数据执行</h2><p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211115203629855.png\" alt=\"image-20211115203629855\"></p>\n<p>RW走leader   follower定时：心跳 WAL       candidate发起投票</p>\n<p>follower大半收到log：leader committed，apply为kv</p>\n<p>key无间隙[1,1k) [1k,2k)… region最大96M </p>\n<p>5w region向PD回报心跳，网络压力大，需要性能优化！</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211115203858124.png\" alt=\"image-20211115203858124\"></p>\n<p>1.propose：写日志 redionID + raft log id， log{put k,v}</p>\n<p>2.append：replicate复制log</p>\n<p>3.committed：大半follower持久化了响应了</p>\n<p>apply  data到rocksDB(kv)</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211115204404064.png\" alt=\"image-20211115204404064\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211115204518564.png\" alt=\"image-20211115204518564\"></p>\n<p>term任期</p>\n<p>计时器：election_timeout&#x3D;10s【没leader】</p>\n<p>election_timeout先超时的follower作candidate，发起投票，term+1</p>\n<p>同意term大的当leader</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211115205519727.png\" alt=\"image-20211115205519727\"></p>\n<p>heartbeat_time_interval【leader挂了&#x2F;延迟】  &lt; min（election_timeout&#x3D;10s ） 避免leader心跳没发到follower就要求选举</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211115205637134.png\" alt=\"image-20211115205637134\"></p>\n<p>random_election_timeout  避免多次重复选举</p>\n<p><a href=\"http://thesecretlivesofdata.com/raft/\">http://thesecretlivesofdata.com/raft/</a></p>\n<h2 id=\"读取-x2F-Coprocessor\"><a href=\"#读取-x2F-Coprocessor\" class=\"headerlink\" title=\"读取&#x2F;Coprocessor\"></a>读取&#x2F;Coprocessor</h2><p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211115211513143.png\" alt=\"image-20211115211513143\">关注RW一致性</p>\n<p>不涉及SQL冲突检测 scheduler（RW原理）</p>\n<p>线程池：raft log一致性  、 sql apply</p>\n<p>propose 序列化为raft log</p>\n<p>append</p>\n<p>replica</p>\n<p>过半 committed</p>\n<p>【写成功后，不一定立刻能读到  没apply到kv】</p>\n<p>apply</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211115212527123.png\" alt=\"image-20211115212527123\"></p>\n<p>【解决commit apply异步问题：】</p>\n<p>记最新commitIndex值到ReadIndex</p>\n<p>等到ApplyIndex&#x3D;4_100&#x3D;ReadIndex时才能读</p>\n<p>【保证node2还是leader】</p>\n<p>发心跳（走网络 慢！）确认自己是leader，再读</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211115213302971.png\" alt=\"image-20211115213302971\"></p>\n<p>改进：不发心跳     心跳间隔&lt;min(随机选举超时时间)</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211115213925706.png\" alt=\"image-20211115213925706\"></p>\n<p>Follower分担R压力：follower慢，就等leader同步         leader慢，就R（leader压力大！）</p>\n<p>分布式ReadIndex Read~</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211115214339150.png\" alt=\"image-20211115214339150\"></p>\n<p>计算下推</p>\n<p>物理算子？</p>\n<p>table scan 、index scan、selection过滤、limit、max、min、aggregate聚合</p>\n<p>分析统计采样，对表校验</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211115214602705.png\" alt=\"image-20211115214602705\"></p>\n<h2 id=\"TiDB-数据库事务设计\"><a href=\"#TiDB-数据库事务设计\" class=\"headerlink\" title=\"TiDB 数据库事务设计\"></a>TiDB 数据库事务设计</h2><h3 id=\"分布式事务基本原理\"><a href=\"#分布式事务基本原理\" class=\"headerlink\" title=\"分布式事务基本原理\"></a>分布式事务基本原理</h3><p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116150057407.png\" alt=\"image-20211116150057407\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116141021548.png\" alt=\"image-20211116141021548\"></p>\n<p>1都成都败</p>\n<p>2数据完整性 提交修改不丢失：   效率 应用开发易用性</p>\n<p>3互斥 不影响：  事务安全 并发能力</p>\n<p>4提交落盘：  数据安全落地</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116141435696.png\" alt=\"image-20211116141435696\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116142006237.png\" alt=\"image-20211116142006237\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116142347702.png\" alt=\"image-20211116142347702\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116142157445.png\" alt=\"image-20211116142157445\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116142326239.png\" alt=\"image-20211116142326239\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116142540031.png\" alt=\"image-20211116142540031\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116142556428.png\" alt=\"image-20211116142556428\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116144231526.png\" alt=\"image-20211116144231526\"></p>\n<p>本地事务</p>\n<p>分布式事务：伪分布式系统 麻烦</p>\n<p>TCC：try confirm-commit rolloback-cancel</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116145057015.png\" alt=\"image-20211116145057015\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116145303411.png\" alt=\"image-20211116145303411\"></p>\n<p>业务侵入性大！ 完全由应用程序控制</p>\n<p>SAGA构造长活事务：大事务拆解为小事务</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116145723183.png\" alt=\"image-20211116145723183\"></p>\n<p>微服务按数据分片来分</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116145927790.png\" alt=\"image-20211116145927790\"></p>\n<p>3个缺点</p>\n<p>percolator对2PC优化</p>\n<h3 id=\"！【文章】分布式数据库的核心知识\"><a href=\"#！【文章】分布式数据库的核心知识\" class=\"headerlink\" title=\"！【文章】分布式数据库的核心知识\"></a>！【文章】分布式数据库的核心知识</h3><p><a href=\"https://www.sohu.com/a/470146217_121124363\">https://www.sohu.com/a/470146217_121124363</a></p>\n<p>1主流的分布式数据库有两种架构，PGXC和NewSql。</p>\n<p><img src=\"https://p1.itc.cn/q_70/images03/20210603/5789dd149a8246b385410c0f85329ef5.png\" alt=\"img\"></p>\n<p><img src=\"https://p3.itc.cn/q_70/images03/20210603/8646143bc66c48949741fa25324d4d4c.png\" alt=\"img\"></p>\n<p>NewSQL还有两个改进：</p>\n<ul>\n<li>对于HA，放弃传统数据库的主从复制，使用Paxos、Raft等共识算法来保证多副本的一致性。</li>\n<li>对于存储，使用LSM树模型替换B+树，写入性能更高。</li>\n</ul>\n<p>2全局时钟。。。</p>\n<p>3 HTAP</p>\n<p>HTAP英文全称是 Hybrid Transaction and Analytical Processing，即混合事务和分析处理，能够将事务处理(OLTP)和数据分析(OLAP)请求在同一个数据库系统中完成。</p>\n<p>HTAP需要在计算和存储两个层面支持OLTP和OLAP，存储是基础。OLTP通常使用行式存储，OLAP则一般使用列式存储，差异很大。HTAP解决这个差异的方式有两种：</p>\n<ul>\n<li>Google Spanner的PAX，一种新的融合性存储，即在行存储的基础上融合列存储的特点。</li>\n<li>TiDB的思路，借助Raft协议在OLTP与OLAP之间异步复制数据，通过OLAP的特殊设计来弥补异步带来的数据不一致。</li>\n</ul>\n<p>OceanBase采用独创的分布式计算引擎，能让系统中多个计算节点同时运行OLTP类型的应用和OLAP类型的应用，实现了用一套计算引擎同时支持混合负载的能力。</p>\n<p>4 RANGE动态分区</p>\n<p>下图有4条数据，</p>\n<p><img src=\"https://p8.itc.cn/q_70/images03/20210603/5a9c6c57463d4cefa4d7617e459fecd4.png\" alt=\"img\"></p>\n<p>如果按照HASH进行分片，一般会选择【id作为key进行HASH计算，之后根据计算结果把数据分配到不同的分片】中。这样做的好处是实现简单，但也存在两个问题：</p>\n<ul>\n<li>分片【不具备业务属性，可能会存在业务热点访问的问题】。</li>\n<li>分片【规模变化时，迁移数据问题】。</li>\n</ul>\n<p>Range分片技术跟HASH相比，很大的不同是数据并【没有被打散】。比如上表中，我们可以把数据按照城市进行分片，这样数据读取效率会更高。</p>\n<p>Range动态分区用在NewSQL架构的分布式数据库中，一般具有下面的特性：</p>\n<p>4.1 自动合并和拆分</p>\n<p>可以给分配的数据量设置阈值，当某个分片的数据量超过最大阈值时，可以自动拆分成2个分片，当分片数据量小于最小阈值时，进行分片合并。</p>\n<p>4.2 自动负载</p>\n<p>当某个分片上的热点数据较多时，节点访问压力会很大，系统可以【自动地将这些热点数据访问调度到不同节点，以均衡访问压力】。</p>\n<p>4.3 减少分布式事务</p>\n<p>分布式事务的开销会远远大于本地事务，分布式数据库可以【把频繁参与同一个分布式事务的数据调度到同一个分片上】，这样就避开了分布式事务。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Spanner支持</p></blockquote>\n<p>4.4 就近访问</p>\n<p>在全球部署的场景下，给用户分配最近节点的分片，可以减少访问延时。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Spanner支持</p></blockquote>\n<p>4.5 高可靠</p>\n<p>分布式数据库的高可靠是【分区（Region）级别的高可靠】，下图是OceanBase中【一个Zone的架构图】：</p>\n<p><img src=\"https://p7.itc.cn/q_70/images03/20210603/455befc020924d78acb933d6a5b7983c.png\" alt=\"img\"></p>\n<p>OceanBase基于Paxos算法来实现系统的高可用，最小的粒度可以做到分区级别。集群中数据的【每一个分区会被保存到所有的Zone】上，分区的多个副本采用Paxos协议进行日志同步。【每个分区和它的副本构成一个独立的Paxos复制组（raft group）】，其中一个分区为Leader，其它分区为Follower。【所有针对这个副本的写请求，都会自动路由到对应的主分区上进行。<strong>主分区可以分布在不同的OBServer上</strong>】，这样对于不同副本的写操作也会分布到不同的数据节点上，从而实现【数据多点写入，提高系统性能】。</p>\n<p>5 percalator模型</p>\n<p>参考1: <a href=\"https://open.oceanbase.com/\">https://open.oceanbase.com/</a></p>\n<p>参考2: <a href=\"https://www.cs.princeton.edu/courses/archive/fall10/cos597B/papers/percolator-osdi10.pdf\">https://www.cs.princeton.edu/courses/archive/fall10/cos597B/papers/percolator-osdi10.pdf</a></p>\n<p>Large-scale Incremental Processing Using Distributed Transactions and Notifications</p>\n<p>Google的incremental web index update system</p>\n<p>[[OSDI&#x2F;] Large-scale Incremental Processing Using Distributed Transactions and Notifications - 知乎 (zhihu.com)</p>\n<p>percolator是有代价的，当处理的部分超过一定程度的时候（这里是30%），那么处理速度是比不上直接跑一个全局map reduce的。</p>\n<h3 id=\"Percolator-事务模型原理\"><a href=\"#Percolator-事务模型原理\" class=\"headerlink\" title=\"Percolator 事务模型原理\"></a>Percolator 事务模型原理</h3><p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116162312811.png\" alt=\"image-20211116162312811\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116151040045.png\" alt=\"image-20211116151040045\"></p>\n<p>BigTable：分布式结构化数据存储系统</p>\n<p>+单行控制分布式事务</p>\n<p>隔离级别 对应 并发控制协议</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116151304073.png\" alt=\"image-20211116151304073\"></p>\n<p>可重复读（会幻读 +看得到）  MySQL</p>\n<p>无幻读 +看不到</p>\n<p>&#x3D;&#x3D;TiDB悲观锁&#x3D;MySQL的RR&#x3D;&#x3D;</p>\n<p>我看到的都是我事务开始时刻能看到的所有数据！</p>\n<p><strong>线性一致性要求，任何一个客户端读取返回新值后，后面所有客户端(包括相同客户端和不同客户端)读取也必须返回新值</strong></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116151826026.png\" alt=\"image-20211116151826026\"></p>\n<p>startTs endTs 确定时间序号：全局发号器  、时钟</p>\n<p>GPS + 原子时钟 有硬件要求 多点授时        物理时钟 麻烦      全球化</p>\n<p>HLC(Hybrid Logical Clock)时钟+NTP 有误差          混合时钟：Unix物理时钟ms+ms等分逻辑时钟</p>\n<p>单点-全局发号器            混合时钟序列           用一个全局唯一的时间戳作为xid(全局事务id)【TiDB OceanBase】</p>\n<p>优点：</p>\n<ul>\n<li>实现简单</li>\n<li>单时间源单调递增，可以减少事务冲突</li>\n</ul>\n<p>缺点也很明显</p>\n<ul>\n<li>单点授时，性能会有瓶颈</li>\n<li>不适合大规模集群部署</li>\n</ul>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116161241934.png\" alt=\"image-20211116161241934\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116161256053.png\" alt=\"image-20211116161256053\"></p>\n<p>找主行(随机)   加锁 WW冲突 报错：prewrite不回滚</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116161154804.png\" alt=\"image-20211116161154804\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116161214845.png\" alt=\"image-20211116161214845\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116161644547.png\" alt=\"image-20211116161644547\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116161836876.png\" alt=\"image-20211116161836876\"></p>\n<p>没提交失败就回滚 Tx</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116162135881.png\" alt=\"image-20211116162135881\"></p>\n<p>异步提交 冲突解决</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116162239848.png\" alt=\"image-20211116162239848\"></p>\n<h3 id=\"TiDB-事务的实现方式与优化\"><a href=\"#TiDB-事务的实现方式与优化\" class=\"headerlink\" title=\"TiDB 事务的实现方式与优化\"></a>TiDB 事务的实现方式与优化</h3><p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116171159933.png\" alt=\"image-20211116171159933\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116171334722.png\" alt=\"image-20211116171334722\"></p>\n<p>PD：Route TSO</p>\n<p>memBuffer 内存溢出</p>\n<p>版本检查  eg10：00之前的</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116172153078.png\" alt=\"image-20211116172153078\"></p>\n<p>WW冲突 W没加锁  上次TX提交了cur才能开始</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116172311772.png\" alt=\"image-20211116172311772\"></p>\n<p>【乐观锁：commit时才真正做锁检测  大量修改用时长，改了20min全回滚。。。】</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116172409861.png\" alt=\"image-20211116172409861\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116172724157.png\" alt=\"image-20211116172724157\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116172905103.png\" alt=\"image-20211116172905103\"></p>\n<p>悲观锁：</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116173404092.png\" alt=\"image-20211116173404092\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116173515126.png\" alt=\"image-20211116173515126\"></p>\n<p>版本检测</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116173526870.png\" alt=\"image-20211116173526870\"></p>\n<p>锁冲突检测</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116173627840.png\" alt=\"image-20211116173627840\"></p>\n<p>DML加行锁 占位符</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116173715007.png\" alt=\"image-20211116173715007\"></p>\n<p>占位符-&gt;info  prewrite工作减轻</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116173735539.png\" alt=\"image-20211116173735539\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116173744958.png\" alt=\"image-20211116173744958\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116174443774.png\" alt=\"image-20211116174443774\"></p>\n<p>&#x3D;&#x3D;【优化】悲观锁（DML阻塞等事务提交）、RR+select…for update;启动当前读&#x3D;&#x3D;</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116174555885.png\" alt=\"image-20211116174555885\"></p>\n<p>冲突敏感：悲观锁</p>\n<p>乐观锁 commit时才报错写冲突</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116174826631.png\" alt=\"image-20211116174826631\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116182250878.png\" alt=\"image-20211116182250878\"></p>\n<p>悲观锁</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116182415377.png\" alt=\"image-20211116182415377\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116182638396.png\" alt=\"image-20211116182638396\"></p>\n<p>还是原值，看不到新值，因为左边没提交  不支持賍读</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116182833441.png\" alt=\"image-20211116182833441\"></p>\n<p>DML时就做冲突检测 检查到锁，阻塞等待</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116183026894.png\" alt=\"image-20211116183026894\"></p>\n<p>提交解锁了 DML成功</p>\n<h2 id=\"写偏斜write-skew！select-…-for-update-启动当前读！\"><a href=\"#写偏斜write-skew！select-…-for-update-启动当前读！\" class=\"headerlink\" title=\"写偏斜write skew！select … for update; 启动当前读！\"></a>写偏斜write skew！select … for update; 启动当前读！</h2><p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116183541405.png\" alt=\"image-20211116183541405\"></p>\n<p>写偏斜通常发生在RR隔离级别  snapshot isolation</p>\n<p>改自己使两球同色</p>\n<p>改的是不同对象，无锁冲突（可以乐观锁&#x2F;悲观锁），就成这样了。。。</p>\n<p>【都白黑】</p>\n<p>左边白改黑 提交</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116183941791.png\" alt=\"image-20211116183941791\"></p>\n<p>右边没变：因为RR 不賍读</p>\n<p>右边黑改白 提交</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116184221609.png\" alt=\"image-20211116184221609\"></p>\n<p>再查：都黑白</p>\n<p>&#x3D;&#x3D;【solution：RR  +  select … for update; 读取当前值】&#x3D;&#x3D;</p>\n<p>都begin</p>\n<p>L:白改黑 提交</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116184526653.png\" alt=\"image-20211116184526653\"></p>\n<p>select … for update; 启动当前读！【排它锁(X)】 都黑 那就不改了 commit  OK</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211112103425255.png\" alt=\"image-20211112103425255\"></p>\n<p>&#x2F;1. 【多选题】下列关于 TiDB 数据库事务实现，正确的是？（ 选 2 项 ）BD</p>\n<p>A. TiDB 数据库乐观锁不需要在 Lock 列族中写入锁信息</p>\n<p>B. Write 列族记录的是事务提交信息，或者说版本信息</p>\n<p>C. 悲观锁下，我们需要将 prewrite 阶段提到 DML 操作中来做  -&gt;  加锁操作提前</p>\n<p>D. 乐观锁下，事务在 prewrite 阶段检测写写冲突和锁冲突</p>\n<p>&#x2F;2. 【单选题】 下列关于 TiDB 的事务，不正确的是？B</p>\n<p> A. 写偏斜可以出现悲观锁模式或者乐观锁模式  </p>\n<p> B. 写偏斜可以出现在可重复读隔离级别或者提交读隔离级别            读已提交不会写偏斜</p>\n<p> C. 是否使用 for update 在可重复读隔离级别有可能读到不同的值  </p>\n<p> D. 悲观锁模式遇到锁冲突时，默认会阻塞 </p>\n<p>&#x2F;1. 【多选题】下列属于 TiKV 相关功能的是？（ 选 4 项 ）ACDF</p>\n<p>A. 系统参数和元数据信息的持久化</p>\n<p>B. 产生 TSO</p>\n<p>C. 分布式事务实现</p>\n<p>D. MVCC</p>\n<p>E. 生成物理执行计划</p>\n<p>F. 表统计信息的持久化</p>\n<p>&#x2F;2. 【单选题】关于 TiKV 数据持久化，下列说法不正确的是？C</p>\n<p> A. RocksDB 有 <strong>2 个实例</strong>，分别用来持久化 raft log 和 key value 数据  </p>\n<p> B. RocksDB 中 WAL 用来保证写不丢失  </p>\n<p> C. 对于<strong>删除操作</strong>，只需要在原 key value 数据上标记已删除即可     【不标记已有删除，而是**&#x3D;&#x3D;插入一条新的delete…数据&#x3D;&#x3D;**即可】</p>\n<p> D. RocksDB 中，除了 Level 0 层的数据，其他 Level 都是单一排序持久化的 </p>\n<h1 id=\"PD（Placement-Driver）-简介\"><a href=\"#PD（Placement-Driver）-简介\" class=\"headerlink\" title=\"PD（Placement Driver） 简介\"></a>PD（Placement Driver） 简介</h1><p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116212938068.png\" alt=\"image-20211116212938068\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116191907448.png\" alt=\"image-20211116191907448\"></p>\n<p>集成了etcd，支持自动故障转移auto fail-over不担心单点故障； etcd-raft保证强一致性</p>\n<p>奇数个 3个节点：1L2F</p>\n<p>store就是TiKV Node节点</p>\n<p>副本Peer 角色1L2F</p>\n<p>管理多Region（96M）：multi-raft</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116192148169.png\" alt=\"image-20211116192148169\"></p>\n<p>1大脑  xID  3.始&#x2F;终TSO  4.元数据热点调度  5.label高可用   监控</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116193702488.png\" alt=\"image-20211116193702488\"></p>\n<p>LF变化 backoff延迟 region分裂：Region Cache信息过久 重查PD</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116193743882.png\" alt=\"image-20211116193743882\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116193950883.png\" alt=\"image-20211116193950883\"></p>\n<p>1ms&#x3D;262144TSO</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116194509630.png\" alt=\"image-20211116194509630\"></p>\n<p>校验tsFuture异步对象拿对应的TSO</p>\n<p>保证单增 需要同步TSO  出现IO瓶颈 ！-&gt;时间窗口：mem批量分配 只定时存end编号 降IOPS</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116194942795.png\" alt=\"image-20211116194942795\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116194847680.png\" alt=\"image-20211116194847680\"></p>\n<p>可能使用TSO非连续但保证递增</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116195242192.png\" alt=\"image-20211116195242192\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116195319023.png\" alt=\"image-20211116195319023\"></p>\n<p>心跳： 健康，mem usage、容量、busy情况                 副本分布状况，数据量，RW流量</p>\n<p>均不均匀</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116200214541.png\" alt=\"image-20211116200214541\"></p>\n<p>leaderRW均衡  region存储均衡</p>\n<p>写热点：打散 分散</p>\n<p>drop del trucate: 空region合并</p>\n<p>【生成 operator】</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116200742634.png\" alt=\"image-20211116200742634\"></p>\n<p>分裂 合并 转移</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116200854898.png\" alt=\"image-20211116200854898\"></p>\n<p>3数据中心 6机柜 12台主机</p>\n<p>DC2挂了：region 1 多半没了！</p>\n<p>DC1挂了：region 2 多半没了！</p>\n<p>挂哪个DC，region3都不受影响</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116212813344.png\" alt=\"image-20211116212813344\"></p>\n<p>不同peer副本要在不同zone。zone是一个逻辑概念：可能是dc，也可能是rack&#x2F;host</p>\n<p>&#x2F;1. 【单选题】下列关于 PD（Placement Driver）架构和功能正确的是？ B</p>\n<p> A. 访问 PD 集群中的任何一个节点都可以获得 TSO   【只有Leader 单点】</p>\n<p> B. TiKV 会周期性地向 PD 【上报】集群状态  心跳   </p>\n<p> C. PD 会周期性地查询 TiKV 的状态，不需要 TiKV 上报，目的是为了高效       反了  </p>\n<p> D. PD 的调度功能只能平衡 region 的分布，无法对 leader 进行调度     &#x3D;&#x3D;【生成调度：leaderRW均衡  region存储均衡】&#x3D;&#x3D;</p>\n<p>&#x2F;2. 【单选题】2. 关于 label ，下列说法不正确的是？ C</p>\n<p> A. label 的本质是个调度系统，可以人为控制 region 副本的存放位置   【粒度不同  影响&#x2F;控制】 </p>\n<p> B. label 需要在 PD 和 TiKV 上进行配置  【知道…     info】</p>\n<p> C. zone 一般和数据中心（DC）对应，这样可以获得最大的可用性  【只是逻辑概念！】</p>\n<p> D. 如果某个 region 不可用，有可能造成整个 TiDB 数据库不可用  &#x3D;&#x3D;【if region存元数据 包括schema info…那就不可用了】&#x3D;&#x3D;</p>\n<h1 id=\"深入了解-TiKV-架构原理\"><a href=\"#深入了解-TiKV-架构原理\" class=\"headerlink\" title=\"深入了解 TiKV 架构原理\"></a>深入了解 TiKV 架构原理</h1><h2 id=\"TiKV整体架构\"><a href=\"#TiKV整体架构\" class=\"headerlink\" title=\"TiKV整体架构\"></a>TiKV整体架构</h2><p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116214815368.png\" alt=\"image-20211116214815368\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116214855427.png\" alt=\"image-20211116214855427\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116214948808.png\" alt=\"image-20211116214948808\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116215652641.png\" alt=\"image-20211116215652641\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116215734692.png\" alt=\"image-20211116215734692\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116215821767.png\" alt=\"image-20211116215821767\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116215839523.png\" alt=\"image-20211116215839523\"></p>\n<p>&#x3D;&#x3D;3.用于数据搬运：直接搬运文件，不用逐行扫描挨个插入？？？&#x3D;&#x3D;</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116220339093.png\" alt=\"image-20211116220339093\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116220428762.png\" alt=\"image-20211116220428762\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116220501699.png\" alt=\"image-20211116220501699\"></p>\n<p>4Batch来优化Multi-Raft  ？？？</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116220606432.png\" alt=\"image-20211116220606432\"></p>\n<p>PD-&gt;KV：LB（DC间） 分裂（热点）  合并（碎片过多）</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116220752628.png\" alt=\"image-20211116220752628\"></p>\n<p>&#x3D;&#x3D;只是元数据改变范围&#x3D;&#x3D;： new一个新的raft group管理空出来的分片范围~</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116221128016.png\" alt=\"image-20211116221128016\"></p>\n<p>【分布式事务】</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116221303845.png\" alt=\"image-20211116221303845\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116221427394.png\" alt=\"image-20211116221427394\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116221450011.png\" alt=\"image-20211116221450011\"></p>\n<p>主提交，副异步提交</p>\n<p>【Coprocessor】</p>\n<p>&#x3D;&#x3D;本地计算思想？？？&#x3D;&#x3D;</p>\n<p>hadoop MR数据计算本地化是指的map任务</p>\n<p><a href=\"https://haokan.baidu.com/v?pd=wisenatural&amp;vid=2263116146187548309\">https://haokan.baidu.com/v?pd=wisenatural&amp;vid=2263116146187548309</a></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116222719240.png\" alt=\"image-20211116222719240\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116222742901.png\" alt=\"image-20211116222742901\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116221547670.png\" alt=\"image-20211116221547670\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211116221654602.png\" alt=\"image-20211116221654602\"></p>\n<p>&#x3D;&#x3D;gRPC？？？&#x3D;&#x3D;</p>\n<p>PD-&gt;KV：LB命令&#x2F;执行</p>\n<h2 id=\"存储引擎\"><a href=\"#存储引擎\" class=\"headerlink\" title=\"存储引擎\"></a>存储引擎</h2><p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117141432469.png\" alt=\"image-20211117141432469\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117141559809.png\" alt=\"image-20211117141559809\"></p>\n<p>只append追加不改</p>\n<p>定期重组数据！分新旧level</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117141926646.png\" alt=\"image-20211117141926646\"></p>\n<p>所以append对块擦除的SSD友好！</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117142316249.png\" alt=\"image-20211117142316249\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117142503104.png\" alt=\"image-20211117142503104\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117142755257.png\" alt=\"image-20211117142755257\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117143033828.png\" alt=\"image-20211117143033828\"></p>\n<p>合并后range变大，要找：Write每层O(T)      append范围&#x3D;，Write每层O(1)</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117143510720.png\" alt=\"image-20211117143510720\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117143600001.png\" alt=\"image-20211117143600001\"></p>\n<p>FB </p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117143753386.png\" alt=\"image-20211117143753386\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117143833183.png\" alt=\"image-20211117143833183\"></p>\n<p>memtable实际是跳表SkipList</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117144223388.png\" alt=\"image-20211117144223388\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117144511471.png\" alt=\"image-20211117144511471\"></p>\n<p>OS文件格式   </p>\n<p>index Block：存key的range范围</p>\n<p>前缀压缩：Trie？？？？</p>\n<p>BloomFilter 排除key用</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117144737433.png\" alt=\"image-20211117144737433\"></p>\n<p>相当于系统日志 宕机重启可redo</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117145226490.png\" alt=\"image-20211117145226490\"></p>\n<p>level0 SST的key range交错重叠，不能并发sub-compaction，</p>\n<p>其他level： 将job分割，多段range交给多个线程并发执行</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117145603518.png\" alt=\"image-20211117145603518\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117145930049.png\" alt=\"image-20211117145930049\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117145702510.png\" alt=\"image-20211117145702510\"></p>\n<p>选出max compaction score的文件 —找range重叠的文件：归并排序</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117150047104.png\" alt=\"image-20211117150047104\"></p>\n<p>L0 range交错 都要读！</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117150223749.png\" alt=\"image-20211117150223749\"></p>\n<p>CF逻辑分区</p>\n<p>副本快速迁移复制</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117150456427.png\" alt=\"image-20211117150456427\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117151031787.png\" alt=\"image-20211117151031787\"></p>\n<p>Fi：引用计数  &#x3D;&#x3D; 0,才真正物理删除 （JVM GC）</p>\n<p>in-&gt;out 生成即只读，不能更改               compaction了，也不影响iter1的实际读取！</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117151420809.png\" alt=\"image-20211117151420809\"></p>\n<p>有共享block-cache</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117151629785.png\" alt=\"image-20211117151629785\"></p>\n<p>不引入写放大，尽量放入最底层</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117152159092.png\" alt=\"image-20211117152159092\"></p>\n<p>告诉你存在，实际没读到，也不影响正确性</p>\n<p>因为hash冲突了，多对一了，就会误认为存在</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117152310152.png\" alt=\"image-20211117152310152\"></p>\n<p>单点查询–&gt;前缀范围查询</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117152739594.png\" alt=\"image-20211117152739594\"></p>\n<p>CPU–IO的tradeoff</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117152845020.png\" alt=\"image-20211117152845020\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117152857964.png\" alt=\"image-20211117152857964\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117155807188.png\" alt=\"image-20211117155807188\"></p>\n<p>减少compaction写放大</p>\n<p>vlaue变ptr，所指向的v可能被GC</p>\n<p>SSD并行性：prefetch！</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117160021945.png\" alt=\"image-20211117160021945\"></p>\n<p>&#x3D;&#x3D;WiscKey论文？？？&#x3D;&#x3D;</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117160237949.png\" alt=\"image-20211117160237949\"></p>\n<p>value被删idx不知道，定期GC</p>\n<p>tail：按v查k ，k没失效：tail前移+头插；value位置变化，还需更新LSM tr中的index。                          key失效：tail前移</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117160828887.png\" alt=\"image-20211117160828887\"></p>\n<p>更改配置项即可升级</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117160949788.png\" alt=\"image-20211117160949788\"></p>\n<p>随着compaction逐渐将大value写入Blob</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117161552000.png\" alt=\"image-20211117161552000\"></p>\n<p>compaction：input文件 - output文件 的TableProperties            失效value累加</p>\n<p>逻辑删除   </p>\n<p>并发写入时：先检查v，value被改了，就不更新blob index了 放弃操作     ？？？？？？？具体？？？？？？？</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117162631420.png\" alt=\"image-20211117162631420\"></p>\n<p>GC score</p>\n<p>&#x3D;&#x3D;DISCARD_RATIO？？？&#x3D;&#x3D;</p>\n<h2 id=\"Raft复制状态机\"><a href=\"#Raft复制状态机\" class=\"headerlink\" title=\"Raft复制状态机\"></a>Raft复制状态机</h2><p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117163320700.png\" alt=\"image-20211117163320700\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117163333615.png\" alt=\"image-20211117163333615\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117163445001.png\" alt=\"image-20211117163445001\"></p>\n<p>zk会话一致性：另一个Client session不一定能读到</p>\n<p><em>CAP</em>定理，指的是在一个分布式系统中，一致性（Consistency）、<strong>可用</strong>性（Availability）、分区<strong>容错</strong>性（Partition tolerance）。<em>CAP</em> 原则指的是，这三个要素最多只能同时实现两点，不可能三者兼顾。</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117164440624.png\" alt=\"image-20211117164440624\"></p>\n<p>&#x3D;&#x3D;全部节点失败不可用：Kafka&#x3D;&#x3D;            全W成功才能确认，延迟取决于最慢的那一台！        2挂–&gt;3</p>\n<p>过半：etcd, zk, tikv                            过半W成功能确认，延迟取决于最快的那3台！         2挂–&gt;5   </p>\n<p>延迟稳定！</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117164715081.png\" alt=\"image-20211117164715081\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117164818031.png\" alt=\"image-20211117164818031\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117164843210.png\" alt=\"image-20211117164843210\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117164855419.png\" alt=\"image-20211117164855419\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117165247011.png\" alt=\"image-20211117165247011\"></p>\n<p>p3和p1: 虽然last idx小但term大，agree term大的</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117170030565.png\" alt=\"image-20211117170030565\"></p>\n<p>同一term只投一次</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117170654920.png\" alt=\"image-20211117170654920\"></p>\n<p>某个follower失联（未过半 sys正常）重连后，会term+1 req选举，Leader变FL，发起新选举，整体被干扰影响。。。</p>\n<p>if过半节点有leader，就忽略pre-vote，此FL老实待着！</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117170803937.png\" alt=\"image-20211117170803937\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117170844329.png\" alt=\"image-20211117170844329\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117171347043.png\" alt=\"image-20211117171347043\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117171529456.png\" alt=\"image-20211117171529456\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117172716619.png\" alt=\"image-20211117172716619\"></p>\n<p>高term日志覆盖低term日志</p>\n<h3 id=\"x3D-x3D-why-leader重新发：term-x3D-5？？？看论文-解答！！！-x3D-x3D\"><a href=\"#x3D-x3D-why-leader重新发：term-x3D-5？？？看论文-解答！！！-x3D-x3D\" class=\"headerlink\" title=\"&#x3D;&#x3D;why leader重新发：term&#x3D;5？？？看论文 解答！！！&#x3D;&#x3D;\"></a>&#x3D;&#x3D;why leader重新发：term&#x3D;5？？？看论文 解答！！！&#x3D;&#x3D;</h3><p>VIP问题：</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117173247677.png\" alt=\"image-20211117173247677\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117173645775.png\" alt=\"image-20211117173645775\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117173758582.png\" alt=\"image-20211117173758582\"></p>\n<p>&#x3D;&#x3D;S1比S5被确认速度快？？？，确认了4、2，2不会被3覆盖&#x3D;&#x3D;【看论文！】</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117174554202.png\" alt=\"image-20211117174554202\"></p>\n<p>类似TCP滑动窗口</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117174621362.png\" alt=\"image-20211117174621362\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117174711953.png\" alt=\"image-20211117174711953\"></p>\n<p>去热点</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117174807185.png\" alt=\"image-20211117174807185\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117174839242.png\" alt=\"image-20211117174839242\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117174854188.png\" alt=\"image-20211117174854188\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117184611518.png\" alt=\"image-20211117184611518\"></p>\n<p>raftstore </p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117184817556.png\" alt=\"image-20211117184817556\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117184905403.png\" alt=\"image-20211117184905403\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117184941699.png\" alt=\"image-20211117184941699\"></p>\n<p>+线程 +TiKV实例   扩容机器数</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117185040484.png\" alt=\"image-20211117185040484\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117185124502.png\" alt=\"image-20211117185124502\"></p>\n<p>propose  apply管道排队的时间</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117185158984.png\" alt=\"image-20211117185158984\"></p>\n<h2 id=\"TiDB事务原理与实现\"><a href=\"#TiDB事务原理与实现\" class=\"headerlink\" title=\"TiDB事务原理与实现\"></a>TiDB事务原理与实现</h2><p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117185718440.png\" alt=\"image-20211117185718440\"></p>\n<p>一、</p>\n<p>多语句原子操作</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117190204594.png\" alt=\"image-20211117190204594\"></p>\n<p>二、事务隔离级别：RU RC RR 串</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117190944668.png\" alt=\"image-20211117190944668\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117190803432.png\" alt=\"image-20211117190803432\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117190837171.png\" alt=\"image-20211117190837171\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117190633192.png\" alt=\"image-20211117190633192\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117190735818.png\" alt=\"image-20211117190735818\"></p>\n<p>TiDB解决了RR下的幻读！</p>\n<p>三、Percolator</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117191038501.png\" alt=\"image-20211117191038501\"></p>\n<p>SI</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117191051919.png\" alt=\"image-20211117191051919\"></p>\n<p>基于事务开始时间</p>\n<p>2PC</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117191412256.png\" alt=\"image-20211117191412256\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117194934428.png\" alt=\"image-20211117194934428\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117194952912.png\" alt=\"image-20211117194952912\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117195233331.png\" alt=\"image-20211117195233331\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117195010365.png\" alt=\"image-20211117195010365\"></p>\n<p>PK主键 单行控制</p>\n<p>MVCC 2PC交互多</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117195510076.png\" alt=\"image-20211117195510076\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117195747905.png\" alt=\"image-20211117195747905\"></p>\n<p>SQL-&gt;NoSQL 唯一kv方式</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117200031294.png\" alt=\"image-20211117200031294\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117221731167.png\" alt=\"image-20211117221731167\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117222832780.png\" alt=\"image-20211117222832780\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117223129131.png\" alt=\"image-20211117223129131\"></p>\n<p>autocommit  更新k  可重试事务</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211118104656779.png\" alt=\"image-20211118104656779\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211118104718680.png\" alt=\"image-20211118104718680\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211118104731572.png\" alt=\"image-20211118104731572\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211118104959363.png\" alt=\"image-20211118104959363\"></p>\n<p>没有select… for update 没加写锁，就要关掉auto retry 避免出现这种情况</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211118105355867.png\" alt=\"image-20211118105355867\"></p>\n<p>限制事务大小</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211118105508430.png\" alt=\"image-20211118105508430\"></p>\n<p>【Client端：】3事务auto commit 合并为一条事务commit</p>\n<h1 id=\"new\"><a href=\"#new\" class=\"headerlink\" title=\"new\"></a>new</h1><p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117203318949.png\" alt=\"image-20211117203318949\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117203435212.png\" alt=\"image-20211117203435212\"></p>\n<p>pay forward,创业公司基础软件：开源</p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117210418565.png\" alt=\"image-20211117210418565\"></p>\n<p>win make：</p>\n<p>wget <a href=\"https://dl.google.com/go/go1.14.5.linux-amd64.tar.gz\">https://dl.google.com/go/go1.14.5.linux-amd64.tar.gz</a></p>\n<p><a href=\"https://blog.csdn.net/weixin_38383877/article/details/103612131\">https://blog.csdn.net/weixin_38383877/article/details/103612131</a></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117211537501.png\" alt=\"image-20211117211537501\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117211636323.png\" alt=\"image-20211117211636323\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211117211815182.png\" alt=\"image-20211117211815182\"></p>\n<p><a href=\"https://github.com/pingcap/tidb\">GitHub - pingcap&#x2F;tidb: TiDB is an open source distributed HTAP database compatible with the MySQL protocol</a></p>\n<p><a href=\"https://github.com/tidb-incubator/tinysql\">GitHub - tidb-incubator&#x2F;tinysql: A course to build the SQL layer of a distributed database.</a></p>\n<p><a href=\"https://github.com/tidb-incubator/tinysql/blob/course/courses/material.md\">tinysql&#x2F;material.md at course · tidb-incubator&#x2F;tinysql · GitHub</a></p>\n<p>DDIA系统设计：<a href=\"http://ddia.vonng.com/\">http://ddia.vonng.com/</a></p>\n<p>GO语言设计与实现<a href=\"https://draveness.me/golang/\">https://draveness.me/golang/</a></p>\n<p><a href=\"https://learnku.com/docs/effective-go/2020\">https://learnku.com/docs/effective-go/2020</a></p>\n<p><a href=\"http://getrust.tech/\">http://getrust.tech</a></p>\n<h1 id=\"内存泄漏的定位与排查：Heap-Profiling-原理解析\"><a href=\"#内存泄漏的定位与排查：Heap-Profiling-原理解析\" class=\"headerlink\" title=\"内存泄漏的定位与排查：Heap Profiling 原理解析\"></a>内存泄漏的定位与排查：Heap Profiling 原理解析</h1><p><a href=\"https://mp.weixin.qq.com/s/vncOjgrSomLx5je-ywD5Ng\">https://mp.weixin.qq.com/s/vncOjgrSomLx5je-ywD5Ng</a></p>\n<p>git</p>\n<p><a href=\"https://blog.csdn.net/fwhezfwhez/article/details/79399072\">https://blog.csdn.net/fwhezfwhez/article/details/79399072</a></p>\n<h1 id=\"fatal-remote-origin-already-exists\"><a href=\"#fatal-remote-origin-already-exists\" class=\"headerlink\" title=\"fatal: remote origin already exists.\"></a>fatal: remote origin already exists.</h1><p><a href=\"https://blog.csdn.net/top_code/article/details/50381432\">https://blog.csdn.net/top_code/article/details/50381432</a></p>\n<p>1、先输入$ git remote rm origin(删除关联的origin的远程库)</p>\n<p>2、再输入$ git remote add origin <a href=\"mailto:&#x67;&#105;&#x74;&#64;&#x67;&#105;&#x74;&#104;&#117;&#x62;&#x2e;&#x63;&#111;&#x6d;\">&#x67;&#105;&#x74;&#64;&#x67;&#105;&#x74;&#104;&#117;&#x62;&#x2e;&#x63;&#111;&#x6d;</a>:(github名)&#x2F;(git项目名).git 就不会报错了！</p>\n<p>3、如果输入$ git remote rm origin 还是报错的话，error: Could not remove config section ‘remote.origin’. 我们需要修改gitconfig文件的内容</p>\n<p>4、找到你的github的安装路径，我的是C:&#x2F;Users&#x2F;ASUS&#x2F;AppData&#x2F;Local&#x2F;GitHub&#x2F;PortableGit_ca477551eeb4aea0e4ae9fcd3358bd96720bb5c8&#x2F;etc</p>\n<p>5、找到一个名为gitconfig的文件，打开它把里面的[remote “origin”]那一行删掉就好了！<br>————————————————<br>版权声明：本文为CSDN博主「码知秋」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href=\"https://blog.csdn.net/qq_40428678/article/details/84074207\">https://blog.csdn.net/qq_40428678/article/details/84074207</a></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211118153255556.png\" alt=\"image-20211118153255556\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211118171354427.png\" alt=\"image-20211118171354427\"></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211118171449802.png\" alt=\"image-20211118171449802\"></p>\n<p>git将现有已经修改代码提交到新的分支</p>\n<p><a href=\"https://blog.csdn.net/cssxn/article/details/109673887\">https://blog.csdn.net/cssxn/article/details/109673887</a></p>\n<p>1）首先需要将已经修改的代码保存到git暂存区，使用命令：<br>git stash</p>\n<p>2）创建并切换到新的代码分支<br>git checkout -b 分支名称</p>\n<p>3）将修改的代码恢复到新的分支<br>git stash pop</p>\n<p>4）保存已经修改的代码<br>增加修改的文件：git add 文件名<br>本地暂存：git commit -m “注释”<br>远程保存：git push origin 远程分支名</p>\n<p>git中使用make</p>\n<p><a href=\"https://blog.csdn.net/z69183787/article/details/96290717\">https://blog.csdn.net/z69183787/article/details/96290717</a></p>\n<p>git branch –delete dev</p>\n<p>git修改分支名</p>\n<p>需要将分支br_rename_old修改为br_rename_new，执行如下步骤：<br>1、执行命令git checkout br_rename_old切换到br_rename_old分支，如果已经在这个分支下，可以不执行此步骤<br>2、执行命令git pull origin br_rename_old将代码更新到和远程仓库一致<br>3、执行命令git branch -m br_rename_old br_rename_new将本地仓库的br_rename_old的名称修改为br_rename_new<br>4、执行命令git push –set-upstream origin br_rename_new将本地分支push到远程仓库<br>5、执行命令git push origin –delete br_rename_old将远程分支br_rename_old删除<br>————————————————<br>版权声明：本文为CSDN博主「花一样的阿衰」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href=\"https://blog.csdn.net/qq_33242956/article/details/105856965\">https://blog.csdn.net/qq_33242956/article/details/105856965</a></p>\n<p><img src=\"http://cache.itzy8.top/TiKV%E5%AD%A6%E4%B9%A0/image-20211119113705757.png\" alt=\"image-20211119113705757\"></p>\n<p>windows查看某个文件正在被哪些进程使用</p>\n<p><a href=\"https://jingyan.baidu.com/article/0aa223758230b588cd0d6458.html\">https://jingyan.baidu.com/article/0aa223758230b588cd0d6458.html</a></p>\n<p>性能 资源监视器 磁盘 文件 PID</p>\n<p>server-test.exe</p>\n<p>还是用goland单元测试吧。。。</p>\n","text":"[TOC] 开源 $ git config –global http.sslBackend “openssl” $ git config –global http.sslCAInfo “D:&#x2F;Software&#x2F;Program Files&#x2F;Git&#x...","link":"","photos":[],"count_time":{"symbolsCount":"22k","symbolsTime":"20 mins."},"categories":[{"name":"分布式存储引擎TiKV","slug":"分布式存储引擎TiKV","count":1,"path":"api/categories/分布式存储引擎TiKV.json"}],"tags":[{"name":"TiKV","slug":"TiKV","count":1,"path":"api/tags/TiKV.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%BC%80%E6%BA%90\"><span class=\"toc-text\">开源</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#TiDB-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%B6%E6%9E%84%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">TiDB 数据库架构概述</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#TiDB-Server-%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">TiDB Server 架构原理简介</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-SQL%E8%AF%AD%E8%A8%80%E5%85%B1%E5%88%86%E4%B8%BA%E5%9B%9B%E5%A4%A7%E7%B1%BB%EF%BC%9A\"><span class=\"toc-text\">1. SQL语言共分为四大类：</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#TiKV-%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">TiKV 架构原理简介</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8C%81%E4%B9%85%E5%8C%96\"><span class=\"toc-text\">持久化</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1-MVCC\"><span class=\"toc-text\">分布式事务  MVCC</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Raft-%E5%88%86%E5%B8%83%E5%BC%8F%E6%95%B0%E6%8D%AE%E6%89%A7%E8%A1%8C\"><span class=\"toc-text\">Raft   分布式数据执行</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AF%BB%E5%8F%96-x2F-Coprocessor\"><span class=\"toc-text\">读取&#x2F;Coprocessor</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#TiDB-%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%E8%AE%BE%E8%AE%A1\"><span class=\"toc-text\">TiDB 数据库事务设计</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">分布式事务基本原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EF%BC%81%E3%80%90%E6%96%87%E7%AB%A0%E3%80%91%E5%88%86%E5%B8%83%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86\"><span class=\"toc-text\">！【文章】分布式数据库的核心知识</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Percolator-%E4%BA%8B%E5%8A%A1%E6%A8%A1%E5%9E%8B%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">Percolator 事务模型原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#TiDB-%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F%E4%B8%8E%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">TiDB 事务的实现方式与优化</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%86%99%E5%81%8F%E6%96%9Cwrite-skew%EF%BC%81select-%E2%80%A6-for-update-%E5%90%AF%E5%8A%A8%E5%BD%93%E5%89%8D%E8%AF%BB%EF%BC%81\"><span class=\"toc-text\">写偏斜write skew！select … for update; 启动当前读！</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#PD%EF%BC%88Placement-Driver%EF%BC%89-%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">PD（Placement Driver） 简介</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3-TiKV-%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">深入了解 TiKV 架构原理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#TiKV%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84\"><span class=\"toc-text\">TiKV整体架构</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E\"><span class=\"toc-text\">存储引擎</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Raft%E5%A4%8D%E5%88%B6%E7%8A%B6%E6%80%81%E6%9C%BA\"><span class=\"toc-text\">Raft复制状态机</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#x3D-x3D-why-leader%E9%87%8D%E6%96%B0%E5%8F%91%EF%BC%9Aterm-x3D-5%EF%BC%9F%EF%BC%9F%EF%BC%9F%E7%9C%8B%E8%AE%BA%E6%96%87-%E8%A7%A3%E7%AD%94%EF%BC%81%EF%BC%81%EF%BC%81-x3D-x3D\"><span class=\"toc-text\">&#x3D;&#x3D;why leader重新发：term&#x3D;5？？？看论文 解答！！！&#x3D;&#x3D;</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#TiDB%E4%BA%8B%E5%8A%A1%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">TiDB事务原理与实现</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#new\"><span class=\"toc-text\">new</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E7%9A%84%E5%AE%9A%E4%BD%8D%E4%B8%8E%E6%8E%92%E6%9F%A5%EF%BC%9AHeap-Profiling-%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90\"><span class=\"toc-text\">内存泄漏的定位与排查：Heap Profiling 原理解析</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#fatal-remote-origin-already-exists\"><span class=\"toc-text\">fatal: remote origin already exists.</span></a></li></ol>","author":{"name":"CodingSeed","slug":"blog-author","avatar":"http://cache.itzy8.top/img/a.jpg","link":"/","description":"","socials":{"github":"https://github.com/codingseed","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"sgg大数据高频面试题","uid":"128485c0403ac0ca82c74aaa720458ad","slug":"sgg大数据高频面试题","date":"2021-12-26T12:18:53.000Z","updated":"2022-08-22T07:56:11.565Z","comments":true,"path":"api/articles/sgg大数据高频面试题.json","keywords":null,"cover":"http://browser9.qhimg.com/bdm/480_296_0/t015eb817c1c36a6fc1.jpg","text":"尚硅谷大数据技术之高频面试题 （作者：尚硅谷大数据研发部） 版本：V8.0.15 目录项目涉及技术1.1 Linux&amp;Shell1.1.1 Linux常用高级命令 序号 命令 命令解释 1 top 查看内存 2 df -h 查看磁盘存储情况 3 iotop 查看磁盘IO读...","link":"","photos":[],"count_time":{"symbolsCount":"143k","symbolsTime":"2:10"},"categories":[{"name":"大数据","slug":"大数据","count":2,"path":"api/categories/大数据.json"}],"tags":[{"name":"大数据","slug":"大数据","count":2,"path":"api/tags/大数据.json"}],"author":{"name":"CodingSeed","slug":"blog-author","avatar":"http://cache.itzy8.top/img/a.jpg","link":"/","description":"","socials":{"github":"https://github.com/codingseed","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Leetcode1-500","uid":"ab2eededdd25843ff0dfd005b352f815","slug":"Leetcode1-500","date":"2021-08-16T13:41:20.000Z","updated":"2022-08-22T10:05:11.593Z","comments":true,"path":"api/articles/Leetcode1-500.json","keywords":null,"cover":"http://browser9.qhimg.com/bdm/960_593_0/t01039b44f7c7ca5ca3.jpg","text":"1.两数之和 找sum的2个idx:2sum (枚举Si,find之前是否存在target-Si [hash表 O(1)search])平衡树：map O(logn) –&gt; hash表：unordered_map O(1):target-Si hash[val] &#x3D...","link":"","photos":[],"count_time":{"symbolsCount":"447k","symbolsTime":"6:46"},"categories":[{"name":"算法","slug":"算法","count":3,"path":"api/categories/算法.json"}],"tags":[{"name":"算法","slug":"算法","count":3,"path":"api/tags/算法.json"}],"author":{"name":"CodingSeed","slug":"blog-author","avatar":"http://cache.itzy8.top/img/a.jpg","link":"/","description":"","socials":{"github":"https://github.com/codingseed","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}